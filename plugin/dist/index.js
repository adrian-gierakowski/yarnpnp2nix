"use strict";var is=Object.create;var Ke=Object.defineProperty;var as=Object.getOwnPropertyDescriptor;var os=Object.getOwnPropertyNames;var cs=Object.getPrototypeOf,ls=Object.prototype.hasOwnProperty;var G=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),us=(n,e)=>{for(var t in e)Ke(n,t,{get:e[t],enumerable:!0})},nn=(n,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of os(e))!ls.call(n,s)&&s!==t&&Ke(n,s,{get:()=>e[s],enumerable:!(r=as(e,s))||r.enumerable});return n};var re=(n,e,t)=>(t=n!=null?is(cs(n)):{},nn(e||!n||!n.__esModule?Ke(t,"default",{value:n,enumerable:!0}):t,n)),fs=n=>nn(Ke({},"__esModule",{value:!0}),n);var cn=G((Ba,on)=>{on.exports=an;an.sync=hs;var rn=require("fs");function ms(n,e){var t=e.pathExt!==void 0?e.pathExt:process.env.PATHEXT;if(!t||(t=t.split(";"),t.indexOf("")!==-1))return!0;for(var r=0;r<t.length;r++){var s=t[r].toLowerCase();if(s&&n.substr(-s.length).toLowerCase()===s)return!0}return!1}function sn(n,e,t){return!n.isSymbolicLink()&&!n.isFile()?!1:ms(e,t)}function an(n,e,t){rn.stat(n,function(r,s){t(r,r?!1:sn(s,n,e))})}function hs(n,e){return sn(rn.statSync(n),n,e)}});var hn=G((Oa,mn)=>{mn.exports=un;un.sync=ps;var ln=require("fs");function un(n,e,t){ln.stat(n,function(r,s){t(r,r?!1:fn(s,e))})}function ps(n,e){return fn(ln.statSync(n),e)}function fn(n,e){return n.isFile()&&ds(n,e)}function ds(n,e){var t=n.mode,r=n.uid,s=n.gid,i=e.uid!==void 0?e.uid:process.getuid&&process.getuid(),a=e.gid!==void 0?e.gid:process.getgid&&process.getgid(),o=parseInt("100",8),u=parseInt("010",8),h=parseInt("001",8),y=o|u,d=t&h||t&u&&s===a||t&o&&r===i||t&y&&i===0;return d}});var dn=G((Ca,pn)=>{var Ua=require("fs"),Ye;process.platform==="win32"||global.TESTING_WINDOWS?Ye=cn():Ye=hn();pn.exports=mt;mt.sync=ys;function mt(n,e,t){if(typeof e=="function"&&(t=e,e={}),!t){if(typeof Promise!="function")throw new TypeError("callback not provided");return new Promise(function(r,s){mt(n,e||{},function(i,a){i?s(i):r(a)})})}Ye(n,e||{},function(r,s){r&&(r.code==="EACCES"||e&&e.ignoreErrors)&&(r=null,s=!1),t(r,s)})}function ys(n,e){try{return Ye.sync(n,e||{})}catch(t){if(e&&e.ignoreErrors||t.code==="EACCES")return!1;throw t}}});var kn=G((Ma,En)=>{var Fe=process.platform==="win32"||process.env.OSTYPE==="cygwin"||process.env.OSTYPE==="msys",yn=require("path"),gs=Fe?";":":",gn=dn(),Pn=n=>Object.assign(new Error(`not found: ${n}`),{code:"ENOENT"}),wn=(n,e)=>{let t=e.colon||gs,r=n.match(/\//)||Fe&&n.match(/\\/)?[""]:[...Fe?[process.cwd()]:[],...(e.path||process.env.PATH||"").split(t)],s=Fe?e.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",i=Fe?s.split(t):[""];return Fe&&n.indexOf(".")!==-1&&i[0]!==""&&i.unshift(""),{pathEnv:r,pathExt:i,pathExtExe:s}},Sn=(n,e,t)=>{typeof e=="function"&&(t=e,e={}),e||(e={});let{pathEnv:r,pathExt:s,pathExtExe:i}=wn(n,e),a=[],o=h=>new Promise((y,d)=>{if(h===r.length)return e.all&&a.length?y(a):d(Pn(n));let w=r[h],T=/^".*"$/.test(w)?w.slice(1,-1):w,b=yn.join(T,n),L=!T&&/^\.[\\\/]/.test(n)?n.slice(0,2)+b:b;y(u(L,h,0))}),u=(h,y,d)=>new Promise((w,T)=>{if(d===s.length)return w(o(y+1));let b=s[d];gn(h+b,{pathExt:i},(L,W)=>{if(!L&&W)if(e.all)a.push(h+b);else return w(h+b);return w(u(h,y,d+1))})});return t?o(0).then(h=>t(null,h),t):o(0)},Ps=(n,e)=>{e=e||{};let{pathEnv:t,pathExt:r,pathExtExe:s}=wn(n,e),i=[];for(let a=0;a<t.length;a++){let o=t[a],u=/^".*"$/.test(o)?o.slice(1,-1):o,h=yn.join(u,n),y=!u&&/^\.[\\\/]/.test(n)?n.slice(0,2)+h:h;for(let d=0;d<r.length;d++){let w=y+r[d];try{if(gn.sync(w,{pathExt:s}))if(e.all)i.push(w);else return w}catch{}}}if(e.all&&i.length)return i;if(e.nothrow)return null;throw Pn(n)};En.exports=Sn;Sn.sync=Ps});var Tn=G((Ha,ht)=>{"use strict";var bn=(n={})=>{let e=n.env||process.env;return(n.platform||process.platform)!=="win32"?"PATH":Object.keys(e).reverse().find(r=>r.toUpperCase()==="PATH")||"Path"};ht.exports=bn;ht.exports.default=bn});var In=G((ja,vn)=>{"use strict";var Fn=require("path"),ws=kn(),Ss=Tn();function xn(n,e){let t=n.options.env||process.env,r=process.cwd(),s=n.options.cwd!=null,i=s&&process.chdir!==void 0&&!process.chdir.disabled;if(i)try{process.chdir(n.options.cwd)}catch{}let a;try{a=ws.sync(n.command,{path:t[Ss({env:t})],pathExt:e?Fn.delimiter:void 0})}catch{}finally{i&&process.chdir(r)}return a&&(a=Fn.resolve(s?n.options.cwd:"",a)),a}function Es(n){return xn(n)||xn(n,!0)}vn.exports=Es});var An=G((Wa,dt)=>{"use strict";var pt=/([()\][%!^"`<>&|;, *?])/g;function ks(n){return n=n.replace(pt,"^$1"),n}function bs(n,e){return n=`${n}`,n=n.replace(/(\\*)"/g,'$1$1\\"'),n=n.replace(/(\\*)$/,"$1$1"),n=`"${n}"`,n=n.replace(pt,"^$1"),e&&(n=n.replace(pt,"^$1")),n}dt.exports.command=ks;dt.exports.argument=bs});var Dn=G((qa,Ln)=>{"use strict";Ln.exports=/^#!(.*)/});var Rn=G((Ga,Nn)=>{"use strict";var Ts=Dn();Nn.exports=(n="")=>{let e=n.match(Ts);if(!e)return null;let[t,r]=e[0].replace(/#! ?/,"").split(" "),s=t.split("/").pop();return s==="env"?r:r?`${s} ${r}`:s}});var On=G((Va,Bn)=>{"use strict";var yt=require("fs"),Fs=Rn();function xs(n){let t=Buffer.alloc(150),r;try{r=yt.openSync(n,"r"),yt.readSync(r,t,0,150,0),yt.closeSync(r)}catch{}return Fs(t.toString())}Bn.exports=xs});var Hn=G((Ka,Mn)=>{"use strict";var vs=require("path"),Un=In(),Cn=An(),Is=On(),As=process.platform==="win32",Ls=/\.(?:com|exe)$/i,Ds=/node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;function Ns(n){n.file=Un(n);let e=n.file&&Is(n.file);return e?(n.args.unshift(n.file),n.command=e,Un(n)):n.file}function Rs(n){if(!As)return n;let e=Ns(n),t=!Ls.test(e);if(n.options.forceShell||t){let r=Ds.test(e);n.command=vs.normalize(n.command),n.command=Cn.command(n.command),n.args=n.args.map(i=>Cn.argument(i,r));let s=[n.command].concat(n.args).join(" ");n.args=["/d","/s","/c",`"${s}"`],n.command=process.env.comspec||"cmd.exe",n.options.windowsVerbatimArguments=!0}return n}function Bs(n,e,t){e&&!Array.isArray(e)&&(t=e,e=null),e=e?e.slice(0):[],t=Object.assign({},t);let r={command:n,args:e,options:t,file:void 0,original:{command:n,args:e}};return t.shell?r:Rs(r)}Mn.exports=Bs});var qn=G((Ya,Wn)=>{"use strict";var gt=process.platform==="win32";function Pt(n,e){return Object.assign(new Error(`${e} ${n.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${e} ${n.command}`,path:n.command,spawnargs:n.args})}function Os(n,e){if(!gt)return;let t=n.emit;n.emit=function(r,s){if(r==="exit"){let i=jn(s,e,"spawn");if(i)return t.call(n,"error",i)}return t.apply(n,arguments)}}function jn(n,e){return gt&&n===1&&!e.file?Pt(e.original,"spawn"):null}function Us(n,e){return gt&&n===1&&!e.file?Pt(e.original,"spawnSync"):null}Wn.exports={hookChildProcess:Os,verifyENOENT:jn,verifyENOENTSync:Us,notFoundError:Pt}});var Kn=G((Ja,xe)=>{"use strict";var Gn=require("child_process"),wt=Hn(),St=qn();function Vn(n,e,t){let r=wt(n,e,t),s=Gn.spawn(r.command,r.args,r.options);return St.hookChildProcess(s,r),s}function Cs(n,e,t){let r=wt(n,e,t),s=Gn.spawnSync(r.command,r.args,r.options);return s.error=s.error||St.verifyENOENTSync(s.status,r),s}xe.exports=Vn;xe.exports.spawn=Vn;xe.exports.sync=Cs;xe.exports._parse=wt;xe.exports._enoent=St});var rr=G((ho,ze)=>{ze.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"];process.platform!=="win32"&&ze.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT");process.platform==="linux"&&ze.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")});var cr=G((po,Le)=>{var O=global.process,Pe=function(n){return n&&typeof n=="object"&&typeof n.removeListener=="function"&&typeof n.emit=="function"&&typeof n.reallyExit=="function"&&typeof n.listeners=="function"&&typeof n.kill=="function"&&typeof n.pid=="number"&&typeof n.on=="function"};Pe(O)?(sr=require("assert"),Ie=rr(),ir=/^win/i.test(O.platform),Me=require("events"),typeof Me!="function"&&(Me=Me.EventEmitter),O.__signal_exit_emitter__?J=O.__signal_exit_emitter__:(J=O.__signal_exit_emitter__=new Me,J.count=0,J.emitted={}),J.infinite||(J.setMaxListeners(1/0),J.infinite=!0),Le.exports=function(n,e){if(!Pe(global.process))return function(){};sr.equal(typeof n,"function","a callback must be provided for exit handler"),Ae===!1&&Ft();var t="exit";e&&e.alwaysLast&&(t="afterexit");var r=function(){J.removeListener(t,n),J.listeners("exit").length===0&&J.listeners("afterexit").length===0&&Xe()};return J.on(t,n),r},Xe=function(){!Ae||!Pe(global.process)||(Ae=!1,Ie.forEach(function(e){try{O.removeListener(e,_e[e])}catch{}}),O.emit=$e,O.reallyExit=xt,J.count-=1)},Le.exports.unload=Xe,we=function(e,t,r){J.emitted[e]||(J.emitted[e]=!0,J.emit(e,t,r))},_e={},Ie.forEach(function(n){_e[n]=function(){if(!!Pe(global.process)){var t=O.listeners(n);t.length===J.count&&(Xe(),we("exit",null,n),we("afterexit",null,n),ir&&n==="SIGHUP"&&(n="SIGINT"),O.kill(O.pid,n))}}}),Le.exports.signals=function(){return Ie},Ae=!1,Ft=function(){Ae||!Pe(global.process)||(Ae=!0,J.count+=1,Ie=Ie.filter(function(e){try{return O.on(e,_e[e]),!0}catch{return!1}}),O.emit=or,O.reallyExit=ar)},Le.exports.load=Ft,xt=O.reallyExit,ar=function(e){!Pe(global.process)||(O.exitCode=e||0,we("exit",O.exitCode,null),we("afterexit",O.exitCode,null),xt.call(O,O.exitCode))},$e=O.emit,or=function(e,t){if(e==="exit"&&Pe(global.process)){t!==void 0&&(O.exitCode=t);var r=$e.apply(this,arguments);return we("exit",O.exitCode,null),we("afterexit",O.exitCode,null),r}else return $e.apply(this,arguments)}):Le.exports=function(){return function(){}};var sr,Ie,ir,Me,J,Xe,we,_e,Ae,Ft,xt,ar,$e,or});var gr=G((Po,yr)=>{"use strict";var{PassThrough:oi}=require("stream");yr.exports=n=>{n={...n};let{array:e}=n,{encoding:t}=n,r=t==="buffer",s=!1;e?s=!(t||r):t=t||"utf8",r&&(t=null);let i=new oi({objectMode:s});t&&i.setEncoding(t);let a=0,o=[];return i.on("data",u=>{o.push(u),s?a=o.length:a+=u.length}),i.getBufferedValue=()=>e?o:r?Buffer.concat(o,a):o.join(""),i.getBufferedLength=()=>a,i}});var Pr=G((wo,He)=>{"use strict";var{constants:ci}=require("buffer"),li=require("stream"),{promisify:ui}=require("util"),fi=gr(),mi=ui(li.pipeline),et=class extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}};async function It(n,e){if(!n)throw new Error("Expected a stream");e={maxBuffer:1/0,...e};let{maxBuffer:t}=e,r=fi(e);return await new Promise((s,i)=>{let a=o=>{o&&r.getBufferedLength()<=ci.MAX_LENGTH&&(o.bufferedData=r.getBufferedValue()),i(o)};(async()=>{try{await mi(n,r),s()}catch(o){a(o)}})(),r.on("data",()=>{r.getBufferedLength()>t&&a(new et)})}),r.getBufferedValue()}He.exports=It;He.exports.buffer=(n,e)=>It(n,{...e,encoding:"buffer"});He.exports.array=(n,e)=>It(n,{...e,array:!0});He.exports.MaxBufferError=et});var Sr=G((So,wr)=>{"use strict";var{PassThrough:hi}=require("stream");wr.exports=function(){var n=[],e=new hi({objectMode:!0});return e.setMaxListeners(0),e.add=t,e.isEmpty=r,e.on("unpipe",s),Array.prototype.slice.call(arguments).forEach(t),e;function t(i){return Array.isArray(i)?(i.forEach(t),this):(n.push(i),i.once("end",s.bind(null,i)),i.once("error",e.emit.bind(e,"error")),i.pipe(e,{end:!1}),this)}function r(){return n.length==0}function s(i){n=n.filter(function(a){return a!==i}),!n.length&&e.readable&&e.end()}}});var ts=G(oe=>{"use strict";Object.defineProperty(oe,"__esModule",{value:!0});var Ei=require("zlib"),Hr=require("path"),qe=require("module"),ne=require("url"),Rr=require("util"),ki=require("assert"),bi=require("fs"),Ti=require("crypto"),Fi=require("os"),ct=n=>n&&typeof n=="object"&&"default"in n?n:{default:n},jr=ct(Ei),st=ct(Hr),xi=ct(ki),vi=ct(bi),Wr=(n=>(n.HARD="HARD",n.SOFT="SOFT",n))(Wr||{}),Ii=456789e3,jt={root:"/",dot:"."},it={home:"~",nodeModules:"node_modules",manifest:"package.json",lockfile:"yarn.lock",virtual:"__virtual__",pnpJs:".pnp.js",pnpCjs:".pnp.cjs",pnpData:".pnp.data.json",pnpEsmLoader:".pnp.loader.mjs",rc:".yarnrc.yml"},p=Object.create(st.default),x=Object.create(st.default.posix);p.cwd=()=>process.cwd();x.cwd=()=>Qt(process.cwd());x.resolve=(...n)=>n.length>0&&x.isAbsolute(n[0])?st.default.posix.resolve(...n):st.default.posix.resolve(x.cwd(),...n);var qr=function(n,e,t){return e=n.normalize(e),t=n.normalize(t),e===t?".":(e.endsWith(n.sep)||(e=e+n.sep),t.startsWith(e)?t.slice(e.length):null)};p.fromPortablePath=Gr;p.toPortablePath=Qt;p.contains=(n,e)=>qr(p,n,e);x.contains=(n,e)=>qr(x,n,e);var Ai=/^([a-zA-Z]:.*)$/,Li=/^\/\/(\.\/)?(.*)$/,Di=/^\/([a-zA-Z]:.*)$/,Ni=/^\/unc\/(\.dot\/)?(.*)$/;function Gr(n){if(process.platform!=="win32")return n;let e,t;if(e=n.match(Di))n=e[1];else if(t=n.match(Ni))n=`\\\\${t[1]?".\\":""}${t[2]}`;else return n;return n.replace(/\//g,"\\")}function Qt(n){if(process.platform!=="win32")return n;n=n.replace(/\\/g,"/");let e,t;return(e=n.match(Ai))?n=`/${e[1]}`:(t=n.match(Li))&&(n=`/unc/${t[1]?".dot/":""}${t[2]}`),n}function Vr(n,e){return n===p?Gr(e):Qt(e)}var ke=new Date(Ii*1e3),Ri=ke.getTime();async function Bi(n,e,t,r,s){let i=n.pathUtils.normalize(e),a=t.pathUtils.normalize(r),o=[],u=[],{atime:h,mtime:y}=s.stableTime?{atime:ke,mtime:ke}:await t.lstatPromise(a);await n.mkdirpPromise(n.pathUtils.dirname(e),{utimes:[h,y]}),await Wt(o,u,n,i,t,a,{...s,didParentExist:!0});for(let d of o)await d();await Promise.all(u.map(d=>d()))}async function Wt(n,e,t,r,s,i,a){var o,u,h;let y=a.didParentExist?await Kr(t,r):null,d=await s.lstatPromise(i),{atime:w,mtime:T}=a.stableTime?{atime:ke,mtime:ke}:d,b;switch(!0){case d.isDirectory():b=await Oi(n,e,t,r,y,s,i,d,a);break;case d.isFile():b=await Mi(n,e,t,r,y,s,i,d,a);break;case d.isSymbolicLink():b=await Hi(n,e,t,r,y,s,i,d,a);break;default:throw new Error(`Unsupported file type (${d.mode})`)}return(((o=a.linkStrategy)==null?void 0:o.type)!=="HardlinkFromIndex"||!d.isFile())&&((b||((u=y==null?void 0:y.mtime)==null?void 0:u.getTime())!==T.getTime()||((h=y==null?void 0:y.atime)==null?void 0:h.getTime())!==w.getTime())&&(e.push(()=>t.lutimesPromise(r,w,T)),b=!0),(y===null||(y.mode&511)!==(d.mode&511))&&(e.push(()=>t.chmodPromise(r,d.mode&511)),b=!0)),b}async function Kr(n,e){try{return await n.lstatPromise(e)}catch{return null}}async function Oi(n,e,t,r,s,i,a,o,u){if(s!==null&&!s.isDirectory())if(u.overwrite)n.push(async()=>t.removePromise(r)),s=null;else return!1;let h=!1;s===null&&(n.push(async()=>{try{await t.mkdirPromise(r,{mode:o.mode})}catch(w){if(w.code!=="EEXIST")throw w}}),h=!0);let y=await i.readdirPromise(a),d=u.didParentExist&&!s?{...u,didParentExist:!1}:u;if(u.stableSort)for(let w of y.sort())await Wt(n,e,t,t.pathUtils.join(r,w),i,i.pathUtils.join(a,w),d)&&(h=!0);else(await Promise.all(y.map(async T=>{await Wt(n,e,t,t.pathUtils.join(r,T),i,i.pathUtils.join(a,T),d)}))).some(T=>T)&&(h=!0);return h}async function Ui(n,e,t,r,s,i,a,o,u,h){let y=await i.checksumFilePromise(a,{algorithm:"sha1"}),d=t.pathUtils.join(h.indexPath,y.slice(0,2),`${y}.dat`),w;(D=>{D[D.Lock=0]="Lock",D[D.Rename=1]="Rename"})(w||(w={}));let T=1,b=await Kr(t,d);if(s){let D=b&&s.dev===b.dev&&s.ino===b.ino,A=(b==null?void 0:b.mtimeMs)!==Ri;if(D&&A&&h.autoRepair&&(T=0,b=null),!D)if(u.overwrite)n.push(async()=>t.removePromise(r)),s=null;else return!1}let L=!b&&T===1?`${d}.${Math.floor(Math.random()*4294967296).toString(16).padStart(8,"0")}`:null,W=!1;return n.push(async()=>{if(!b&&(T===0&&await t.lockPromise(d,async()=>{let D=await i.readFilePromise(a);await t.writeFilePromise(d,D)}),T===1&&L)){let D=await i.readFilePromise(a);await t.writeFilePromise(L,D);try{await t.linkPromise(L,d)}catch(A){if(A.code==="EEXIST")W=!0,await t.unlinkPromise(L);else throw A}}s||await t.linkPromise(d,r)}),e.push(async()=>{b||await t.lutimesPromise(d,ke,ke),L&&!W&&await t.unlinkPromise(L)}),!1}async function Ci(n,e,t,r,s,i,a,o,u){if(s!==null)if(u.overwrite)n.push(async()=>t.removePromise(r)),s=null;else return!1;return n.push(async()=>{let h=await i.readFilePromise(a);await t.writeFilePromise(r,h)}),!0}async function Mi(n,e,t,r,s,i,a,o,u){var h;return((h=u.linkStrategy)==null?void 0:h.type)==="HardlinkFromIndex"?Ui(n,e,t,r,s,i,a,o,u,u.linkStrategy):Ci(n,e,t,r,s,i,a,o,u)}async function Hi(n,e,t,r,s,i,a,o,u){if(s!==null)if(u.overwrite)n.push(async()=>t.removePromise(r)),s=null;else return!1;return n.push(async()=>{await t.symlinkPromise(Vr(t.pathUtils,await i.readlinkPromise(a)),r)}),!0}var at=class{constructor(e){this.pathUtils=e}async*genTraversePromise(e,{stableSort:t=!1}={}){let r=[e];for(;r.length>0;){let s=r.shift();if((await this.lstatPromise(s)).isDirectory()){let a=await this.readdirPromise(s);if(t)for(let o of a.sort())r.push(this.pathUtils.join(s,o));else throw new Error("Not supported")}else yield s}}async checksumFilePromise(e,{algorithm:t="sha512"}={}){let r=await this.openPromise(e,"r");try{let i=Buffer.allocUnsafeSlow(65536),a=Ti.createHash(t),o=0;for(;(o=await this.readPromise(r,i,0,65536))!==0;)a.update(o===65536?i:i.slice(0,o));return a.digest("hex")}finally{await this.closePromise(r)}}async removePromise(e,{recursive:t=!0,maxRetries:r=5}={}){let s;try{s=await this.lstatPromise(e)}catch(i){if(i.code==="ENOENT")return;throw i}if(s.isDirectory()){if(t){let i=await this.readdirPromise(e);await Promise.all(i.map(a=>this.removePromise(this.pathUtils.resolve(e,a))))}for(let i=0;i<=r;i++)try{await this.rmdirPromise(e);break}catch(a){if(a.code!=="EBUSY"&&a.code!=="ENOTEMPTY")throw a;i<r&&await new Promise(o=>setTimeout(o,i*100))}}else await this.unlinkPromise(e)}removeSync(e,{recursive:t=!0}={}){let r;try{r=this.lstatSync(e)}catch(s){if(s.code==="ENOENT")return;throw s}if(r.isDirectory()){if(t)for(let s of this.readdirSync(e))this.removeSync(this.pathUtils.resolve(e,s));this.rmdirSync(e)}else this.unlinkSync(e)}async mkdirpPromise(e,{chmod:t,utimes:r}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let s=e.split(this.pathUtils.sep),i;for(let a=2;a<=s.length;++a){let o=s.slice(0,a).join(this.pathUtils.sep);if(!this.existsSync(o)){try{await this.mkdirPromise(o)}catch(u){if(u.code==="EEXIST")continue;throw u}if(i??(i=o),t!=null&&await this.chmodPromise(o,t),r!=null)await this.utimesPromise(o,r[0],r[1]);else{let u=await this.statPromise(this.pathUtils.dirname(o));await this.utimesPromise(o,u.atime,u.mtime)}}}return i}mkdirpSync(e,{chmod:t,utimes:r}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let s=e.split(this.pathUtils.sep),i;for(let a=2;a<=s.length;++a){let o=s.slice(0,a).join(this.pathUtils.sep);if(!this.existsSync(o)){try{this.mkdirSync(o)}catch(u){if(u.code==="EEXIST")continue;throw u}if(i??(i=o),t!=null&&this.chmodSync(o,t),r!=null)this.utimesSync(o,r[0],r[1]);else{let u=this.statSync(this.pathUtils.dirname(o));this.utimesSync(o,u.atime,u.mtime)}}}return i}async copyPromise(e,t,{baseFs:r=this,overwrite:s=!0,stableSort:i=!1,stableTime:a=!1,linkStrategy:o=null}={}){return await Bi(this,e,r,t,{overwrite:s,stableSort:i,stableTime:a,linkStrategy:o})}copySync(e,t,{baseFs:r=this,overwrite:s=!0}={}){let i=r.lstatSync(t),a=this.existsSync(e);if(i.isDirectory()){this.mkdirpSync(e);let u=r.readdirSync(t);for(let h of u)this.copySync(this.pathUtils.join(e,h),r.pathUtils.join(t,h),{baseFs:r,overwrite:s})}else if(i.isFile()){if(!a||s){a&&this.removeSync(e);let u=r.readFileSync(t);this.writeFileSync(e,u)}}else if(i.isSymbolicLink()){if(!a||s){a&&this.removeSync(e);let u=r.readlinkSync(t);this.symlinkSync(Vr(this.pathUtils,u),e)}}else throw new Error(`Unsupported file type (file: ${t}, mode: 0o${i.mode.toString(8).padStart(6,"0")})`);let o=i.mode&511;this.chmodSync(e,o)}async changeFilePromise(e,t,r={}){return Buffer.isBuffer(t)?this.changeFileBufferPromise(e,t,r):this.changeFileTextPromise(e,t,r)}async changeFileBufferPromise(e,t,{mode:r}={}){let s=Buffer.alloc(0);try{s=await this.readFilePromise(e)}catch{}Buffer.compare(s,t)!==0&&await this.writeFilePromise(e,t,{mode:r})}async changeFileTextPromise(e,t,{automaticNewlines:r,mode:s}={}){let i="";try{i=await this.readFilePromise(e,"utf8")}catch{}let a=r?Br(i,t):t;i!==a&&await this.writeFilePromise(e,a,{mode:s})}changeFileSync(e,t,r={}){return Buffer.isBuffer(t)?this.changeFileBufferSync(e,t,r):this.changeFileTextSync(e,t,r)}changeFileBufferSync(e,t,{mode:r}={}){let s=Buffer.alloc(0);try{s=this.readFileSync(e)}catch{}Buffer.compare(s,t)!==0&&this.writeFileSync(e,t,{mode:r})}changeFileTextSync(e,t,{automaticNewlines:r=!1,mode:s}={}){let i="";try{i=this.readFileSync(e,"utf8")}catch{}let a=r?Br(i,t):t;i!==a&&this.writeFileSync(e,a,{mode:s})}async movePromise(e,t){try{await this.renamePromise(e,t)}catch(r){if(r.code==="EXDEV")await this.copyPromise(t,e),await this.removePromise(e);else throw r}}moveSync(e,t){try{this.renameSync(e,t)}catch(r){if(r.code==="EXDEV")this.copySync(t,e),this.removeSync(e);else throw r}}async lockPromise(e,t){let r=`${e}.flock`,s=1e3/60,i=Date.now(),a=null,o=async()=>{let u;try{[u]=await this.readJsonPromise(r)}catch{return Date.now()-i<500}try{return process.kill(u,0),!0}catch{return!1}};for(;a===null;)try{a=await this.openPromise(r,"wx")}catch(u){if(u.code==="EEXIST"){if(!await o())try{await this.unlinkPromise(r);continue}catch{}if(Date.now()-i<60*1e3)await new Promise(h=>setTimeout(h,s));else throw new Error(`Couldn't acquire a lock in a reasonable time (via ${r})`)}else throw u}await this.writePromise(a,JSON.stringify([process.pid]));try{return await t()}finally{try{await this.closePromise(a),await this.unlinkPromise(r)}catch{}}}async readJsonPromise(e){let t=await this.readFilePromise(e,"utf8");try{return JSON.parse(t)}catch(r){throw r.message+=` (in ${e})`,r}}readJsonSync(e){let t=this.readFileSync(e,"utf8");try{return JSON.parse(t)}catch(r){throw r.message+=` (in ${e})`,r}}async writeJsonPromise(e,t){return await this.writeFilePromise(e,`${JSON.stringify(t,null,2)}
`)}writeJsonSync(e,t){return this.writeFileSync(e,`${JSON.stringify(t,null,2)}
`)}async preserveTimePromise(e,t){let r=await this.lstatPromise(e),s=await t();typeof s<"u"&&(e=s),await this.lutimesPromise(e,r.atime,r.mtime)}async preserveTimeSync(e,t){let r=this.lstatSync(e),s=t();typeof s<"u"&&(e=s),this.lutimesSync(e,r.atime,r.mtime)}},qt=class extends at{constructor(){super(x)}};function ji(n){let e=n.match(/\r?\n/g);if(e===null)return Fi.EOL;let t=e.filter(s=>s===`\r
`).length,r=e.length-t;return t>r?`\r
`:`
`}function Br(n,e){return e.replace(/\r?\n/g,ji(n))}var Gt=class extends at{getExtractHint(e){return this.baseFs.getExtractHint(e)}resolve(e){return this.mapFromBase(this.baseFs.resolve(this.mapToBase(e)))}getRealPath(){return this.mapFromBase(this.baseFs.getRealPath())}async openPromise(e,t,r){return this.baseFs.openPromise(this.mapToBase(e),t,r)}openSync(e,t,r){return this.baseFs.openSync(this.mapToBase(e),t,r)}async opendirPromise(e,t){return Object.assign(await this.baseFs.opendirPromise(this.mapToBase(e),t),{path:e})}opendirSync(e,t){return Object.assign(this.baseFs.opendirSync(this.mapToBase(e),t),{path:e})}async readPromise(e,t,r,s,i){return await this.baseFs.readPromise(e,t,r,s,i)}readSync(e,t,r,s,i){return this.baseFs.readSync(e,t,r,s,i)}async writePromise(e,t,r,s,i){return typeof t=="string"?await this.baseFs.writePromise(e,t,r):await this.baseFs.writePromise(e,t,r,s,i)}writeSync(e,t,r,s,i){return typeof t=="string"?this.baseFs.writeSync(e,t,r):this.baseFs.writeSync(e,t,r,s,i)}async closePromise(e){return this.baseFs.closePromise(e)}closeSync(e){this.baseFs.closeSync(e)}createReadStream(e,t){return this.baseFs.createReadStream(e!==null?this.mapToBase(e):e,t)}createWriteStream(e,t){return this.baseFs.createWriteStream(e!==null?this.mapToBase(e):e,t)}async realpathPromise(e){return this.mapFromBase(await this.baseFs.realpathPromise(this.mapToBase(e)))}realpathSync(e){return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(e)))}async existsPromise(e){return this.baseFs.existsPromise(this.mapToBase(e))}existsSync(e){return this.baseFs.existsSync(this.mapToBase(e))}accessSync(e,t){return this.baseFs.accessSync(this.mapToBase(e),t)}async accessPromise(e,t){return this.baseFs.accessPromise(this.mapToBase(e),t)}async statPromise(e,t){return this.baseFs.statPromise(this.mapToBase(e),t)}statSync(e,t){return this.baseFs.statSync(this.mapToBase(e),t)}async fstatPromise(e,t){return this.baseFs.fstatPromise(e,t)}fstatSync(e,t){return this.baseFs.fstatSync(e,t)}lstatPromise(e,t){return this.baseFs.lstatPromise(this.mapToBase(e),t)}lstatSync(e,t){return this.baseFs.lstatSync(this.mapToBase(e),t)}async fchmodPromise(e,t){return this.baseFs.fchmodPromise(e,t)}fchmodSync(e,t){return this.baseFs.fchmodSync(e,t)}async chmodPromise(e,t){return this.baseFs.chmodPromise(this.mapToBase(e),t)}chmodSync(e,t){return this.baseFs.chmodSync(this.mapToBase(e),t)}async fchownPromise(e,t,r){return this.baseFs.fchownPromise(e,t,r)}fchownSync(e,t,r){return this.baseFs.fchownSync(e,t,r)}async chownPromise(e,t,r){return this.baseFs.chownPromise(this.mapToBase(e),t,r)}chownSync(e,t,r){return this.baseFs.chownSync(this.mapToBase(e),t,r)}async renamePromise(e,t){return this.baseFs.renamePromise(this.mapToBase(e),this.mapToBase(t))}renameSync(e,t){return this.baseFs.renameSync(this.mapToBase(e),this.mapToBase(t))}async copyFilePromise(e,t,r=0){return this.baseFs.copyFilePromise(this.mapToBase(e),this.mapToBase(t),r)}copyFileSync(e,t,r=0){return this.baseFs.copyFileSync(this.mapToBase(e),this.mapToBase(t),r)}async appendFilePromise(e,t,r){return this.baseFs.appendFilePromise(this.fsMapToBase(e),t,r)}appendFileSync(e,t,r){return this.baseFs.appendFileSync(this.fsMapToBase(e),t,r)}async writeFilePromise(e,t,r){return this.baseFs.writeFilePromise(this.fsMapToBase(e),t,r)}writeFileSync(e,t,r){return this.baseFs.writeFileSync(this.fsMapToBase(e),t,r)}async unlinkPromise(e){return this.baseFs.unlinkPromise(this.mapToBase(e))}unlinkSync(e){return this.baseFs.unlinkSync(this.mapToBase(e))}async utimesPromise(e,t,r){return this.baseFs.utimesPromise(this.mapToBase(e),t,r)}utimesSync(e,t,r){return this.baseFs.utimesSync(this.mapToBase(e),t,r)}async lutimesPromise(e,t,r){return this.baseFs.lutimesPromise(this.mapToBase(e),t,r)}lutimesSync(e,t,r){return this.baseFs.lutimesSync(this.mapToBase(e),t,r)}async mkdirPromise(e,t){return this.baseFs.mkdirPromise(this.mapToBase(e),t)}mkdirSync(e,t){return this.baseFs.mkdirSync(this.mapToBase(e),t)}async rmdirPromise(e,t){return this.baseFs.rmdirPromise(this.mapToBase(e),t)}rmdirSync(e,t){return this.baseFs.rmdirSync(this.mapToBase(e),t)}async linkPromise(e,t){return this.baseFs.linkPromise(this.mapToBase(e),this.mapToBase(t))}linkSync(e,t){return this.baseFs.linkSync(this.mapToBase(e),this.mapToBase(t))}async symlinkPromise(e,t,r){let s=this.mapToBase(t);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkPromise(this.mapToBase(e),s,r);let i=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(t),e)),a=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(s),i);return this.baseFs.symlinkPromise(a,s,r)}symlinkSync(e,t,r){let s=this.mapToBase(t);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkSync(this.mapToBase(e),s,r);let i=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(t),e)),a=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(s),i);return this.baseFs.symlinkSync(a,s,r)}async readFilePromise(e,t){return this.baseFs.readFilePromise(this.fsMapToBase(e),t)}readFileSync(e,t){return this.baseFs.readFileSync(this.fsMapToBase(e),t)}async readdirPromise(e,t){return this.baseFs.readdirPromise(this.mapToBase(e),t)}readdirSync(e,t){return this.baseFs.readdirSync(this.mapToBase(e),t)}async readlinkPromise(e){return this.mapFromBase(await this.baseFs.readlinkPromise(this.mapToBase(e)))}readlinkSync(e){return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(e)))}async truncatePromise(e,t){return this.baseFs.truncatePromise(this.mapToBase(e),t)}truncateSync(e,t){return this.baseFs.truncateSync(this.mapToBase(e),t)}async ftruncatePromise(e,t){return this.baseFs.ftruncatePromise(e,t)}ftruncateSync(e,t){return this.baseFs.ftruncateSync(e,t)}watch(e,t,r){return this.baseFs.watch(this.mapToBase(e),t,r)}watchFile(e,t,r){return this.baseFs.watchFile(this.mapToBase(e),t,r)}unwatchFile(e,t){return this.baseFs.unwatchFile(this.mapToBase(e),t)}fsMapToBase(e){return typeof e=="number"?e:this.mapToBase(e)}},Vt=class extends qt{constructor(e=vi.default){super(),this.realFs=e}getExtractHint(){return!1}getRealPath(){return jt.root}resolve(e){return x.resolve(e)}async openPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.open(p.fromPortablePath(e),t,r,this.makeCallback(s,i))})}openSync(e,t,r){return this.realFs.openSync(p.fromPortablePath(e),t,r)}async opendirPromise(e,t){return await new Promise((r,s)=>{typeof t<"u"?this.realFs.opendir(p.fromPortablePath(e),t,this.makeCallback(r,s)):this.realFs.opendir(p.fromPortablePath(e),this.makeCallback(r,s))}).then(r=>Object.defineProperty(r,"path",{value:e,configurable:!0,writable:!0}))}opendirSync(e,t){let r=typeof t<"u"?this.realFs.opendirSync(p.fromPortablePath(e),t):this.realFs.opendirSync(p.fromPortablePath(e));return Object.defineProperty(r,"path",{value:e,configurable:!0,writable:!0})}async readPromise(e,t,r=0,s=0,i=-1){return await new Promise((a,o)=>{this.realFs.read(e,t,r,s,i,(u,h)=>{u?o(u):a(h)})})}readSync(e,t,r,s,i){return this.realFs.readSync(e,t,r,s,i)}async writePromise(e,t,r,s,i){return await new Promise((a,o)=>typeof t=="string"?this.realFs.write(e,t,r,this.makeCallback(a,o)):this.realFs.write(e,t,r,s,i,this.makeCallback(a,o)))}writeSync(e,t,r,s,i){return typeof t=="string"?this.realFs.writeSync(e,t,r):this.realFs.writeSync(e,t,r,s,i)}async closePromise(e){await new Promise((t,r)=>{this.realFs.close(e,this.makeCallback(t,r))})}closeSync(e){this.realFs.closeSync(e)}createReadStream(e,t){let r=e!==null?p.fromPortablePath(e):e;return this.realFs.createReadStream(r,t)}createWriteStream(e,t){let r=e!==null?p.fromPortablePath(e):e;return this.realFs.createWriteStream(r,t)}async realpathPromise(e){return await new Promise((t,r)=>{this.realFs.realpath(p.fromPortablePath(e),{},this.makeCallback(t,r))}).then(t=>p.toPortablePath(t))}realpathSync(e){return p.toPortablePath(this.realFs.realpathSync(p.fromPortablePath(e),{}))}async existsPromise(e){return await new Promise(t=>{this.realFs.exists(p.fromPortablePath(e),t)})}accessSync(e,t){return this.realFs.accessSync(p.fromPortablePath(e),t)}async accessPromise(e,t){return await new Promise((r,s)=>{this.realFs.access(p.fromPortablePath(e),t,this.makeCallback(r,s))})}existsSync(e){return this.realFs.existsSync(p.fromPortablePath(e))}async statPromise(e,t){return await new Promise((r,s)=>{t?this.realFs.stat(p.fromPortablePath(e),t,this.makeCallback(r,s)):this.realFs.stat(p.fromPortablePath(e),this.makeCallback(r,s))})}statSync(e,t){return t?this.realFs.statSync(p.fromPortablePath(e),t):this.realFs.statSync(p.fromPortablePath(e))}async fstatPromise(e,t){return await new Promise((r,s)=>{t?this.realFs.fstat(e,t,this.makeCallback(r,s)):this.realFs.fstat(e,this.makeCallback(r,s))})}fstatSync(e,t){return t?this.realFs.fstatSync(e,t):this.realFs.fstatSync(e)}async lstatPromise(e,t){return await new Promise((r,s)=>{t?this.realFs.lstat(p.fromPortablePath(e),t,this.makeCallback(r,s)):this.realFs.lstat(p.fromPortablePath(e),this.makeCallback(r,s))})}lstatSync(e,t){return t?this.realFs.lstatSync(p.fromPortablePath(e),t):this.realFs.lstatSync(p.fromPortablePath(e))}async fchmodPromise(e,t){return await new Promise((r,s)=>{this.realFs.fchmod(e,t,this.makeCallback(r,s))})}fchmodSync(e,t){return this.realFs.fchmodSync(e,t)}async chmodPromise(e,t){return await new Promise((r,s)=>{this.realFs.chmod(p.fromPortablePath(e),t,this.makeCallback(r,s))})}chmodSync(e,t){return this.realFs.chmodSync(p.fromPortablePath(e),t)}async fchownPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.fchown(e,t,r,this.makeCallback(s,i))})}fchownSync(e,t,r){return this.realFs.fchownSync(e,t,r)}async chownPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.chown(p.fromPortablePath(e),t,r,this.makeCallback(s,i))})}chownSync(e,t,r){return this.realFs.chownSync(p.fromPortablePath(e),t,r)}async renamePromise(e,t){return await new Promise((r,s)=>{this.realFs.rename(p.fromPortablePath(e),p.fromPortablePath(t),this.makeCallback(r,s))})}renameSync(e,t){return this.realFs.renameSync(p.fromPortablePath(e),p.fromPortablePath(t))}async copyFilePromise(e,t,r=0){return await new Promise((s,i)=>{this.realFs.copyFile(p.fromPortablePath(e),p.fromPortablePath(t),r,this.makeCallback(s,i))})}copyFileSync(e,t,r=0){return this.realFs.copyFileSync(p.fromPortablePath(e),p.fromPortablePath(t),r)}async appendFilePromise(e,t,r){return await new Promise((s,i)=>{let a=typeof e=="string"?p.fromPortablePath(e):e;r?this.realFs.appendFile(a,t,r,this.makeCallback(s,i)):this.realFs.appendFile(a,t,this.makeCallback(s,i))})}appendFileSync(e,t,r){let s=typeof e=="string"?p.fromPortablePath(e):e;r?this.realFs.appendFileSync(s,t,r):this.realFs.appendFileSync(s,t)}async writeFilePromise(e,t,r){return await new Promise((s,i)=>{let a=typeof e=="string"?p.fromPortablePath(e):e;r?this.realFs.writeFile(a,t,r,this.makeCallback(s,i)):this.realFs.writeFile(a,t,this.makeCallback(s,i))})}writeFileSync(e,t,r){let s=typeof e=="string"?p.fromPortablePath(e):e;r?this.realFs.writeFileSync(s,t,r):this.realFs.writeFileSync(s,t)}async unlinkPromise(e){return await new Promise((t,r)=>{this.realFs.unlink(p.fromPortablePath(e),this.makeCallback(t,r))})}unlinkSync(e){return this.realFs.unlinkSync(p.fromPortablePath(e))}async utimesPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.utimes(p.fromPortablePath(e),t,r,this.makeCallback(s,i))})}utimesSync(e,t,r){this.realFs.utimesSync(p.fromPortablePath(e),t,r)}async lutimesPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.lutimes(p.fromPortablePath(e),t,r,this.makeCallback(s,i))})}lutimesSync(e,t,r){this.realFs.lutimesSync(p.fromPortablePath(e),t,r)}async mkdirPromise(e,t){return await new Promise((r,s)=>{this.realFs.mkdir(p.fromPortablePath(e),t,this.makeCallback(r,s))})}mkdirSync(e,t){return this.realFs.mkdirSync(p.fromPortablePath(e),t)}async rmdirPromise(e,t){return await new Promise((r,s)=>{t?this.realFs.rmdir(p.fromPortablePath(e),t,this.makeCallback(r,s)):this.realFs.rmdir(p.fromPortablePath(e),this.makeCallback(r,s))})}rmdirSync(e,t){return this.realFs.rmdirSync(p.fromPortablePath(e),t)}async linkPromise(e,t){return await new Promise((r,s)=>{this.realFs.link(p.fromPortablePath(e),p.fromPortablePath(t),this.makeCallback(r,s))})}linkSync(e,t){return this.realFs.linkSync(p.fromPortablePath(e),p.fromPortablePath(t))}async symlinkPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.symlink(p.fromPortablePath(e.replace(/\/+$/,"")),p.fromPortablePath(t),r,this.makeCallback(s,i))})}symlinkSync(e,t,r){return this.realFs.symlinkSync(p.fromPortablePath(e.replace(/\/+$/,"")),p.fromPortablePath(t),r)}async readFilePromise(e,t){return await new Promise((r,s)=>{let i=typeof e=="string"?p.fromPortablePath(e):e;this.realFs.readFile(i,t,this.makeCallback(r,s))})}readFileSync(e,t){let r=typeof e=="string"?p.fromPortablePath(e):e;return this.realFs.readFileSync(r,t)}async readdirPromise(e,t){return await new Promise((r,s)=>{t!=null&&t.withFileTypes?this.realFs.readdir(p.fromPortablePath(e),{withFileTypes:!0},this.makeCallback(r,s)):this.realFs.readdir(p.fromPortablePath(e),this.makeCallback(i=>r(i),s))})}readdirSync(e,t){return t!=null&&t.withFileTypes?this.realFs.readdirSync(p.fromPortablePath(e),{withFileTypes:!0}):this.realFs.readdirSync(p.fromPortablePath(e))}async readlinkPromise(e){return await new Promise((t,r)=>{this.realFs.readlink(p.fromPortablePath(e),this.makeCallback(t,r))}).then(t=>p.toPortablePath(t))}readlinkSync(e){return p.toPortablePath(this.realFs.readlinkSync(p.fromPortablePath(e)))}async truncatePromise(e,t){return await new Promise((r,s)=>{this.realFs.truncate(p.fromPortablePath(e),t,this.makeCallback(r,s))})}truncateSync(e,t){return this.realFs.truncateSync(p.fromPortablePath(e),t)}async ftruncatePromise(e,t){return await new Promise((r,s)=>{this.realFs.ftruncate(e,t,this.makeCallback(r,s))})}ftruncateSync(e,t){return this.realFs.ftruncateSync(e,t)}watch(e,t,r){return this.realFs.watch(p.fromPortablePath(e),t,r)}watchFile(e,t,r){return this.realFs.watchFile(p.fromPortablePath(e),t,r)}unwatchFile(e,t){return this.realFs.unwatchFile(p.fromPortablePath(e),t)}makeCallback(e,t){return(r,s)=>{r?t(r):e(s)}}},Wi=/^[0-9]+$/,Ut=/^(\/(?:[^/]+\/)*?(?:\$\$virtual|__virtual__))((?:\/((?:[^/]+-)?[a-f0-9]+)(?:\/([^/]+))?)?((?:\/.*)?))$/,qi=/^([^/]+-)?[a-f0-9]+$/,ue=class extends Gt{constructor({baseFs:e=new Vt}={}){super(x),this.baseFs=e}static makeVirtualPath(e,t,r){if(x.basename(e)!=="__virtual__")throw new Error('Assertion failed: Virtual folders must be named "__virtual__"');if(!x.basename(t).match(qi))throw new Error("Assertion failed: Virtual components must be ended by an hexadecimal hash");let i=x.relative(x.dirname(e),r).split("/"),a=0;for(;a<i.length&&i[a]==="..";)a+=1;let o=i.slice(a);return x.join(e,t,String(a),...o)}static resolveVirtual(e){let t=e.match(Ut);if(!t||!t[3]&&t[5])return e;let r=x.dirname(t[1]);if(!t[3]||!t[4])return r;if(!Wi.test(t[4]))return e;let i=Number(t[4]),a="../".repeat(i),o=t[5]||".";return ue.resolveVirtual(x.join(r,a,o))}getExtractHint(e){return this.baseFs.getExtractHint(e)}getRealPath(){return this.baseFs.getRealPath()}realpathSync(e){let t=e.match(Ut);if(!t)return this.baseFs.realpathSync(e);if(!t[5])return e;let r=this.baseFs.realpathSync(this.mapToBase(e));return ue.makeVirtualPath(t[1],t[3],r)}async realpathPromise(e){let t=e.match(Ut);if(!t)return await this.baseFs.realpathPromise(e);if(!t[5])return e;let r=await this.baseFs.realpathPromise(this.mapToBase(e));return ue.makeVirtualPath(t[1],t[3],r)}mapToBase(e){if(e==="")return e;if(this.pathUtils.isAbsolute(e))return ue.resolveVirtual(e);let t=ue.resolveVirtual(this.baseFs.resolve(jt.dot)),r=ue.resolveVirtual(this.baseFs.resolve(e));return x.relative(t,r)||jt.dot}mapFromBase(e){return e}},Yr={DEFAULT:{collapsed:!1,next:{["*"]:"DEFAULT"}},TOP_LEVEL:{collapsed:!1,next:{fallbackExclusionList:"FALLBACK_EXCLUSION_LIST",packageRegistryData:"PACKAGE_REGISTRY_DATA",["*"]:"DEFAULT"}},FALLBACK_EXCLUSION_LIST:{collapsed:!1,next:{["*"]:"FALLBACK_EXCLUSION_ENTRIES"}},FALLBACK_EXCLUSION_ENTRIES:{collapsed:!0,next:{["*"]:"FALLBACK_EXCLUSION_DATA"}},FALLBACK_EXCLUSION_DATA:{collapsed:!0,next:{["*"]:"DEFAULT"}},PACKAGE_REGISTRY_DATA:{collapsed:!1,next:{["*"]:"PACKAGE_REGISTRY_ENTRIES"}},PACKAGE_REGISTRY_ENTRIES:{collapsed:!0,next:{["*"]:"PACKAGE_STORE_DATA"}},PACKAGE_STORE_DATA:{collapsed:!1,next:{["*"]:"PACKAGE_STORE_ENTRIES"}},PACKAGE_STORE_ENTRIES:{collapsed:!0,next:{["*"]:"PACKAGE_INFORMATION_DATA"}},PACKAGE_INFORMATION_DATA:{collapsed:!1,next:{packageDependencies:"PACKAGE_DEPENDENCIES",["*"]:"DEFAULT"}},PACKAGE_DEPENDENCIES:{collapsed:!1,next:{["*"]:"PACKAGE_DEPENDENCY"}},PACKAGE_DEPENDENCY:{collapsed:!0,next:{["*"]:"DEFAULT"}}};function Gi(n,e,t){let r="";r+="[";for(let s=0,i=n.length;s<i;++s)r+=lt(String(s),n[s],e,t).replace(/^ +/g,""),s+1<i&&(r+=", ");return r+="]",r}function Vi(n,e,t){let r=`${t}  `,s="";s+=t,s+=`[
`;for(let i=0,a=n.length;i<a;++i)s+=r+lt(String(i),n[i],e,r).replace(/^ +/,""),i+1<a&&(s+=","),s+=`
`;return s+=t,s+="]",s}function Ki(n,e,t){let r=Object.keys(n),s="";s+="{";for(let i=0,a=r.length,o=0;i<a;++i){let u=r[i],h=n[u];typeof h>"u"||(o!==0&&(s+=", "),s+=JSON.stringify(u),s+=": ",s+=lt(u,h,e,t).replace(/^ +/g,""),o+=1)}return s+="}",s}function Yi(n,e,t){let r=Object.keys(n),s=`${t}  `,i="";i+=t,i+=`{
`;let a=0;for(let o=0,u=r.length;o<u;++o){let h=r[o],y=n[h];typeof y>"u"||(a!==0&&(i+=",",i+=`
`),i+=s,i+=JSON.stringify(h),i+=": ",i+=lt(h,y,e,s).replace(/^ +/g,""),a+=1)}return a!==0&&(i+=`
`),i+=t,i+="}",i}function lt(n,e,t,r){let{next:s}=Yr[t],i=s[n]||s["*"];return Jr(e,i,r)}function Jr(n,e,t){let{collapsed:r}=Yr[e];return Array.isArray(n)?r?Gi(n,e,t):Vi(n,e,t):typeof n=="object"&&n!==null?r?Ki(n,e,t):Yi(n,e,t):JSON.stringify(n)}function Qr(n){return Jr(n,"TOP_LEVEL","")}function Ve(n,e){let t=Array.from(n);Array.isArray(e)||(e=[e]);let r=[];for(let i of e)r.push(t.map(a=>i(a)));let s=t.map((i,a)=>a);return s.sort((i,a)=>{for(let o of r){let u=o[i]<o[a]?-1:o[i]>o[a]?1:0;if(u!==0)return u}return 0}),s.map(i=>t[i])}function Ji(n){let e=new Map,t=Ve(n.fallbackExclusionList||[],[({name:r,reference:s})=>r,({name:r,reference:s})=>s]);for(let{name:r,reference:s}of t){let i=e.get(r);typeof i>"u"&&e.set(r,i=new Set),i.add(s)}return Array.from(e).map(([r,s])=>[r,Array.from(s)])}function Qi(n){return Ve(n.fallbackPool||[],([e])=>e)}function Zi(n){let e=[];for(let[t,r]of Ve(n.packageRegistry,([s])=>s===null?"0":`1${s}`)){let s=[];e.push([t,s]);for(let[i,{packageLocation:a,packageDependencies:o,packagePeers:u,linkType:h,discardFromLookup:y}]of Ve(r,([d])=>d===null?"0":`1${d}`)){let d=[];t!==null&&i!==null&&!o.has(t)&&d.push([t,i]);for(let[b,L]of Ve(o.entries(),([W])=>W))d.push([b,L]);let w=u&&u.size>0?Array.from(u):void 0,T=y||void 0;s.push([i,{packageLocation:a,packageDependencies:d,packagePeers:w,linkType:h,discardFromLookup:T}])}}return e}function Zt(n){return{__info:["This file is automatically generated. Do not touch it, or risk","your modifications being lost."],dependencyTreeRoots:n.dependencyTreeRoots,enableTopLevelFallback:n.enableTopLevelFallback||!1,ignorePatternData:n.ignorePattern||null,fallbackExclusionList:Ji(n),fallbackPool:Qi(n),packageRegistryData:Zi(n)}}var Ct,zi=()=>(typeof Ct>"u"&&(Ct=jr.default.brotliDecompressSync(Buffer.from("","base64")).toString()),Ct);function zt(n,e){return[n?`${n}
`:"",`/* eslint-disable */
`,`"use strict";
`,`
`,e,`
`,zi()].join("")}function Xi(n){return JSON.stringify(n,null,2)}function _i(n){return`'${n.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/\n/g,`\\
`)}'`}function $i(n){return[`const RAW_RUNTIME_STATE =
`,`${_i(Qr(n))};

`,`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(JSON.parse(RAW_RUNTIME_STATE), {basePath: basePath || __dirname});
`,`}
`].join("")}function ea(){return[`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(require(${JSON.stringify(`./${it.pnpData}`)}), {basePath: basePath || __dirname});
`,`}
`].join("")}function ta(n){let e=Zt(n),t=$i(e);return zt(n.shebang,t)}function na(n){let e=Zt(n),t=ea(),r=zt(n.shebang,t);return{dataFile:Xi(e),loaderFile:r}}function Zr(n,{basePath:e}){let t=p.toPortablePath(e),r=x.resolve(t),s=n.ignorePatternData!==null?new RegExp(n.ignorePatternData):null,i=new Map,a=new Map(n.packageRegistryData.map(([d,w])=>[d,new Map(w.map(([T,b])=>{if(d===null!=(T===null))throw new Error("Assertion failed: The name and reference should be null, or neither should");let L=b.discardFromLookup??!1,W={name:d,reference:T},D=i.get(b.packageLocation);D?(D.discardFromLookup=D.discardFromLookup&&L,L||(D.locator=W)):i.set(b.packageLocation,{locator:W,discardFromLookup:L});let A=null;return[T,{packageDependencies:new Map(b.packageDependencies),packagePeers:new Set(b.packagePeers),linkType:b.linkType,discardFromLookup:L,get packageLocation(){return A||(b.packageLocation.match("^/nix/store/")?A=b.packageLocation:A=x.join(r,b.packageLocation))}}]}))])),o=new Map(n.fallbackExclusionList.map(([d,w])=>[d,new Set(w)])),u=new Map(n.fallbackPool),h=n.dependencyTreeRoots,y=n.enableTopLevelFallback;return{basePath:t,dependencyTreeRoots:h,enableTopLevelFallback:y,fallbackExclusionList:o,fallbackPool:u,ignorePattern:s,packageLocatorsByLocations:i,packageRegistry:a}}function De(n,e){if(typeof n=="string")return n;if(n){let t,r;if(Array.isArray(n)){for(t=0;t<n.length;t++)if(r=De(n[t],e))return r}else for(t in n)if(e.has(t))return De(n[t],e)}}function Se(n,e,t){throw new Error(t?`No known conditions for "${e}" entry in "${n}" package`:`Missing "${e}" export in "${n}" package`)}function ra(n,e){return e===n?".":e[0]==="."?e:e.replace(new RegExp("^"+n+"/"),"./")}function sa(n,e=".",t={}){let{name:r,exports:s}=n;if(s){let{browser:i,require:a,unsafe:o,conditions:u=[]}=t,h=ra(r,e);if(h[0]!=="."&&(h="./"+h),typeof s=="string")return h==="."?s:Se(r,h);let y=new Set(["default",...u]);o||y.add(a?"require":"import"),o||y.add(i?"browser":"node");let d,w,T=!1;for(d in s){T=d[0]!==".";break}if(T)return h==="."?De(s,y)||Se(r,h,1):Se(r,h);if(w=s[h])return De(w,y)||Se(r,h,1);for(d in s){if(w=d[d.length-1],w==="/"&&h.startsWith(d))return(w=De(s[d],y))?w+h.substring(d.length):Se(r,h,1);if(w==="*"&&h.startsWith(d.slice(0,-1))&&h.substring(d.length-1).length>0)return(w=De(s[d],y))?w.replace("*",h.substring(d.length-1)):Se(r,h,1)}return Se(r,h)}}var ia=Array.isArray,Kt=JSON.stringify,zr=Object.getOwnPropertyNames,Xt=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),Or=(n,e)=>RegExp.prototype.exec.call(n,e),Ur=(n,...e)=>RegExp.prototype[Symbol.replace].apply(n,e),Yt=(n,...e)=>String.prototype.endsWith.apply(n,e),aa=(n,...e)=>String.prototype.includes.apply(n,e),oa=(n,...e)=>String.prototype.lastIndexOf.apply(n,e),Jt=(n,...e)=>String.prototype.indexOf.apply(n,e),ca=(n,...e)=>String.prototype.replace.apply(n,e),nt=(n,...e)=>String.prototype.slice.apply(n,e),Ee=(n,...e)=>String.prototype.startsWith.apply(n,e),la=Map,ua=JSON.parse;function ut(n,e,t){return class extends t{constructor(...r){super(e(...r)),this.code=n,this.name=`${t.name} [${n}]`}}}var fa=ut("ERR_PACKAGE_IMPORT_NOT_DEFINED",(n,e,t)=>`Package import specifier "${n}" is not defined${e?` in package ${e}package.json`:""} imported from ${t}`,TypeError),Xr=ut("ERR_INVALID_MODULE_SPECIFIER",(n,e,t=void 0)=>`Invalid module "${n}" ${e}${t?` imported from ${t}`:""}`,TypeError),ma=ut("ERR_INVALID_PACKAGE_TARGET",(n,e,t,r=!1,s=void 0)=>{let i=typeof t=="string"&&!r&&t.length&&!Ee(t,"./");return e==="."?(xi.default(r===!1),`Invalid "exports" main target ${Kt(t)} defined in the package config ${n}package.json${s?` imported from ${s}`:""}${i?'; targets must start with "./"':""}`):`Invalid "${r?"imports":"exports"}" target ${Kt(t)} defined for '${e}' in the package config ${n}package.json${s?` imported from ${s}`:""}${i?'; targets must start with "./"':""}`},Error),_r=ut("ERR_INVALID_PACKAGE_CONFIG",(n,e,t)=>`Invalid package config ${n}${e?` while importing ${e}`:""}${t?`. ${t}`:""}`,Error);function ha(n,e){let t=Object.create(null);for(let r=0;r<e.length;r++){let s=e[r];Xt(n,s)&&(t[s]=n[s])}return t}var rt=new la;function pa(n,e,t,r){let s=rt.get(n);if(s!==void 0)return s;let i=r(n);if(i===void 0){let T={pjsonPath:n,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return rt.set(n,T),T}let a;try{a=ua(i)}catch(T){throw new _r(n,(t?`"${e}" from `:"")+ne.fileURLToPath(t||e),T.message)}let{imports:o,main:u,name:h,type:y}=ha(a,["imports","main","name","type"]),d=Xt(a,"exports")?a.exports:void 0;(typeof o!="object"||o===null)&&(o=void 0),typeof u!="string"&&(u=void 0),typeof h!="string"&&(h=void 0),y!=="module"&&y!=="commonjs"&&(y="none");let w={pjsonPath:n,exists:!0,main:u,name:h,type:y,exports:d,imports:o};return rt.set(n,w),w}function da(n,e){let t=new URL("./package.json",n);for(;;){let i=t.pathname;if(Yt(i,"node_modules/package.json"))break;let a=pa(ne.fileURLToPath(t),n,void 0,e);if(a.exists)return a;let o=t;if(t=new URL("../package.json",t),t.pathname===o.pathname)break}let r=ne.fileURLToPath(t),s={pjsonPath:r,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return rt.set(r,s),s}function ya(n,e,t){throw new fa(n,e&&ne.fileURLToPath(new URL(".",e)),ne.fileURLToPath(t))}function ga(n,e,t,r){let s=`request is not a valid subpath for the "${t?"imports":"exports"}" resolution of ${ne.fileURLToPath(e)}`;throw new Xr(n,s,r&&ne.fileURLToPath(r))}function Ge(n,e,t,r,s){throw typeof e=="object"&&e!==null?e=Kt(e,null,""):e=`${e}`,new ma(ne.fileURLToPath(new URL(".",t)),n,e,r,s&&ne.fileURLToPath(s))}var Cr=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,Mr=/\*/g;function Pa(n,e,t,r,s,i,a,o){if(e!==""&&!i&&n[n.length-1]!=="/"&&Ge(t,n,r,a,s),!Ee(n,"./")){if(a&&!Ee(n,"../")&&!Ee(n,"/")){let d=!1;try{new URL(n),d=!0}catch{}if(!d)return i?Ur(Mr,n,()=>e):n+e}Ge(t,n,r,a,s)}Or(Cr,nt(n,2))!==null&&Ge(t,n,r,a,s);let u=new URL(n,r),h=u.pathname,y=new URL(".",r).pathname;if(Ee(h,y)||Ge(t,n,r,a,s),e==="")return u;if(Or(Cr,e)!==null){let d=i?ca(t,"*",()=>e):t+e;ga(d,r,a,s)}return i?new URL(Ur(Mr,u.href,()=>e)):new URL(e,u)}function wa(n){let e=+n;return`${e}`!==n?!1:e>=0&&e<4294967295}function ot(n,e,t,r,s,i,a,o){if(typeof e=="string")return Pa(e,t,r,n,s,i,a);if(ia(e)){if(e.length===0)return null;let u;for(let h=0;h<e.length;h++){let y=e[h],d;try{d=ot(n,y,t,r,s,i,a,o)}catch(w){if(u=w,w.code==="ERR_INVALID_PACKAGE_TARGET")continue;throw w}if(d!==void 0){if(d===null){u=null;continue}return d}}if(u==null)return u;throw u}else if(typeof e=="object"&&e!==null){let u=zr(e);for(let h=0;h<u.length;h++){let y=u[h];if(wa(y))throw new _r(ne.fileURLToPath(n),s,'"exports" cannot contain numeric property keys.')}for(let h=0;h<u.length;h++){let y=u[h];if(y==="default"||o.has(y)){let d=e[y],w=ot(n,d,t,r,s,i,a,o);if(w===void 0)continue;return w}}return}else if(e===null)return null;Ge(r,e,n,a,s)}function Sa(n,e){let t=Jt(n,"*"),r=Jt(e,"*"),s=t===-1?n.length:t+1,i=r===-1?e.length:r+1;return s>i?-1:i>s||t===-1?1:r===-1||n.length>e.length?-1:e.length>n.length?1:0}function Ea({name:n,base:e,conditions:t,readFileSyncFn:r}){if(n==="#"||Ee(n,"#/")||Yt(n,"/")){let a="is not a valid internal imports specifier name";throw new Xr(n,a,ne.fileURLToPath(e))}let s,i=da(e,r);if(i.exists){s=ne.pathToFileURL(i.pjsonPath);let a=i.imports;if(a)if(Xt(a,n)&&!aa(n,"*")){let o=ot(s,a[n],"",n,e,!1,!0,t);if(o!=null)return o}else{let o="",u,h=zr(a);for(let y=0;y<h.length;y++){let d=h[y],w=Jt(d,"*");if(w!==-1&&Ee(n,nt(d,0,w))){let T=nt(d,w+1);n.length>=d.length&&Yt(n,T)&&Sa(o,d)===1&&oa(d,"*")===w&&(o=d,u=nt(n,w,n.length-T.length))}}if(o){let y=a[o],d=ot(s,y,u,o,e,!0,!0,t);if(d!=null)return d}}}ya(n,s,e)}var V=(n=>(n.API_ERROR="API_ERROR",n.BUILTIN_NODE_RESOLUTION_FAILED="BUILTIN_NODE_RESOLUTION_FAILED",n.EXPORTS_RESOLUTION_FAILED="EXPORTS_RESOLUTION_FAILED",n.MISSING_DEPENDENCY="MISSING_DEPENDENCY",n.MISSING_PEER_DEPENDENCY="MISSING_PEER_DEPENDENCY",n.QUALIFIED_PATH_RESOLUTION_FAILED="QUALIFIED_PATH_RESOLUTION_FAILED",n.INTERNAL="INTERNAL",n.UNDECLARED_DEPENDENCY="UNDECLARED_DEPENDENCY",n.UNSUPPORTED="UNSUPPORTED",n))(V||{}),ka=new Set(["BUILTIN_NODE_RESOLUTION_FAILED","MISSING_DEPENDENCY","MISSING_PEER_DEPENDENCY","QUALIFIED_PATH_RESOLUTION_FAILED","UNDECLARED_DEPENDENCY"]);function K(n,e,t={},r){r??(r=ka.has(n)?"MODULE_NOT_FOUND":n);let s={configurable:!0,writable:!0,enumerable:!1};return Object.defineProperties(new Error(e),{code:{...s,value:r},pnpCode:{...s,value:n},data:{...s,value:t}})}function le(n){return p.normalize(p.fromPortablePath(n))}var ba=new Set(qe.Module.builtinModules||Object.keys(process.binding("natives"))),Mt=n=>n.startsWith("node:")||ba.has(n);function $r(n,e){let t=Number(process.env.PNP_ALWAYS_WARN_ON_FALLBACK)>0,r=Number(process.env.PNP_DEBUG_LEVEL),s=/^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:node:)?(?:@[^/]+\/)?[^/]+)\/*(.*|)$/,i=/^(\/|\.{1,2}(\/|$))/,a=/\/$/,o=/^\.{0,2}\//,u={name:null,reference:null},h=[],y=new Set;if(n.enableTopLevelFallback===!0&&h.push(u),e.compatibilityMode!==!1)for(let m of["react-scripts","gatsby"]){let l=n.packageRegistry.get(m);if(l)for(let c of l.keys()){if(c===null)throw new Error("Assertion failed: This reference shouldn't be null");h.push({name:m,reference:c})}}let{ignorePattern:d,packageRegistry:w,packageLocatorsByLocations:T}=n;function b(m,l){return{fn:m,args:l,error:null,result:null}}function L(m){var l,c,f,g;let F=((c=(l=process.stderr)==null?void 0:l.hasColors)==null?void 0:c.call(l))??process.stdout.isTTY,S=(k,ae)=>`\x1B[${k}m${ae}\x1B[0m`,P=m.error;console.error(P?S("31;1",`\u2716 ${(f=m.error)==null?void 0:f.message.replace(/\n.*/s,"")}`):S("33;1","\u203C Resolution")),m.args.length>0&&console.error();for(let k of m.args)console.error(`  ${S("37;1","In \u2190")} ${Rr.inspect(k,{colors:F,compact:!0})}`);m.result&&(console.error(),console.error(`  ${S("37;1","Out \u2192")} ${Rr.inspect(m.result,{colors:F,compact:!0})}`));let R=((g=new Error().stack.match(/(?<=^ +)at.*/gm))==null?void 0:g.slice(2))??[];if(R.length>0){console.error();for(let k of R)console.error(`  ${S("38;5;244",k)}`)}console.error()}function W(m,l){if(e.allowDebug===!1)return l;if(Number.isFinite(r)){if(r>=2)return(...c)=>{let f=b(m,c);try{return f.result=l(...c)}catch(g){throw f.error=g}finally{L(f)}};if(r>=1)return(...c)=>{try{return l(...c)}catch(f){let g=b(m,c);throw g.error=f,L(g),f}}}return l}function D(m){let l=H(m);if(!l)throw K(V.INTERNAL,"Couldn't find a matching entry in the dependency tree for the specified parent (this is probably an internal error)");return l}function A(m){if(m.name===null)return!0;for(let l of n.dependencyTreeRoots)if(l.name===m.name&&l.reference===m.reference)return!0;return!1}let Y=new Set(["default","node","require"]);function pe(m,l=Y){let c=U(x.join(m,"internal.js"),{resolveIgnored:!0,includeDiscardFromLookup:!0});if(c===null)throw K(V.INTERNAL,`The locator that owns the "${m}" path can't be found inside the dependency tree (this is probably an internal error)`);let{packageLocation:f}=D(c),g=x.join(f,it.manifest);if(!e.fakeFs.existsSync(g))return null;let F=JSON.parse(e.fakeFs.readFileSync(g,"utf8")),S=x.contains(f,m);if(S===null)throw K(V.INTERNAL,"unqualifiedPath doesn't contain the packageLocation (this is probably an internal error)");o.test(S)||(S=`./${S}`);let P;try{P=sa(F,x.normalize(S),{conditions:l,unsafe:!0})}catch(R){throw K(V.EXPORTS_RESOLUTION_FAILED,R.message,{unqualifiedPath:le(m),locator:c,pkgJson:F,subpath:le(S),conditions:l},"ERR_PACKAGE_PATH_NOT_EXPORTED")}return typeof P=="string"?x.join(f,P):null}function fe(m,l,{extensions:c}){let f;try{l.push(m),f=e.fakeFs.statSync(m)}catch{}if(f&&!f.isDirectory())return e.fakeFs.realpathSync(m);if(f&&f.isDirectory()){let g;try{g=JSON.parse(e.fakeFs.readFileSync(x.join(m,it.manifest),"utf8"))}catch{}let F;if(g&&g.main&&(F=x.resolve(m,g.main)),F&&F!==m){let S=fe(F,l,{extensions:c});if(S!==null)return S}}for(let g=0,F=c.length;g<F;g++){let S=`${m}${c[g]}`;if(l.push(S),e.fakeFs.existsSync(S))return S}if(f&&f.isDirectory())for(let g=0,F=c.length;g<F;g++){let S=x.format({dir:m,name:"index",ext:c[g]});if(l.push(S),e.fakeFs.existsSync(S))return S}return null}function de(m){let l=new qe.Module(m,null);return l.filename=m,l.paths=qe.Module._nodeModulePaths(m),l}function me(m,l){return l.endsWith("/")&&(l=x.join(l,"internal.js")),qe.Module._resolveFilename(p.fromPortablePath(m),de(p.fromPortablePath(l)),!1,{plugnplay:!1})}function Te(m){if(d===null)return!1;let l=x.contains(n.basePath,m);return l===null?!1:!!d.test(l.replace(/\/$/,""))}let N={std:3,resolveVirtual:1,getAllLocators:1},se=u;function H({name:m,reference:l}){let c=w.get(m);if(!c)return null;let f=c.get(l);return f||null}function I({name:m,reference:l}){let c=[];for(let[f,g]of w)if(f!==null)for(let[F,S]of g)F===null||S.packageDependencies.get(m)!==l||f===m&&F===l||c.push({name:f,reference:F});return c}function q(m,l){let c=new Map,f=new Set,g=S=>{let P=JSON.stringify(S.name);if(f.has(P))return;f.add(P);let R=I(S);for(let k of R)if(D(k).packagePeers.has(m))g(k);else{let B=c.get(k.name);typeof B>"u"&&c.set(k.name,B=new Set),B.add(k.reference)}};g(l);let F=[];for(let S of[...c.keys()].sort())for(let P of[...c.get(S)].sort())F.push({name:S,reference:P});return F}function U(m,{resolveIgnored:l=!1,includeDiscardFromLookup:c=!1}={}){if(Te(m)&&!l)return null;let f,g="";m.match("^/nix/store/")?(f=m,g="/"):(f=x.relative(n.basePath,m),f.match(i)||(f=`./${f}`)),f.endsWith("/")||(f=`${f}/`);do{let F=T.get(f);if(typeof F>"u"||F.discardFromLookup&&!c){f=f.substring(0,f.lastIndexOf("/",f.length-2)+1);continue}return F.locator}while(f!==g);return null}function $(m){try{return e.fakeFs.readFileSync(p.toPortablePath(m),"utf8")}catch(l){if(l.code==="ENOENT")return;throw l}}function C(m,l,{considerBuiltins:c=!0}={}){if(m.startsWith("#"))throw new Error("resolveToUnqualified can not handle private import mappings");if(m==="pnpapi")return p.toPortablePath(e.pnpapiResolution);if(c&&Mt(m))return null;let f=le(m),g=l&&le(l);if(l&&Te(l)&&(!x.isAbsolute(m)||U(m)===null)){let P=me(m,l);if(P===!1)throw K(V.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer was explicitely ignored by the regexp)

Require request: "${f}"
Required by: ${g}
`,{request:f,issuer:g});return p.toPortablePath(P)}let F,S=m.match(s);if(S){if(!l)throw K(V.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:f,issuer:g});let[,P,R]=S,k=U(l);if(!k){let j=me(m,l);if(j===!1)throw K(V.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer doesn't seem to be part of the Yarn-managed dependency tree).

Require path: "${f}"
Required by: ${g}
`,{request:f,issuer:g});return p.toPortablePath(j)}let B=D(k).packageDependencies.get(P),ye=null;if(B==null&&k.name!==null){let j=n.fallbackExclusionList.get(k.name);if(!j||!j.has(k.reference)){for(let z=0,ft=h.length;z<ft;++z){let Be=D(h[z]).packageDependencies.get(P);if(Be!=null){t?ye=Be:B=Be;break}}if(n.enableTopLevelFallback&&B==null&&ye===null){let z=n.fallbackPool.get(P);z!=null&&(ye=z)}}}let ee=null;if(B===null)if(A(k))ee=K(V.MISSING_PEER_DEPENDENCY,`Your application tried to access ${P} (a peer dependency); this isn't allowed as there is no ancestor to satisfy the requirement. Use a devDependency if needed.

Required package: ${P}${P!==f?` (via "${f}")`:""}
Required by: ${g}
`,{request:f,issuer:g,dependencyName:P});else{let j=q(P,k);j.every(Z=>A(Z))?ee=K(V.MISSING_PEER_DEPENDENCY,`${k.name} tried to access ${P} (a peer dependency) but it isn't provided by your application; this makes the require call ambiguous and unsound.

Required package: ${P}${P!==f?` (via "${f}")`:""}
Required by: ${k.name}@${k.reference} (via ${g})
${j.map(Z=>`Ancestor breaking the chain: ${Z.name}@${Z.reference}
`).join("")}
`,{request:f,issuer:g,issuerLocator:Object.assign({},k),dependencyName:P,brokenAncestors:j}):ee=K(V.MISSING_PEER_DEPENDENCY,`${k.name} tried to access ${P} (a peer dependency) but it isn't provided by its ancestors; this makes the require call ambiguous and unsound.

Required package: ${P}${P!==f?` (via "${f}")`:""}
Required by: ${k.name}@${k.reference} (via ${g})

${j.map(Z=>`Ancestor breaking the chain: ${Z.name}@${Z.reference}
`).join("")}
`,{request:f,issuer:g,issuerLocator:Object.assign({},k),dependencyName:P,brokenAncestors:j})}else B===void 0&&(!c&&Mt(m)?A(k)?ee=K(V.UNDECLARED_DEPENDENCY,`Your application tried to access ${P}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${P} isn't otherwise declared in your dependencies, this makes the require call ambiguous and unsound.

Required package: ${P}${P!==f?` (via "${f}")`:""}
Required by: ${g}
`,{request:f,issuer:g,dependencyName:P}):ee=K(V.UNDECLARED_DEPENDENCY,`${k.name} tried to access ${P}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${P} isn't otherwise declared in ${k.name}'s dependencies, this makes the require call ambiguous and unsound.

Required package: ${P}${P!==f?` (via "${f}")`:""}
Required by: ${g}
`,{request:f,issuer:g,issuerLocator:Object.assign({},k),dependencyName:P}):A(k)?ee=K(V.UNDECLARED_DEPENDENCY,`Your application tried to access ${P}, but it isn't declared in your dependencies; this makes the require call ambiguous and unsound.

Required package: ${P}${P!==f?` (via "${f}")`:""}
Required by: ${g}
`,{request:f,issuer:g,dependencyName:P}):ee=K(V.UNDECLARED_DEPENDENCY,`${k.name} tried to access ${P}, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.

Required package: ${P}${P!==f?` (via "${f}")`:""}
Required by: ${k.name}@${k.reference} (via ${g})
`,{request:f,issuer:g,issuerLocator:Object.assign({},k),dependencyName:P}));if(B==null){if(ye===null||ee===null)throw ee||new Error("Assertion failed: Expected an error to have been set");B=ye;let j=ee.message.replace(/\n.*/g,"");ee.message=j,!y.has(j)&&r!==0&&(y.add(j),process.emitWarning(ee))}let ge=Array.isArray(B)?{name:B[0],reference:B[1]}:{name:P,reference:B},Ne=D(ge);if(!Ne.packageLocation)throw K(V.MISSING_DEPENDENCY,`A dependency seems valid but didn't get installed for some reason. This might be caused by a partial install, such as dev vs prod.

Required package: ${ge.name}@${ge.reference}${ge.name!==f?` (via "${f}")`:""}
Required by: ${k.name}@${k.reference} (via ${g})
`,{request:f,issuer:g,dependencyLocator:Object.assign({},ge)});let Re=Ne.packageLocation;R?F=x.join(Re,R):F=Re}else if(x.isAbsolute(m))F=x.normalize(m);else{if(!l)throw K(V.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:f,issuer:g});let P=x.resolve(l);l.match(a)?F=x.normalize(x.join(P,m)):F=x.normalize(x.join(x.dirname(P),m))}return x.normalize(F)}function v(m,l,c=Y){if(i.test(m))return l;let f=pe(l,c);return f?x.normalize(f):l}function Q(m,{extensions:l=Object.keys(qe.Module._extensions)}={}){let c=[],f=fe(m,c,{extensions:l});if(f)return x.normalize(f);{let g=le(m),F=U(m);if(F){let{packageLocation:S}=D(F),P=!0;try{e.fakeFs.accessSync(S)}catch(R){if((R==null?void 0:R.code)==="ENOENT")P=!1;else{let k=((R==null?void 0:R.message)??R??"empty exception thrown").replace(/^[A-Z]/,ae=>ae.toLowerCase());throw K(V.QUALIFIED_PATH_RESOLUTION_FAILED,`Required package exists but could not be accessed (${k}).

Missing package: ${F.name}@${F.reference}
Expected package location: ${le(S)}
`,{unqualifiedPath:g,extensions:l})}}if(!P){let R=S.includes("/unplugged/")?"Required unplugged package missing from disk. This may happen when switching branches without running installs (unplugged packages must be fully materialized on disk to work).":"Required package missing from disk. If you keep your packages inside your repository then restarting the Node process may be enough. Otherwise, try to run an install first.";throw K(V.QUALIFIED_PATH_RESOLUTION_FAILED,`${R}

Missing package: ${F.name}@${F.reference}
Expected package location: ${le(S)}
`,{unqualifiedPath:g,extensions:l})}}throw K(V.QUALIFIED_PATH_RESOLUTION_FAILED,`Qualified path resolution failed: we looked for the following paths, but none could be accessed.

Source path: ${g}
${c.map(S=>`Not found: ${le(S)}
`).join("")}`,{unqualifiedPath:g,extensions:l})}}function X(m,l,c){if(!l)throw new Error("Assertion failed: An issuer is required to resolve private import mappings");let f=Ea({name:m,base:ne.pathToFileURL(p.fromPortablePath(l)),conditions:c.conditions??Y,readFileSyncFn:$});if(f instanceof URL)return Q(p.toPortablePath(ne.fileURLToPath(f)),{extensions:c.extensions});if(f.startsWith("#"))throw new Error("Mapping from one private import to another isn't allowed");return E(f,l,c)}function E(m,l,c={}){try{if(m.startsWith("#"))return X(m,l,c);let{considerBuiltins:f,extensions:g,conditions:F}=c,S=C(m,l,{considerBuiltins:f});if(m==="pnpapi")return S;if(S===null)return null;let P=()=>l!==null?Te(l):!1,R=(!f||!Mt(m))&&!P()?v(m,S,F):S;return Q(R,{extensions:g})}catch(f){throw Object.prototype.hasOwnProperty.call(f,"pnpCode")&&Object.assign(f.data,{request:le(m),issuer:l&&le(l)}),f}}function ie(m){let l=x.normalize(m),c=ue.resolveVirtual(l);return c!==l?c:null}return{VERSIONS:N,topLevel:se,getLocator:(m,l)=>Array.isArray(l)?{name:l[0],reference:l[1]}:{name:m,reference:l},getDependencyTreeRoots:()=>[...n.dependencyTreeRoots],getAllLocators(){let m=[];for(let[l,c]of w)for(let f of c.keys())l!==null&&f!==null&&m.push({name:l,reference:f});return m},getPackageInformation:m=>{let l=H(m);if(l===null)return null;let c=p.fromPortablePath(l.packageLocation);return{...l,packageLocation:c}},findPackageLocator:m=>U(p.toPortablePath(m)),resolveToUnqualified:W("resolveToUnqualified",(m,l,c)=>{let f=l!==null?p.toPortablePath(l):null,g=C(p.toPortablePath(m),f,c);return g===null?null:p.fromPortablePath(g)}),resolveUnqualified:W("resolveUnqualified",(m,l)=>p.fromPortablePath(Q(p.toPortablePath(m),l))),resolveRequest:W("resolveRequest",(m,l,c)=>{let f=l!==null?p.toPortablePath(l):null,g=E(p.toPortablePath(m),f,c);return g===null?null:p.fromPortablePath(g)}),resolveVirtual:W("resolveVirtual",m=>{let l=ie(p.toPortablePath(m));return l!==null?p.fromPortablePath(l):null})}}async function Ta(n,{fakeFs:e,pnpapiResolution:t}){let r=await e.readFilePromise(n,"utf8");return es(r,{basePath:Hr.dirname(n),fakeFs:e,pnpapiResolution:t})}function es(n,{basePath:e,fakeFs:t,pnpapiResolution:r}){let s=JSON.parse(n),i=Zr(s,{basePath:e});return $r(i,{compatibilityMode:!0,fakeFs:t,pnpapiResolution:r})}var Fa=(n,e,t)=>{let r=Zt(n),s=Zr(r,{basePath:e}),i=p.join(e,it.pnpCjs);return $r(s,{fakeFs:t,pnpapiResolution:i})},Ht,xa=()=>(typeof Ht>"u"&&(Ht=jr.default.brotliDecompressSync(Buffer.from("","base64")).toString()),Ht);oe.LinkType=Wr;oe.generateInlinedScript=ta;oe.generateLoader=zt;oe.generatePrettyJson=Qr;oe.generateSplitScript=na;oe.getESMLoaderTemplate=xa;oe.hydratePnpFile=Ta;oe.hydratePnpSource=es;oe.makeRuntimeApi=Fa});var ns=G((Ho,va)=>{va.exports=`# This file can't import anything as we include the contents of this file
# directly in nix eval --apply arguments (see how this file is included in runner/src/common.ts)

with builtins;

let
  nameValuePair = name: value: { inherit name value; };

  filterAttrs = pred: set:
    listToAttrs (concatMap (name: let v = set.\${name}; in if pred name v then [(nameValuePair name v)] else []) (attrNames set));

  ##

  getPackages = manifest:
    mapAttrs (name: pkg:
      filterAttrs (key: b: (builtins.elem key [
        "name"
        "outputHash"
        "outputHashByPlatform"
      ])) pkg
    ) manifest;
in
`});var Na={};us(Na,{getExistingYarnManifest:()=>ss,nixCurrentSystem:()=>$t});module.exports=fs(Na);var he=re(require("fs")),be=re(require("path")),rs=require("stream");var Ir=require("node:buffer"),Ar=re(require("node:path"),1),tt=re(require("node:child_process"),1),je=re(require("node:process"),1),Lr=re(Kn(),1);function Et(n){let e=typeof n=="string"?`
`:`
`.charCodeAt(),t=typeof n=="string"?"\r":"\r".charCodeAt();return n[n.length-1]===e&&(n=n.slice(0,-1)),n[n.length-1]===t&&(n=n.slice(0,-1)),n}var Ue=re(require("node:process"),1),ve=re(require("node:path"),1),Yn=re(require("node:url"),1);function Je(n={}){let{env:e=process.env,platform:t=process.platform}=n;return t!=="win32"?"PATH":Object.keys(e).reverse().find(r=>r.toUpperCase()==="PATH")||"Path"}function Ms(n={}){let{cwd:e=Ue.default.cwd(),path:t=Ue.default.env[Je()],execPath:r=Ue.default.execPath}=n,s,i=e instanceof URL?Yn.default.fileURLToPath(e):e,a=ve.default.resolve(i),o=[];for(;s!==a;)o.push(ve.default.join(a,"node_modules/.bin")),s=a,a=ve.default.resolve(a,"..");return o.push(ve.default.resolve(i,r,"..")),[...o,t].join(ve.default.delimiter)}function Jn({env:n=Ue.default.env,...e}={}){n={...n};let t=Je({env:n});return e.path=n[t],n[t]=Ms(e),n}var Hs=(n,e,t,r)=>{if(t==="length"||t==="prototype"||t==="arguments"||t==="caller")return;let s=Object.getOwnPropertyDescriptor(n,t),i=Object.getOwnPropertyDescriptor(e,t);!js(s,i)&&r||Object.defineProperty(n,t,i)},js=function(n,e){return n===void 0||n.configurable||n.writable===e.writable&&n.enumerable===e.enumerable&&n.configurable===e.configurable&&(n.writable||n.value===e.value)},Ws=(n,e)=>{let t=Object.getPrototypeOf(e);t!==Object.getPrototypeOf(n)&&Object.setPrototypeOf(n,t)},qs=(n,e)=>`/* Wrapped ${n}*/
${e}`,Gs=Object.getOwnPropertyDescriptor(Function.prototype,"toString"),Vs=Object.getOwnPropertyDescriptor(Function.prototype.toString,"name"),Ks=(n,e,t)=>{let r=t===""?"":`with ${t.trim()}() `,s=qs.bind(null,r,e.toString());Object.defineProperty(s,"name",Vs),Object.defineProperty(n,"toString",{...Gs,value:s})};function kt(n,e,{ignoreNonConfigurable:t=!1}={}){let{name:r}=n;for(let s of Reflect.ownKeys(e))Hs(n,e,s,t);return Ws(n,e),Ks(n,e,r),n}var Qe=new WeakMap,Qn=(n,e={})=>{if(typeof n!="function")throw new TypeError("Expected a function");let t,r=0,s=n.displayName||n.name||"<anonymous>",i=function(...a){if(Qe.set(i,++r),r===1)t=n.apply(this,a),n=null;else if(e.throw===!0)throw new Error(`Function \`${s}\` can only be called once`);return t};return kt(i,n),Qe.set(i,r),i};Qn.callCount=n=>{if(!Qe.has(n))throw new Error(`The given function \`${n.name}\` is not wrapped by the \`onetime\` package`);return Qe.get(n)};var Zn=Qn;var er=require("os");var zn=function(){let n=bt-Xn+1;return Array.from({length:n},Ys)},Ys=function(n,e){return{name:`SIGRT${e+1}`,number:Xn+e,action:"terminate",description:"Application-specific signal (realtime)",standard:"posix"}},Xn=34,bt=64;var $n=require("os");var _n=[{name:"SIGHUP",number:1,action:"terminate",description:"Terminal closed",standard:"posix"},{name:"SIGINT",number:2,action:"terminate",description:"User interruption with CTRL-C",standard:"ansi"},{name:"SIGQUIT",number:3,action:"core",description:"User interruption with CTRL-\\",standard:"posix"},{name:"SIGILL",number:4,action:"core",description:"Invalid machine instruction",standard:"ansi"},{name:"SIGTRAP",number:5,action:"core",description:"Debugger breakpoint",standard:"posix"},{name:"SIGABRT",number:6,action:"core",description:"Aborted",standard:"ansi"},{name:"SIGIOT",number:6,action:"core",description:"Aborted",standard:"bsd"},{name:"SIGBUS",number:7,action:"core",description:"Bus error due to misaligned, non-existing address or paging error",standard:"bsd"},{name:"SIGEMT",number:7,action:"terminate",description:"Command should be emulated but is not implemented",standard:"other"},{name:"SIGFPE",number:8,action:"core",description:"Floating point arithmetic error",standard:"ansi"},{name:"SIGKILL",number:9,action:"terminate",description:"Forced termination",standard:"posix",forced:!0},{name:"SIGUSR1",number:10,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGSEGV",number:11,action:"core",description:"Segmentation fault",standard:"ansi"},{name:"SIGUSR2",number:12,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGPIPE",number:13,action:"terminate",description:"Broken pipe or socket",standard:"posix"},{name:"SIGALRM",number:14,action:"terminate",description:"Timeout or timer",standard:"posix"},{name:"SIGTERM",number:15,action:"terminate",description:"Termination",standard:"ansi"},{name:"SIGSTKFLT",number:16,action:"terminate",description:"Stack is empty or overflowed",standard:"other"},{name:"SIGCHLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"posix"},{name:"SIGCLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"other"},{name:"SIGCONT",number:18,action:"unpause",description:"Unpaused",standard:"posix",forced:!0},{name:"SIGSTOP",number:19,action:"pause",description:"Paused",standard:"posix",forced:!0},{name:"SIGTSTP",number:20,action:"pause",description:'Paused using CTRL-Z or "suspend"',standard:"posix"},{name:"SIGTTIN",number:21,action:"pause",description:"Background process cannot read terminal input",standard:"posix"},{name:"SIGBREAK",number:21,action:"terminate",description:"User interruption with CTRL-BREAK",standard:"other"},{name:"SIGTTOU",number:22,action:"pause",description:"Background process cannot write to terminal output",standard:"posix"},{name:"SIGURG",number:23,action:"ignore",description:"Socket received out-of-band data",standard:"bsd"},{name:"SIGXCPU",number:24,action:"core",description:"Process timed out",standard:"bsd"},{name:"SIGXFSZ",number:25,action:"core",description:"File too big",standard:"bsd"},{name:"SIGVTALRM",number:26,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGPROF",number:27,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGWINCH",number:28,action:"ignore",description:"Terminal window size changed",standard:"bsd"},{name:"SIGIO",number:29,action:"terminate",description:"I/O is available",standard:"other"},{name:"SIGPOLL",number:29,action:"terminate",description:"Watched event",standard:"other"},{name:"SIGINFO",number:29,action:"ignore",description:"Request for process information",standard:"other"},{name:"SIGPWR",number:30,action:"terminate",description:"Device running out of power",standard:"systemv"},{name:"SIGSYS",number:31,action:"core",description:"Invalid system call",standard:"other"},{name:"SIGUNUSED",number:31,action:"terminate",description:"Invalid system call",standard:"other"}];var Tt=function(){let n=zn();return[..._n,...n].map(Js)},Js=function({name:n,number:e,description:t,action:r,forced:s=!1,standard:i}){let{signals:{[n]:a}}=$n.constants,o=a!==void 0;return{name:n,number:o?a:e,description:t,supported:o,action:r,forced:s,standard:i}};var Qs=function(){return Tt().reduce(Zs,{})},Zs=function(n,{name:e,number:t,description:r,supported:s,action:i,forced:a,standard:o}){return{...n,[e]:{name:e,number:t,description:r,supported:s,action:i,forced:a,standard:o}}},tr=Qs(),zs=function(){let n=Tt(),e=64+1,t=Array.from({length:e},(r,s)=>Xs(s,n));return Object.assign({},...t)},Xs=function(n,e){let t=_s(n,e);if(t===void 0)return{};let{name:r,description:s,supported:i,action:a,forced:o,standard:u}=t;return{[n]:{name:r,number:n,description:s,supported:i,action:a,forced:o,standard:u}}},_s=function(n,e){let t=e.find(({name:r})=>er.constants.signals[r]===n);return t!==void 0?t:e.find(r=>r.number===n)},co=zs();var $s=({timedOut:n,timeout:e,errorCode:t,signal:r,signalDescription:s,exitCode:i,isCanceled:a})=>n?`timed out after ${e} milliseconds`:a?"was canceled":t!==void 0?`failed with ${t}`:r!==void 0?`was killed with ${r} (${s})`:i!==void 0?`failed with exit code ${i}`:"failed",Ce=({stdout:n,stderr:e,all:t,error:r,signal:s,exitCode:i,command:a,escapedCommand:o,timedOut:u,isCanceled:h,killed:y,parsed:{options:{timeout:d}}})=>{i=i===null?void 0:i,s=s===null?void 0:s;let w=s===void 0?void 0:tr[s].description,T=r&&r.code,L=`Command ${$s({timedOut:u,timeout:d,errorCode:T,signal:s,signalDescription:w,exitCode:i,isCanceled:h})}: ${a}`,W=Object.prototype.toString.call(r)==="[object Error]",D=W?`${L}
${r.message}`:L,A=[D,e,n].filter(Boolean).join(`
`);return W?(r.originalMessage=r.message,r.message=A):r=new Error(A),r.shortMessage=D,r.command=a,r.escapedCommand=o,r.exitCode=i,r.signal=s,r.signalDescription=w,r.stdout=n,r.stderr=e,t!==void 0&&(r.all=t),"bufferedData"in r&&delete r.bufferedData,r.failed=!0,r.timedOut=Boolean(u),r.isCanceled=h,r.killed=y&&!u,r};var Ze=["stdin","stdout","stderr"],ei=n=>Ze.some(e=>n[e]!==void 0),nr=n=>{if(!n)return;let{stdio:e}=n;if(e===void 0)return Ze.map(r=>n[r]);if(ei(n))throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${Ze.map(r=>`\`${r}\``).join(", ")}`);if(typeof e=="string")return e;if(!Array.isArray(e))throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof e}\``);let t=Math.max(e.length,Ze.length);return Array.from({length:t},(r,s)=>e[s])};var lr=re(require("node:os"),1),ur=re(cr(),1),ti=1e3*5,fr=(n,e="SIGTERM",t={})=>{let r=n(e);return ni(n,e,t,r),r},ni=(n,e,t,r)=>{if(!ri(e,t,r))return;let s=ii(t),i=setTimeout(()=>{n("SIGKILL")},s);i.unref&&i.unref()},ri=(n,{forceKillAfterTimeout:e},t)=>si(n)&&e!==!1&&t,si=n=>n===lr.default.constants.signals.SIGTERM||typeof n=="string"&&n.toUpperCase()==="SIGTERM",ii=({forceKillAfterTimeout:n=!0})=>{if(n===!0)return ti;if(!Number.isFinite(n)||n<0)throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${n}\` (${typeof n})`);return n},mr=(n,e)=>{n.kill()&&(e.isCanceled=!0)},ai=(n,e,t)=>{n.kill(e),t(Object.assign(new Error("Timed out"),{timedOut:!0,signal:e}))},hr=(n,{timeout:e,killSignal:t="SIGTERM"},r)=>{if(e===0||e===void 0)return r;let s,i=new Promise((o,u)=>{s=setTimeout(()=>{ai(n,t,u)},e)}),a=r.finally(()=>{clearTimeout(s)});return Promise.race([i,a])},pr=({timeout:n})=>{if(n!==void 0&&(!Number.isFinite(n)||n<0))throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${n}\` (${typeof n})`)},dr=async(n,{cleanup:e,detached:t},r)=>{if(!e||t)return r;let s=(0,ur.default)(()=>{n.kill()});return r.finally(()=>{s()})};function vt(n){return n!==null&&typeof n=="object"&&typeof n.pipe=="function"}var Dt=re(Pr(),1),Er=re(Sr(),1),kr=(n,e)=>{e===void 0||n.stdin===void 0||(vt(e)?e.pipe(n.stdin):n.stdin.end(e))},br=(n,{all:e})=>{if(!e||!n.stdout&&!n.stderr)return;let t=(0,Er.default)();return n.stdout&&t.add(n.stdout),n.stderr&&t.add(n.stderr),t},At=async(n,e)=>{if(!!n){n.destroy();try{return await e}catch(t){return t.bufferedData}}},Lt=(n,{encoding:e,buffer:t,maxBuffer:r})=>{if(!(!n||!t))return e?(0,Dt.default)(n,{encoding:e,maxBuffer:r}):Dt.default.buffer(n,{maxBuffer:r})},Tr=async({stdout:n,stderr:e,all:t},{encoding:r,buffer:s,maxBuffer:i},a)=>{let o=Lt(n,{encoding:r,buffer:s,maxBuffer:i}),u=Lt(e,{encoding:r,buffer:s,maxBuffer:i}),h=Lt(t,{encoding:r,buffer:s,maxBuffer:i*2});try{return await Promise.all([a,o,u,h])}catch(y){return Promise.all([{error:y,signal:y.signal,timedOut:y.timedOut},At(n,o),At(e,u),At(t,h)])}},Fr=({input:n})=>{if(vt(n))throw new TypeError("The `input` option cannot be a stream in sync mode")};var pi=(async()=>{})().constructor.prototype,di=["then","catch","finally"].map(n=>[n,Reflect.getOwnPropertyDescriptor(pi,n)]),Nt=(n,e)=>{for(let[t,r]of di){let s=typeof e=="function"?(...i)=>Reflect.apply(r.value,e(),i):r.value.bind(e);Reflect.defineProperty(n,t,{...r,value:s})}return n},xr=n=>new Promise((e,t)=>{n.on("exit",(r,s)=>{e({exitCode:r,signal:s})}),n.on("error",r=>{t(r)}),n.stdin&&n.stdin.on("error",r=>{t(r)})});var vr=(n,e=[])=>Array.isArray(e)?[n,...e]:[n],yi=/^[\w.-]+$/,gi=/"/g,Pi=n=>typeof n!="string"||yi.test(n)?n:`"${n.replace(gi,'\\"')}"`,Rt=(n,e)=>vr(n,e).join(" "),Bt=(n,e)=>vr(n,e).map(t=>Pi(t)).join(" ");var wi=1e3*1e3*100,Si=({env:n,extendEnv:e,preferLocal:t,localDir:r,execPath:s})=>{let i=e?{...je.default.env,...n}:n;return t?Jn({env:i,cwd:r,execPath:s}):i},Dr=(n,e,t={})=>{let r=Lr.default._parse(n,e,t);return n=r.command,e=r.args,t=r.options,t={maxBuffer:wi,buffer:!0,stripFinalNewline:!0,extendEnv:!0,preferLocal:!1,localDir:t.cwd||je.default.cwd(),execPath:je.default.execPath,encoding:"utf8",reject:!0,cleanup:!0,all:!1,windowsHide:!0,...t},t.env=Si(t),t.stdio=nr(t),je.default.platform==="win32"&&Ar.default.basename(n,".exe")==="cmd"&&e.unshift("/q"),{file:n,args:e,options:t,parsed:r}},We=(n,e,t)=>typeof e!="string"&&!Ir.Buffer.isBuffer(e)?t===void 0?void 0:"":n.stripFinalNewline?Et(e):e;function Ot(n,e,t){let r=Dr(n,e,t),s=Rt(n,e),i=Bt(n,e);pr(r.options);let a;try{a=tt.default.spawn(r.file,r.args,r.options)}catch(T){let b=new tt.default.ChildProcess,L=Promise.reject(Ce({error:T,stdout:"",stderr:"",all:"",command:s,escapedCommand:i,parsed:r,timedOut:!1,isCanceled:!1,killed:!1}));return Nt(b,L)}let o=xr(a),u=hr(a,r.options,o),h=dr(a,r.options,u),y={isCanceled:!1};a.kill=fr.bind(null,a.kill.bind(a)),a.cancel=mr.bind(null,a,y);let w=Zn(async()=>{let[{error:T,exitCode:b,signal:L,timedOut:W},D,A,Y]=await Tr(a,r.options,h),pe=We(r.options,D),fe=We(r.options,A),de=We(r.options,Y);if(T||b!==0||L!==null){let me=Ce({error:T,exitCode:b,signal:L,stdout:pe,stderr:fe,all:de,command:s,escapedCommand:i,parsed:r,timedOut:W,isCanceled:y.isCanceled||(r.options.signal?r.options.signal.aborted:!1),killed:a.killed});if(!r.options.reject)return me;throw me}return{command:s,escapedCommand:i,exitCode:0,stdout:pe,stderr:fe,all:de,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}});return kr(a,r.options.input),a.all=br(a,r.options),Nt(a,w)}function Nr(n,e,t){let r=Dr(n,e,t),s=Rt(n,e),i=Bt(n,e);Fr(r.options);let a;try{a=tt.default.spawnSync(r.file,r.args,r.options)}catch(h){throw Ce({error:h,stdout:"",stderr:"",all:"",command:s,escapedCommand:i,parsed:r,timedOut:!1,isCanceled:!1,killed:!1})}let o=We(r.options,a.stdout,a.error),u=We(r.options,a.stderr,a.error);if(a.error||a.status!==0||a.signal!==null){let h=Ce({stdout:o,stderr:u,error:a.error,signal:a.signal,exitCode:a.status,command:s,escapedCommand:i,parsed:r,timedOut:a.error&&a.error.code==="ETIMEDOUT",isCanceled:!1,killed:a.signal!==null});if(!r.options.reject)return h;throw h}return{command:s,escapedCommand:i,exitCode:0,stdout:o,stderr:u,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}}var{generateInlinedScript:Ia}=ts(),Aa=ns(),_t;function $t(){if(_t)return _t;let n=JSON.parse(Nr("nix",["eval","--impure","--json","--expr","builtins.currentSystem"]).stdout);return _t=n,n}async function ss(n){try{let e=["eval","--json","--impure","--expr",Aa+`

        getPackages (import ${n})
      `],{stdout:t}=await Ot("nix",e,{stderr:"ignore"});return JSON.parse(t)}catch{return null}}var La={name:"plugin-nix-store",factory:n=>{let{Configuration:e,Project:t,Cache:r,StreamReport:s,Manifest:i,tgzUtils:a,structUtils:o,miscUtils:u,scriptUtils:h}=n("@yarnpkg/core"),{BaseCommand:y}=n("@yarnpkg/cli"),{xfs:d,CwdFS:w,PortablePath:T}=n("@yarnpkg/fslib"),{ZipOpenFS:b}=n("@yarnpkg/libzip"),{getPnpPath:L,pnpUtils:W}=n("@yarnpkg/plugin-pnp"),{fileUtils:D}=n("@yarnpkg/plugin-file"),{Option:A}=n("clipanion"),Y=n("typanion");class pe extends y{constructor(){super(...arguments);this.locator=A.String({validator:Y.isString()});this.outDirectory=A.String({validator:Y.isString()})}async execute(){let H=await e.find(process.cwd(),this.context.plugins),{project:I,workspace:q}=await t.find(H,process.cwd()),U=H.makeFetcher(),$=await s.start({configuration:H,stdout:this.context.stdout,includeLogs:!this.context.quiet},async C=>{H.values.set("enableMirror",!1);let v={...JSON.parse(this.locator),locatorHash:"",identHash:""};o.isVirtualLocator(v)&&(v=o.devirtualizeLocator(v));let Q={checksums:new Map,project:I,cache:new r(this.outDirectory,{check:!1,configuration:H,immutable:!1}),fetcher:U,report:C},X=await U.fetch(v,Q);he.default.renameSync(X.packageFs.target,be.default.join(this.outDirectory,"output.zip"))})}}pe.paths=[["nix","fetch-by-locator"]];class fe extends y{constructor(){super(...arguments);this.packageRegistryDataPath=A.String({validator:Y.isString()})}async execute(){var $;let H=await e.find(process.cwd(),this.context.plugins),I=new t(process.cwd(),{configuration:H});await I.setupResolutions();let q=JSON.parse(he.default.readFileSync(this.packageRegistryDataPath,"utf8")),U=Object.values(q).filter(C=>!!(C!=null&&C.manifest));for(let C of U){let v=C.manifest,Q=new Map,X=new Map(Object.entries(v.bin??{})),E={identHash:v.descriptorIdentHash,scope:v.scope,name:v.flatName,locatorHash:v.locatorHash,reference:v.reference,languageName:v.languageName,linkType:v.linkType,conditions:null,dependencies:Q,bin:X};I.originalPackages.set(v.locatorHash,E),I.storedResolutions.set(v.descriptorHash,v.locatorHash),v.checksum!=null&&I.storedChecksums.set(v.locatorHash,v.checksum);let ie={identHash:v.descriptorIdentHash,scope:v.scope,name:v.flatName,descriptorHash:v.descriptorHash,range:v.descriptorRange};I.storedDescriptors.set(v.descriptorHash,ie)}for(let C of U){let v=I.originalPackages.get(C.manifest.locatorHash);if(!v)continue;let Q=C.packageDependencies??{};for(let X of Object.keys(Q)){let[E,ie]=Q[X],m=U.find(l=>{var c,f;return((c=l==null?void 0:l.manifest)==null?void 0:c.name)===E&&((f=l==null?void 0:l.manifest)==null?void 0:f.reference)===ie});if((($=m==null?void 0:m.manifest)==null?void 0:$.descriptorHash)!=null){let l=I.storedDescriptors.get(m.manifest.descriptorHash);l!=null&&v.dependencies.set(m.manifest.descriptorHash,l)}}}I.storedPackages=I.originalPackages,await I.persistLockfile()}}fe.paths=[["nix","create-lockfile"]];class de extends y{constructor(){super(...arguments);this.locator=A.String({validator:Y.isString()});this.tgzPath=A.String({validator:Y.isString()});this.outPath=A.String({validator:Y.isString()})}async execute(){let H=await e.find(process.cwd(),this.context.plugins),{project:I,workspace:q}=await t.find(H,process.cwd()),U={...JSON.parse(this.locator),locatorHash:"",identHash:""},{path:$}=await a.convertToZip(he.default.readFileSync(this.tgzPath),{compressionLevel:I.configuration.get("compressionLevel"),prefixPath:o.getIdentVendorPath(U),stripComponents:1});he.default.copyFileSync($,this.outPath)}}de.paths=[["nix","convert-to-zip"]];class me extends y{constructor(){super(...arguments);this.outDirectory=A.String({validator:Y.isString()});this.packageRegistryDataPath=A.String({validator:Y.isString()});this.topLevelPackageDirectory=A.String({validator:Y.isString()})}async execute(){var F;let H=await e.find(process.cwd(),this.context.plugins),{project:I,workspace:q}=await t.find(H,process.cwd()),U=L({cwd:this.outDirectory}),$=I.configuration.get("pnpFallbackMode"),C=I.workspaces.map(({anchoredLocator:S})=>({name:o.stringifyIdent(S),reference:S.reference})),v=!1,Q=[],X=new Map,E=u.buildIgnorePattern([".yarn/sdks/**",...I.configuration.get("pnpIgnorePatterns")]),ie=I.configuration.get("pnpShebang");if($==="dependencies-only")for(let S of I.workspaces)Q.push({name:o.stringifyIdent(S.anchoredLocator),reference:S.anchoredLocator.reference});let m=new Map,l=JSON.parse(he.default.readFileSync(this.packageRegistryDataPath,"utf8")),c=null;for(let S of Object.keys(l)){let P=l[S];if(!P)continue;let R=new Map,k=new Set;for(let B of((F=P.manifest)==null?void 0:F.packagePeers)??[])R.set(B,null),k.add(B);if(P.packageDependencies!=null)for(let B of Object.keys(P.packageDependencies))R.set(B,P.packageDependencies[B]);let ae={packageLocation:P.drvPath+"/node_modules/"+P.name+"/",packageDependencies:R,packagePeers:k,linkType:P.linkType};u.getMapWithDefault(m,P.name).set(P.reference,ae),ae.packageLocation.startsWith(this.topLevelPackageDirectory)&&(c=ae)}if(c!=null)u.getMapWithDefault(m,null).set(null,c);else throw new Error("Could not determine topLevelPackage, this is NEEDED for the .pnp.cjs to be correctly generated");let g=Ia({dependencyTreeRoots:C,enableTopLevelFallback:v,fallbackExclusionList:Q,fallbackPool:X,ignorePattern:E,packageRegistry:m,shebang:ie});await d.changeFilePromise(U.cjs,g,{automaticNewlines:!0,mode:493})}}me.paths=[["nix","generate-pnp-file"]];class Te extends y{constructor(){super(...arguments);this.locator=A.String({validator:Y.isString()});this.pnpRootDirectory=A.String({validator:Y.isString()});this.packageDirectory=A.String({validator:Y.isString()})}async execute(){let H=await e.find(process.cwd(),this.context.plugins),{project:I,workspace:q}=await t.find(H,process.cwd()),U=I.originalPackages.get(this.locator);I.cwd=this.pnpRootDirectory,I.storedPackages=I.originalPackages;let $=await b.openPromise(async C=>{let v=I.configuration.getLinkers(),Q={project:I,report:new s({stdout:new rs.PassThrough,configuration:H})},X=v.find(l=>l.supportsPackage(U,Q));if(!X)throw new Error(`The package ${o.prettyLocator(I.configuration,U)} isn't supported by any of the available linkers`);let E=await X.findPackageLocation(U,Q),ie=new w(E,{baseFs:C});return await i.find(T.dot,{baseFs:ie})});for(let C of["preinstall","install","postinstall"]){if(!$.scripts.has(C))continue;let v=await h.executePackageScript(U,C,[],{cwd:this.packageDirectory,project:I,stdin:process.stdin,stdout:process.stdout,stderr:process.stderr});if(v>0)return v}}}return Te.paths=[["nix","run-build-scripts"]],{hooks:{afterAllInstalled:async(N,se)=>{let H=N.configuration.getLinkers(),I={project:N,report:null},q=await ss(be.default.join(N.cwd,"yarn-manifest.nix")),U=new Map(H.map(l=>{let c=l.makeInstaller(I),f=l.getCustomDataKey(),g=N.linkersCustomData.get(f);return typeof g<"u"&&c.attachCustomData(g),[l,c]})),$=N.configuration.makeFetcher(),C={checksums:new Map,project:N,cache:null,fetcher:$,report:null},v=N.configuration.makeResolver(),Q={project:N,report:se.report,resolver:v},X={};for(let[l,c]of N.storedPackages){let f=o.isVirtualLocator(c),g=f?N.storedPackages.get(o.devirtualizeLocator(c).locatorHash):c,F=H.find(M=>M.supportsPackage(g,I)),S=U.get(F),P=$.getLocalPath(g,C);if(!P){let M=D.parseSpec(g.reference);if((M==null?void 0:M.parentLocator)!=null&&(M==null?void 0:M.path)!=null){let te=$.getLocalPath(M.parentLocator,C),_=be.default.resolve(te,M.path);_!=null&&(P=_)}}let R=P!=null?"./"+be.default.relative(N.cwd,P):null,k=c.reference.startsWith("workspace:")?`./${c.reference.substring(10)}`:R??null,ae=c.bin!=null?Object.fromEntries(c.bin):null,B=k!=null?!0:(S==null?void 0:S.shouldBeUnplugged)!=null?S.customData.store.get(c.locatorHash)!=null?S.shouldBeUnplugged(c,S.customData.store.get(c.locatorHash),N.getDependencyMeta(o.isVirtualLocator(c)?o.devirtualizeLocator(c):c,c.version)):!1:!0,ye=!k&&!B,ee=null;if(c.conditions!=null){let M=c.conditions.split("&").map(_=>_.trim().split("=")),te=[];for(let _ of M){let ce=_[0],Oe=_[1];if(ce==="os")Oe==="linux"?te.push("stdenv.isLinux"):Oe==="darwin"?te.push("stdenv.isDarwin"):te.push("false");else if(ce==="cpu"){let tn={ia32:"stdenv.isi686",x64:"stdenv.isx86_64",arm:"stdenv.isAarch32",arm64:"stdenv.isAarch64"};tn[Oe]!=null?te.push(tn[Oe]):te.push("false")}else ce==="libc"&&Oe!=="glibc"&&te.push("false")}te.length>0&&(ee=`stdenv: ${te.map(_=>`(${_})`).join(" && ")}`)}let ge=(await Promise.all(Array.from(c.dependencies).map(async([M,te])=>{let _=N.storedResolutions.get(te.descriptorHash),ce=_!=null?N.storedPackages.get(_):null;return ce?{key:M,name:o.stringifyIdent(te),packageManifestId:o.stringifyIdent(ce)+"@"+ce.reference}:(console.log("failed to resolve",te),null)}))).filter(M=>!!M),Ne=[];for(let M of c.peerDependencies.values())Ne.push(o.stringifyIdent(M));let Re=o.stringifyIdent(c)+"@"+c.reference,j=q==null?void 0:q[Re],Z=j==null?void 0:j.outputHash,z=(j==null?void 0:j.outputHashByPlatform)??{};await async function(){var M;if(k!=null){Z=null,z=null;return}else if(ye){Z=(M=N.storedChecksums.get(c.locatorHash))==null?void 0:M.substring(2),z=null;return}else if(B){if(z[$t()]){Z=null;return}else{let _=W.getUnpluggedPath(c,{configuration:N.configuration});if(_!=null&&await d.existsPromise(_)){let ce=await Ot("nix",["hash","path","--type","sha512",_]);if(ce.stdout!=null){Z=null,z||(z={}),z[$t()]=ce.stdout;return}}else if(Object.keys(z).length>0&&Z==null)return}Z="",z=null;return}else{Z=null,z=null;return}}();let ft=Da(N.storedResolutions,c.locatorHash),en=N.storedDescriptors.get(ft),Be=N.storedChecksums.get(c.locatorHash);X[Re]={isVirtual:f,canonicalPackage:g,name:o.stringifyIdent(c),reference:c.reference,locatorHash:c.locatorHash,linkType:c.linkType,outputName:[o.stringifyIdent(c),c.version,c.locatorHash.substring(0,10)].filter(M=>!!M).join("-").replace(/@/g,"").replace(/[\/]/g,"-"),outputHash:Z,outputHashByPlatform:z,src:k,shouldBeUnplugged:B,installCondition:ee,bin:ae,flatName:c.name,descriptor:en,languageName:c.languageName,scope:c.scope,checksum:Be,dependencies:ge,packagePeers:Ne}}let E=[];E.push('# This file is generated by running "yarn install" inside your project.'),E.push("# It is essentially a version of yarn.lock that Nix can better understand"),E.push("# Manual changes WILL be lost - proceed with caution!"),E.push("let"),E.push("  packages = {");function ie(l,c){if(c.length>0){E.push(`      ${l} = {`);for(let f of c)E.push(`        ${JSON.stringify(f.name)} = packages.${JSON.stringify(f.packageManifestId)};`);E.push("      };")}}let m=Object.keys(X).sort((l,c)=>l.localeCompare(c));for(let l of m){let c=X[l];if(E.push(`    "${l}" = {`),E.push(`      name = ${JSON.stringify(c.name)};`),E.push(`      reference = ${JSON.stringify(c.reference)};`),c.isVirtual&&c.canonicalPackage!=null&&E.push(`      canonicalPackage = packages.${JSON.stringify(`${o.stringifyIdent(c.canonicalPackage)}@${c.canonicalPackage.reference}`)};`),!c.isVirtual){if(E.push(`      locatorHash = ${JSON.stringify(c.locatorHash)};`),E.push(`      linkType = ${JSON.stringify(c.linkType)};`),E.push(`      outputName = ${JSON.stringify(c.outputName)};`),c.outputHash!=null&&E.push(`      outputHash = ${JSON.stringify(c.outputHash)};`),c.outputHashByPlatform&&Object.keys(c.outputHashByPlatform).length>0){E.push("      outputHashByPlatform = {");for(let f of Object.keys(c.outputHashByPlatform))E.push(`        ${JSON.stringify(f)} = ${JSON.stringify(c.outputHashByPlatform[f])};`);E.push("      };")}if(c.src&&E.push(`      src = ${c.src};`),c.shouldBeUnplugged&&E.push(`      shouldBeUnplugged = ${c.shouldBeUnplugged};`),c.installCondition&&E.push(`      installCondition = ${c.installCondition};`),E.push(`      flatName = ${JSON.stringify(c.flatName)};`),E.push(`      descriptorHash = ${JSON.stringify(c.descriptor.descriptorHash)};`),E.push(`      languageName = ${JSON.stringify(c.languageName)};`),E.push(`      scope = ${JSON.stringify(c.scope)};`),E.push(`      descriptorRange = ${JSON.stringify(c.descriptor.range)};`),E.push(`      descriptorIdentHash = ${JSON.stringify(c.descriptor.identHash)};`),c.checksum&&E.push(`      checksum = ${JSON.stringify(c.checksum)};`),c.bin&&Object.keys(c.bin).length>0){E.push("      bin = {");for(let f of Object.keys(c.bin))E.push(`        ${JSON.stringify(f)} = ${JSON.stringify(c.bin[f])};`);E.push("      };")}}if(ie("dependencies",c.dependencies),!c.isVirtual&&c.packagePeers&&c.packagePeers.length>0){E.push("      packagePeers = [");for(let f of c.packagePeers)E.push(`        ${JSON.stringify(f)}`);E.push("      ];")}E.push("    };")}E.push("  };"),E.push("in"),E.push("packages"),E.push(""),he.default.writeFileSync(be.default.join(N.cwd,"yarn-manifest.nix"),E.join(`
`),"utf8")},populateYarnPaths:async N=>{let se=process.env.YARNNIX_PACKAGE_REGISTRY_DATA_PATH;if(se){let H=JSON.parse(he.default.readFileSync(se,"utf8")),I=Object.values(H).filter(q=>!!(q!=null&&q.manifest));for(let q of I)q.manifest.reference.startsWith("workspace:")&&q.drvPath!==process.env.out&&await N.addWorkspace(be.default.join(q.drvPath,"node_modules",q.manifest.name))}}},commands:[fe,pe,de,me,Te]}}};function Da(n,e){for(let[t,r]of n.entries())if(r===e)return t}module.exports=La;0&&(module.exports={getExistingYarnManifest,nixCurrentSystem});
/**
  @license
  Copyright Node.js contributors. All rights reserved.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
*/
//# sourceMappingURL=data:application/json;base64,
