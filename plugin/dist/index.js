"use strict";var as=Object.create;var Qe=Object.defineProperty;var os=Object.getOwnPropertyDescriptor;var cs=Object.getOwnPropertyNames;var ls=Object.getPrototypeOf,us=Object.prototype.hasOwnProperty;var J=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),fs=(r,e)=>{for(var t in e)Qe(r,t,{get:e[t],enumerable:!0})},rr=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of cs(e))!us.call(r,s)&&s!==t&&Qe(r,s,{get:()=>e[s],enumerable:!(n=os(e,s))||n.enumerable});return r};var ie=(r,e,t)=>(t=r!=null?as(ls(r)):{},rr(e||!r||!r.__esModule?Qe(t,"default",{value:r,enumerable:!0}):t,r)),hs=r=>rr(Qe({},"__esModule",{value:!0}),r);var or=J((Ma,ar)=>{ar.exports=ir;ir.sync=ps;var nr=require("fs");function ms(r,e){var t=e.pathExt!==void 0?e.pathExt:process.env.PATHEXT;if(!t||(t=t.split(";"),t.indexOf("")!==-1))return!0;for(var n=0;n<t.length;n++){var s=t[n].toLowerCase();if(s&&r.substr(-s.length).toLowerCase()===s)return!0}return!1}function sr(r,e,t){return!r.isSymbolicLink()&&!r.isFile()?!1:ms(e,t)}function ir(r,e,t){nr.stat(r,function(n,s){t(n,n?!1:sr(s,r,e))})}function ps(r,e){return sr(nr.statSync(r),r,e)}});var hr=J((Na,fr)=>{fr.exports=lr;lr.sync=ds;var cr=require("fs");function lr(r,e,t){cr.stat(r,function(n,s){t(n,n?!1:ur(s,e))})}function ds(r,e){return ur(cr.statSync(r),e)}function ur(r,e){return r.isFile()&&ys(r,e)}function ys(r,e){var t=r.mode,n=r.uid,s=r.gid,i=e.uid!==void 0?e.uid:process.getuid&&process.getuid(),a=e.gid!==void 0?e.gid:process.getgid&&process.getgid(),c=parseInt("100",8),l=parseInt("010",8),h=parseInt("001",8),g=c|l,p=t&h||t&l&&s===a||t&c&&n===i||t&g&&i===0;return p}});var pr=J((Wa,mr)=>{var Oa=require("fs"),Ke;process.platform==="win32"||global.TESTING_WINDOWS?Ke=or():Ke=hr();mr.exports=ht;ht.sync=gs;function ht(r,e,t){if(typeof e=="function"&&(t=e,e={}),!t){if(typeof Promise!="function")throw new TypeError("callback not provided");return new Promise(function(n,s){ht(r,e||{},function(i,a){i?s(i):n(a)})})}Ke(r,e||{},function(n,s){n&&(n.code==="EACCES"||e&&e.ignoreErrors)&&(n=null,s=!1),t(n,s)})}function gs(r,e){try{return Ke.sync(r,e||{})}catch(t){if(e&&e.ignoreErrors||t.code==="EACCES")return!1;throw t}}});var kr=J((Ga,wr)=>{var Ie=process.platform==="win32"||process.env.OSTYPE==="cygwin"||process.env.OSTYPE==="msys",dr=require("path"),Ps=Ie?";":":",yr=pr(),gr=r=>Object.assign(new Error(`not found: ${r}`),{code:"ENOENT"}),Pr=(r,e)=>{let t=e.colon||Ps,n=r.match(/\//)||Ie&&r.match(/\\/)?[""]:[...Ie?[process.cwd()]:[],...(e.path||process.env.PATH||"").split(t)],s=Ie?e.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",i=Ie?s.split(t):[""];return Ie&&r.indexOf(".")!==-1&&i[0]!==""&&i.unshift(""),{pathEnv:n,pathExt:i,pathExtExe:s}},Sr=(r,e,t)=>{typeof e=="function"&&(t=e,e={}),e||(e={});let{pathEnv:n,pathExt:s,pathExtExe:i}=Pr(r,e),a=[],c=h=>new Promise((g,p)=>{if(h===n.length)return e.all&&a.length?g(a):p(gr(r));let S=n[h],E=/^".*"$/.test(S)?S.slice(1,-1):S,T=dr.join(E,r),L=!E&&/^\.[\\\/]/.test(r)?r.slice(0,2)+T:T;g(l(L,h,0))}),l=(h,g,p)=>new Promise((S,E)=>{if(p===s.length)return S(c(g+1));let T=s[p];yr(h+T,{pathExt:i},(L,O)=>{if(!L&&O)if(e.all)a.push(h+T);else return S(h+T);return S(l(h,g,p+1))})});return t?c(0).then(h=>t(null,h),t):c(0)},Ss=(r,e)=>{e=e||{};let{pathEnv:t,pathExt:n,pathExtExe:s}=Pr(r,e),i=[];for(let a=0;a<t.length;a++){let c=t[a],l=/^".*"$/.test(c)?c.slice(1,-1):c,h=dr.join(l,r),g=!l&&/^\.[\\\/]/.test(r)?r.slice(0,2)+h:h;for(let p=0;p<n.length;p++){let S=g+n[p];try{if(yr.sync(S,{pathExt:s}))if(e.all)i.push(S);else return S}catch{}}}if(e.all&&i.length)return i;if(e.nothrow)return null;throw gr(r)};wr.exports=Sr;Sr.sync=Ss});var Er=J((Ja,mt)=>{"use strict";var br=(r={})=>{let e=r.env||process.env;return(r.platform||process.platform)!=="win32"?"PATH":Object.keys(e).reverse().find(n=>n.toUpperCase()==="PATH")||"Path"};mt.exports=br;mt.exports.default=br});var Ir=J((Ua,xr)=>{"use strict";var Tr=require("path"),ws=kr(),ks=Er();function Fr(r,e){let t=r.options.env||process.env,n=process.cwd(),s=r.options.cwd!=null,i=s&&process.chdir!==void 0&&!process.chdir.disabled;if(i)try{process.chdir(r.options.cwd)}catch{}let a;try{a=ws.sync(r.command,{path:t[ks({env:t})],pathExt:e?Tr.delimiter:void 0})}catch{}finally{i&&process.chdir(n)}return a&&(a=Tr.resolve(s?r.options.cwd:"",a)),a}function bs(r){return Fr(r)||Fr(r,!0)}xr.exports=bs});var Ar=J((qa,dt)=>{"use strict";var pt=/([()\][%!^"`<>&|;, *?])/g;function Es(r){return r=r.replace(pt,"^$1"),r}function Ts(r,e){return r=`${r}`,r=r.replace(/(\\*)"/g,'$1$1\\"'),r=r.replace(/(\\*)$/,"$1$1"),r=`"${r}"`,r=r.replace(pt,"^$1"),e&&(r=r.replace(pt,"^$1")),r}dt.exports.command=Es;dt.exports.argument=Ts});var vr=J((Ha,Lr)=>{"use strict";Lr.exports=/^#!(.*)/});var Cr=J((ja,Dr)=>{"use strict";var Fs=vr();Dr.exports=(r="")=>{let e=r.match(Fs);if(!e)return null;let[t,n]=e[0].replace(/#! ?/,"").split(" "),s=t.split("/").pop();return s==="env"?n:n?`${s} ${n}`:s}});var Br=J((Ya,Rr)=>{"use strict";var yt=require("fs"),xs=Cr();function Is(r){let t=Buffer.alloc(150),n;try{n=yt.openSync(r,"r"),yt.readSync(n,t,0,150,0),yt.closeSync(n)}catch{}return xs(t.toString())}Rr.exports=Is});var Wr=J((Qa,Or)=>{"use strict";var As=require("path"),Mr=Ir(),Nr=Ar(),Ls=Br(),vs=process.platform==="win32",Ds=/\.(?:com|exe)$/i,Cs=/node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;function Rs(r){r.file=Mr(r);let e=r.file&&Ls(r.file);return e?(r.args.unshift(r.file),r.command=e,Mr(r)):r.file}function Bs(r){if(!vs)return r;let e=Rs(r),t=!Ds.test(e);if(r.options.forceShell||t){let n=Cs.test(e);r.command=As.normalize(r.command),r.command=Nr.command(r.command),r.args=r.args.map(i=>Nr.argument(i,n));let s=[r.command].concat(r.args).join(" ");r.args=["/d","/s","/c",`"${s}"`],r.command=process.env.comspec||"cmd.exe",r.options.windowsVerbatimArguments=!0}return r}function Ms(r,e,t){e&&!Array.isArray(e)&&(t=e,e=null),e=e?e.slice(0):[],t=Object.assign({},t);let n={command:r,args:e,options:t,file:void 0,original:{command:r,args:e}};return t.shell?n:Bs(n)}Or.exports=Ms});var Ur=J((Ka,Jr)=>{"use strict";var gt=process.platform==="win32";function Pt(r,e){return Object.assign(new Error(`${e} ${r.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${e} ${r.command}`,path:r.command,spawnargs:r.args})}function Ns(r,e){if(!gt)return;let t=r.emit;r.emit=function(n,s){if(n==="exit"){let i=Gr(s,e,"spawn");if(i)return t.call(r,"error",i)}return t.apply(r,arguments)}}function Gr(r,e){return gt&&r===1&&!e.file?Pt(e.original,"spawn"):null}function Os(r,e){return gt&&r===1&&!e.file?Pt(e.original,"spawnSync"):null}Jr.exports={hookChildProcess:Ns,verifyENOENT:Gr,verifyENOENTSync:Os,notFoundError:Pt}});var jr=J((Va,Ae)=>{"use strict";var qr=require("child_process"),St=Wr(),wt=Ur();function Hr(r,e,t){let n=St(r,e,t),s=qr.spawn(n.command,n.args,n.options);return wt.hookChildProcess(s,n),s}function Ws(r,e,t){let n=St(r,e,t),s=qr.spawnSync(n.command,n.args,n.options);return s.error=s.error||wt.verifyENOENTSync(s.status,n),s}Ae.exports=Hr;Ae.exports.spawn=Hr;Ae.exports.sync=Ws;Ae.exports._parse=St;Ae.exports._enoent=wt});var rn=J((po,Ze)=>{Ze.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"];process.platform!=="win32"&&Ze.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT");process.platform==="linux"&&Ze.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")});var cn=J((yo,Ce)=>{var M=global.process,ke=function(r){return r&&typeof r=="object"&&typeof r.removeListener=="function"&&typeof r.emit=="function"&&typeof r.reallyExit=="function"&&typeof r.listeners=="function"&&typeof r.kill=="function"&&typeof r.pid=="number"&&typeof r.on=="function"};ke(M)?(nn=require("assert"),ve=rn(),sn=/^win/i.test(M.platform),We=require("events"),typeof We!="function"&&(We=We.EventEmitter),M.__signal_exit_emitter__?V=M.__signal_exit_emitter__:(V=M.__signal_exit_emitter__=new We,V.count=0,V.emitted={}),V.infinite||(V.setMaxListeners(1/0),V.infinite=!0),Ce.exports=function(r,e){if(!ke(global.process))return function(){};nn.equal(typeof r,"function","a callback must be provided for exit handler"),De===!1&&Ft();var t="exit";e&&e.alwaysLast&&(t="afterexit");var n=function(){V.removeListener(t,r),V.listeners("exit").length===0&&V.listeners("afterexit").length===0&&_e()};return V.on(t,r),n},_e=function(){!De||!ke(global.process)||(De=!1,ve.forEach(function(e){try{M.removeListener(e,$e[e])}catch{}}),M.emit=et,M.reallyExit=xt,V.count-=1)},Ce.exports.unload=_e,be=function(e,t,n){V.emitted[e]||(V.emitted[e]=!0,V.emit(e,t,n))},$e={},ve.forEach(function(r){$e[r]=function(){if(!!ke(global.process)){var t=M.listeners(r);t.length===V.count&&(_e(),be("exit",null,r),be("afterexit",null,r),sn&&r==="SIGHUP"&&(r="SIGINT"),M.kill(M.pid,r))}}}),Ce.exports.signals=function(){return ve},De=!1,Ft=function(){De||!ke(global.process)||(De=!0,V.count+=1,ve=ve.filter(function(e){try{return M.on(e,$e[e]),!0}catch{return!1}}),M.emit=on,M.reallyExit=an)},Ce.exports.load=Ft,xt=M.reallyExit,an=function(e){!ke(global.process)||(M.exitCode=e||0,be("exit",M.exitCode,null),be("afterexit",M.exitCode,null),xt.call(M,M.exitCode))},et=M.emit,on=function(e,t){if(e==="exit"&&ke(global.process)){t!==void 0&&(M.exitCode=t);var n=et.apply(this,arguments);return be("exit",M.exitCode,null),be("afterexit",M.exitCode,null),n}else return et.apply(this,arguments)}):Ce.exports=function(){return function(){}};var nn,ve,sn,We,V,_e,be,$e,De,Ft,xt,an,et,on});var gn=J((So,yn)=>{"use strict";var{PassThrough:ci}=require("stream");yn.exports=r=>{r={...r};let{array:e}=r,{encoding:t}=r,n=t==="buffer",s=!1;e?s=!(t||n):t=t||"utf8",n&&(t=null);let i=new ci({objectMode:s});t&&i.setEncoding(t);let a=0,c=[];return i.on("data",l=>{c.push(l),s?a=c.length:a+=l.length}),i.getBufferedValue=()=>e?c:n?Buffer.concat(c,a):c.join(""),i.getBufferedLength=()=>a,i}});var Pn=J((wo,Ge)=>{"use strict";var{constants:li}=require("buffer"),ui=require("stream"),{promisify:fi}=require("util"),hi=gn(),mi=fi(ui.pipeline),tt=class extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}};async function At(r,e){if(!r)throw new Error("Expected a stream");e={maxBuffer:1/0,...e};let{maxBuffer:t}=e,n=hi(e);return await new Promise((s,i)=>{let a=c=>{c&&n.getBufferedLength()<=li.MAX_LENGTH&&(c.bufferedData=n.getBufferedValue()),i(c)};(async()=>{try{await mi(r,n),s()}catch(c){a(c)}})(),n.on("data",()=>{n.getBufferedLength()>t&&a(new tt)})}),n.getBufferedValue()}Ge.exports=At;Ge.exports.buffer=(r,e)=>At(r,{...e,encoding:"buffer"});Ge.exports.array=(r,e)=>At(r,{...e,array:!0});Ge.exports.MaxBufferError=tt});var wn=J((ko,Sn)=>{"use strict";var{PassThrough:pi}=require("stream");Sn.exports=function(){var r=[],e=new pi({objectMode:!0});return e.setMaxListeners(0),e.add=t,e.isEmpty=n,e.on("unpipe",s),Array.prototype.slice.call(arguments).forEach(t),e;function t(i){return Array.isArray(i)?(i.forEach(t),this):(r.push(i),i.once("end",s.bind(null,i)),i.once("error",e.emit.bind(e,"error")),i.pipe(e,{end:!1}),this)}function n(){return r.length==0}function s(i){r=r.filter(function(a){return a!==i}),!r.length&&e.readable&&e.end()}}});var ts=J(fe=>{"use strict";Object.defineProperty(fe,"__esModule",{value:!0});var bi=require("zlib"),Gn=require("path"),qe=require("module"),se=require("url"),Rn=require("util"),Ei=require("assert"),Ti=require("fs"),Fi=require("crypto"),xi=require("os"),lt=r=>r&&typeof r=="object"&&"default"in r?r:{default:r},Jn=lt(bi),it=lt(Gn),Ii=lt(Ei),Ai=lt(Ti),Un=(r=>(r.HARD="HARD",r.SOFT="SOFT",r))(Un||{}),Li=456789e3,Jt={root:"/",dot:"."},at={home:"~",nodeModules:"node_modules",manifest:"package.json",lockfile:"yarn.lock",virtual:"__virtual__",pnpJs:".pnp.js",pnpCjs:".pnp.cjs",pnpData:".pnp.data.json",pnpEsmLoader:".pnp.loader.mjs",rc:".yarnrc.yml"},m=Object.create(it.default),x=Object.create(it.default.posix);m.cwd=()=>process.cwd();x.cwd=()=>Vt(process.cwd());x.resolve=(...r)=>r.length>0&&x.isAbsolute(r[0])?it.default.posix.resolve(...r):it.default.posix.resolve(x.cwd(),...r);var qn=function(r,e,t){return e=r.normalize(e),t=r.normalize(t),e===t?".":(e.endsWith(r.sep)||(e=e+r.sep),t.startsWith(e)?t.slice(e.length):null)};m.fromPortablePath=Hn;m.toPortablePath=Vt;m.contains=(r,e)=>qn(m,r,e);x.contains=(r,e)=>qn(x,r,e);var vi=/^([a-zA-Z]:.*)$/,Di=/^\/\/(\.\/)?(.*)$/,Ci=/^\/([a-zA-Z]:.*)$/,Ri=/^\/unc\/(\.dot\/)?(.*)$/;function Hn(r){if(process.platform!=="win32")return r;let e,t;if(e=r.match(Ci))r=e[1];else if(t=r.match(Ri))r=`\\\\${t[1]?".\\":""}${t[2]}`;else return r;return r.replace(/\//g,"\\")}function Vt(r){if(process.platform!=="win32")return r;r=r.replace(/\\/g,"/");let e,t;return(e=r.match(vi))?r=`/${e[1]}`:(t=r.match(Di))&&(r=`/unc/${t[1]?".dot/":""}${t[2]}`),r}function jn(r,e){return r===m?Hn(e):Vt(e)}var Fe=new Date(Li*1e3),Bi=Fe.getTime();async function Mi(r,e,t,n,s){let i=r.pathUtils.normalize(e),a=t.pathUtils.normalize(n),c=[],l=[],{atime:h,mtime:g}=s.stableTime?{atime:Fe,mtime:Fe}:await t.lstatPromise(a);await r.mkdirpPromise(r.pathUtils.dirname(e),{utimes:[h,g]}),await Ut(c,l,r,i,t,a,{...s,didParentExist:!0});for(let p of c)await p();await Promise.all(l.map(p=>p()))}async function Ut(r,e,t,n,s,i,a){var c,l,h;let g=a.didParentExist?await Yn(t,n):null,p=await s.lstatPromise(i),{atime:S,mtime:E}=a.stableTime?{atime:Fe,mtime:Fe}:p,T;switch(!0){case p.isDirectory():T=await Ni(r,e,t,n,g,s,i,p,a);break;case p.isFile():T=await Gi(r,e,t,n,g,s,i,p,a);break;case p.isSymbolicLink():T=await Ji(r,e,t,n,g,s,i,p,a);break;default:throw new Error(`Unsupported file type (${p.mode})`)}return(((c=a.linkStrategy)==null?void 0:c.type)!=="HardlinkFromIndex"||!p.isFile())&&((T||((l=g==null?void 0:g.mtime)==null?void 0:l.getTime())!==E.getTime()||((h=g==null?void 0:g.atime)==null?void 0:h.getTime())!==S.getTime())&&(e.push(()=>t.lutimesPromise(n,S,E)),T=!0),(g===null||(g.mode&511)!==(p.mode&511))&&(e.push(()=>t.chmodPromise(n,p.mode&511)),T=!0)),T}async function Yn(r,e){try{return await r.lstatPromise(e)}catch{return null}}async function Ni(r,e,t,n,s,i,a,c,l){if(s!==null&&!s.isDirectory())if(l.overwrite)r.push(async()=>t.removePromise(n)),s=null;else return!1;let h=!1;s===null&&(r.push(async()=>{try{await t.mkdirPromise(n,{mode:c.mode})}catch(S){if(S.code!=="EEXIST")throw S}}),h=!0);let g=await i.readdirPromise(a),p=l.didParentExist&&!s?{...l,didParentExist:!1}:l;if(l.stableSort)for(let S of g.sort())await Ut(r,e,t,t.pathUtils.join(n,S),i,i.pathUtils.join(a,S),p)&&(h=!0);else(await Promise.all(g.map(async E=>{await Ut(r,e,t,t.pathUtils.join(n,E),i,i.pathUtils.join(a,E),p)}))).some(E=>E)&&(h=!0);return h}async function Oi(r,e,t,n,s,i,a,c,l,h){let g=await i.checksumFilePromise(a,{algorithm:"sha1"}),p=t.pathUtils.join(h.indexPath,g.slice(0,2),`${g}.dat`),S;(v=>{v[v.Lock=0]="Lock",v[v.Rename=1]="Rename"})(S||(S={}));let E=1,T=await Yn(t,p);if(s){let v=T&&s.dev===T.dev&&s.ino===T.ino,q=(T==null?void 0:T.mtimeMs)!==Bi;if(v&&q&&h.autoRepair&&(E=0,T=null),!v)if(l.overwrite)r.push(async()=>t.removePromise(n)),s=null;else return!1}let L=!T&&E===1?`${p}.${Math.floor(Math.random()*4294967296).toString(16).padStart(8,"0")}`:null,O=!1;return r.push(async()=>{if(!T&&(E===0&&await t.lockPromise(p,async()=>{let v=await i.readFilePromise(a);await t.writeFilePromise(p,v)}),E===1&&L)){let v=await i.readFilePromise(a);await t.writeFilePromise(L,v);try{await t.linkPromise(L,p)}catch(q){if(q.code==="EEXIST")O=!0,await t.unlinkPromise(L);else throw q}}s||await t.linkPromise(p,n)}),e.push(async()=>{T||await t.lutimesPromise(p,Fe,Fe),L&&!O&&await t.unlinkPromise(L)}),!1}async function Wi(r,e,t,n,s,i,a,c,l){if(s!==null)if(l.overwrite)r.push(async()=>t.removePromise(n)),s=null;else return!1;return r.push(async()=>{let h=await i.readFilePromise(a);await t.writeFilePromise(n,h)}),!0}async function Gi(r,e,t,n,s,i,a,c,l){var h;return((h=l.linkStrategy)==null?void 0:h.type)==="HardlinkFromIndex"?Oi(r,e,t,n,s,i,a,c,l,l.linkStrategy):Wi(r,e,t,n,s,i,a,c,l)}async function Ji(r,e,t,n,s,i,a,c,l){if(s!==null)if(l.overwrite)r.push(async()=>t.removePromise(n)),s=null;else return!1;return r.push(async()=>{await t.symlinkPromise(jn(t.pathUtils,await i.readlinkPromise(a)),n)}),!0}var ot=class{constructor(e){this.pathUtils=e}async*genTraversePromise(e,{stableSort:t=!1}={}){let n=[e];for(;n.length>0;){let s=n.shift();if((await this.lstatPromise(s)).isDirectory()){let a=await this.readdirPromise(s);if(t)for(let c of a.sort())n.push(this.pathUtils.join(s,c));else throw new Error("Not supported")}else yield s}}async checksumFilePromise(e,{algorithm:t="sha512"}={}){let n=await this.openPromise(e,"r");try{let i=Buffer.allocUnsafeSlow(65536),a=Fi.createHash(t),c=0;for(;(c=await this.readPromise(n,i,0,65536))!==0;)a.update(c===65536?i:i.slice(0,c));return a.digest("hex")}finally{await this.closePromise(n)}}async removePromise(e,{recursive:t=!0,maxRetries:n=5}={}){let s;try{s=await this.lstatPromise(e)}catch(i){if(i.code==="ENOENT")return;throw i}if(s.isDirectory()){if(t){let i=await this.readdirPromise(e);await Promise.all(i.map(a=>this.removePromise(this.pathUtils.resolve(e,a))))}for(let i=0;i<=n;i++)try{await this.rmdirPromise(e);break}catch(a){if(a.code!=="EBUSY"&&a.code!=="ENOTEMPTY")throw a;i<n&&await new Promise(c=>setTimeout(c,i*100))}}else await this.unlinkPromise(e)}removeSync(e,{recursive:t=!0}={}){let n;try{n=this.lstatSync(e)}catch(s){if(s.code==="ENOENT")return;throw s}if(n.isDirectory()){if(t)for(let s of this.readdirSync(e))this.removeSync(this.pathUtils.resolve(e,s));this.rmdirSync(e)}else this.unlinkSync(e)}async mkdirpPromise(e,{chmod:t,utimes:n}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let s=e.split(this.pathUtils.sep),i;for(let a=2;a<=s.length;++a){let c=s.slice(0,a).join(this.pathUtils.sep);if(!this.existsSync(c)){try{await this.mkdirPromise(c)}catch(l){if(l.code==="EEXIST")continue;throw l}if(i??(i=c),t!=null&&await this.chmodPromise(c,t),n!=null)await this.utimesPromise(c,n[0],n[1]);else{let l=await this.statPromise(this.pathUtils.dirname(c));await this.utimesPromise(c,l.atime,l.mtime)}}}return i}mkdirpSync(e,{chmod:t,utimes:n}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let s=e.split(this.pathUtils.sep),i;for(let a=2;a<=s.length;++a){let c=s.slice(0,a).join(this.pathUtils.sep);if(!this.existsSync(c)){try{this.mkdirSync(c)}catch(l){if(l.code==="EEXIST")continue;throw l}if(i??(i=c),t!=null&&this.chmodSync(c,t),n!=null)this.utimesSync(c,n[0],n[1]);else{let l=this.statSync(this.pathUtils.dirname(c));this.utimesSync(c,l.atime,l.mtime)}}}return i}async copyPromise(e,t,{baseFs:n=this,overwrite:s=!0,stableSort:i=!1,stableTime:a=!1,linkStrategy:c=null}={}){return await Mi(this,e,n,t,{overwrite:s,stableSort:i,stableTime:a,linkStrategy:c})}copySync(e,t,{baseFs:n=this,overwrite:s=!0}={}){let i=n.lstatSync(t),a=this.existsSync(e);if(i.isDirectory()){this.mkdirpSync(e);let l=n.readdirSync(t);for(let h of l)this.copySync(this.pathUtils.join(e,h),n.pathUtils.join(t,h),{baseFs:n,overwrite:s})}else if(i.isFile()){if(!a||s){a&&this.removeSync(e);let l=n.readFileSync(t);this.writeFileSync(e,l)}}else if(i.isSymbolicLink()){if(!a||s){a&&this.removeSync(e);let l=n.readlinkSync(t);this.symlinkSync(jn(this.pathUtils,l),e)}}else throw new Error(`Unsupported file type (file: ${t}, mode: 0o${i.mode.toString(8).padStart(6,"0")})`);let c=i.mode&511;this.chmodSync(e,c)}async changeFilePromise(e,t,n={}){return Buffer.isBuffer(t)?this.changeFileBufferPromise(e,t,n):this.changeFileTextPromise(e,t,n)}async changeFileBufferPromise(e,t,{mode:n}={}){let s=Buffer.alloc(0);try{s=await this.readFilePromise(e)}catch{}Buffer.compare(s,t)!==0&&await this.writeFilePromise(e,t,{mode:n})}async changeFileTextPromise(e,t,{automaticNewlines:n,mode:s}={}){let i="";try{i=await this.readFilePromise(e,"utf8")}catch{}let a=n?Bn(i,t):t;i!==a&&await this.writeFilePromise(e,a,{mode:s})}changeFileSync(e,t,n={}){return Buffer.isBuffer(t)?this.changeFileBufferSync(e,t,n):this.changeFileTextSync(e,t,n)}changeFileBufferSync(e,t,{mode:n}={}){let s=Buffer.alloc(0);try{s=this.readFileSync(e)}catch{}Buffer.compare(s,t)!==0&&this.writeFileSync(e,t,{mode:n})}changeFileTextSync(e,t,{automaticNewlines:n=!1,mode:s}={}){let i="";try{i=this.readFileSync(e,"utf8")}catch{}let a=n?Bn(i,t):t;i!==a&&this.writeFileSync(e,a,{mode:s})}async movePromise(e,t){try{await this.renamePromise(e,t)}catch(n){if(n.code==="EXDEV")await this.copyPromise(t,e),await this.removePromise(e);else throw n}}moveSync(e,t){try{this.renameSync(e,t)}catch(n){if(n.code==="EXDEV")this.copySync(t,e),this.removeSync(e);else throw n}}async lockPromise(e,t){let n=`${e}.flock`,s=1e3/60,i=Date.now(),a=null,c=async()=>{let l;try{[l]=await this.readJsonPromise(n)}catch{return Date.now()-i<500}try{return process.kill(l,0),!0}catch{return!1}};for(;a===null;)try{a=await this.openPromise(n,"wx")}catch(l){if(l.code==="EEXIST"){if(!await c())try{await this.unlinkPromise(n);continue}catch{}if(Date.now()-i<60*1e3)await new Promise(h=>setTimeout(h,s));else throw new Error(`Couldn't acquire a lock in a reasonable time (via ${n})`)}else throw l}await this.writePromise(a,JSON.stringify([process.pid]));try{return await t()}finally{try{await this.closePromise(a),await this.unlinkPromise(n)}catch{}}}async readJsonPromise(e){let t=await this.readFilePromise(e,"utf8");try{return JSON.parse(t)}catch(n){throw n.message+=` (in ${e})`,n}}readJsonSync(e){let t=this.readFileSync(e,"utf8");try{return JSON.parse(t)}catch(n){throw n.message+=` (in ${e})`,n}}async writeJsonPromise(e,t){return await this.writeFilePromise(e,`${JSON.stringify(t,null,2)}
`)}writeJsonSync(e,t){return this.writeFileSync(e,`${JSON.stringify(t,null,2)}
`)}async preserveTimePromise(e,t){let n=await this.lstatPromise(e),s=await t();typeof s<"u"&&(e=s),await this.lutimesPromise(e,n.atime,n.mtime)}async preserveTimeSync(e,t){let n=this.lstatSync(e),s=t();typeof s<"u"&&(e=s),this.lutimesSync(e,n.atime,n.mtime)}},qt=class extends ot{constructor(){super(x)}};function Ui(r){let e=r.match(/\r?\n/g);if(e===null)return xi.EOL;let t=e.filter(s=>s===`\r
`).length,n=e.length-t;return t>n?`\r
`:`
`}function Bn(r,e){return e.replace(/\r?\n/g,Ui(r))}var Ht=class extends ot{getExtractHint(e){return this.baseFs.getExtractHint(e)}resolve(e){return this.mapFromBase(this.baseFs.resolve(this.mapToBase(e)))}getRealPath(){return this.mapFromBase(this.baseFs.getRealPath())}async openPromise(e,t,n){return this.baseFs.openPromise(this.mapToBase(e),t,n)}openSync(e,t,n){return this.baseFs.openSync(this.mapToBase(e),t,n)}async opendirPromise(e,t){return Object.assign(await this.baseFs.opendirPromise(this.mapToBase(e),t),{path:e})}opendirSync(e,t){return Object.assign(this.baseFs.opendirSync(this.mapToBase(e),t),{path:e})}async readPromise(e,t,n,s,i){return await this.baseFs.readPromise(e,t,n,s,i)}readSync(e,t,n,s,i){return this.baseFs.readSync(e,t,n,s,i)}async writePromise(e,t,n,s,i){return typeof t=="string"?await this.baseFs.writePromise(e,t,n):await this.baseFs.writePromise(e,t,n,s,i)}writeSync(e,t,n,s,i){return typeof t=="string"?this.baseFs.writeSync(e,t,n):this.baseFs.writeSync(e,t,n,s,i)}async closePromise(e){return this.baseFs.closePromise(e)}closeSync(e){this.baseFs.closeSync(e)}createReadStream(e,t){return this.baseFs.createReadStream(e!==null?this.mapToBase(e):e,t)}createWriteStream(e,t){return this.baseFs.createWriteStream(e!==null?this.mapToBase(e):e,t)}async realpathPromise(e){return this.mapFromBase(await this.baseFs.realpathPromise(this.mapToBase(e)))}realpathSync(e){return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(e)))}async existsPromise(e){return this.baseFs.existsPromise(this.mapToBase(e))}existsSync(e){return this.baseFs.existsSync(this.mapToBase(e))}accessSync(e,t){return this.baseFs.accessSync(this.mapToBase(e),t)}async accessPromise(e,t){return this.baseFs.accessPromise(this.mapToBase(e),t)}async statPromise(e,t){return this.baseFs.statPromise(this.mapToBase(e),t)}statSync(e,t){return this.baseFs.statSync(this.mapToBase(e),t)}async fstatPromise(e,t){return this.baseFs.fstatPromise(e,t)}fstatSync(e,t){return this.baseFs.fstatSync(e,t)}lstatPromise(e,t){return this.baseFs.lstatPromise(this.mapToBase(e),t)}lstatSync(e,t){return this.baseFs.lstatSync(this.mapToBase(e),t)}async fchmodPromise(e,t){return this.baseFs.fchmodPromise(e,t)}fchmodSync(e,t){return this.baseFs.fchmodSync(e,t)}async chmodPromise(e,t){return this.baseFs.chmodPromise(this.mapToBase(e),t)}chmodSync(e,t){return this.baseFs.chmodSync(this.mapToBase(e),t)}async fchownPromise(e,t,n){return this.baseFs.fchownPromise(e,t,n)}fchownSync(e,t,n){return this.baseFs.fchownSync(e,t,n)}async chownPromise(e,t,n){return this.baseFs.chownPromise(this.mapToBase(e),t,n)}chownSync(e,t,n){return this.baseFs.chownSync(this.mapToBase(e),t,n)}async renamePromise(e,t){return this.baseFs.renamePromise(this.mapToBase(e),this.mapToBase(t))}renameSync(e,t){return this.baseFs.renameSync(this.mapToBase(e),this.mapToBase(t))}async copyFilePromise(e,t,n=0){return this.baseFs.copyFilePromise(this.mapToBase(e),this.mapToBase(t),n)}copyFileSync(e,t,n=0){return this.baseFs.copyFileSync(this.mapToBase(e),this.mapToBase(t),n)}async appendFilePromise(e,t,n){return this.baseFs.appendFilePromise(this.fsMapToBase(e),t,n)}appendFileSync(e,t,n){return this.baseFs.appendFileSync(this.fsMapToBase(e),t,n)}async writeFilePromise(e,t,n){return this.baseFs.writeFilePromise(this.fsMapToBase(e),t,n)}writeFileSync(e,t,n){return this.baseFs.writeFileSync(this.fsMapToBase(e),t,n)}async unlinkPromise(e){return this.baseFs.unlinkPromise(this.mapToBase(e))}unlinkSync(e){return this.baseFs.unlinkSync(this.mapToBase(e))}async utimesPromise(e,t,n){return this.baseFs.utimesPromise(this.mapToBase(e),t,n)}utimesSync(e,t,n){return this.baseFs.utimesSync(this.mapToBase(e),t,n)}async lutimesPromise(e,t,n){return this.baseFs.lutimesPromise(this.mapToBase(e),t,n)}lutimesSync(e,t,n){return this.baseFs.lutimesSync(this.mapToBase(e),t,n)}async mkdirPromise(e,t){return this.baseFs.mkdirPromise(this.mapToBase(e),t)}mkdirSync(e,t){return this.baseFs.mkdirSync(this.mapToBase(e),t)}async rmdirPromise(e,t){return this.baseFs.rmdirPromise(this.mapToBase(e),t)}rmdirSync(e,t){return this.baseFs.rmdirSync(this.mapToBase(e),t)}async linkPromise(e,t){return this.baseFs.linkPromise(this.mapToBase(e),this.mapToBase(t))}linkSync(e,t){return this.baseFs.linkSync(this.mapToBase(e),this.mapToBase(t))}async symlinkPromise(e,t,n){let s=this.mapToBase(t);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkPromise(this.mapToBase(e),s,n);let i=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(t),e)),a=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(s),i);return this.baseFs.symlinkPromise(a,s,n)}symlinkSync(e,t,n){let s=this.mapToBase(t);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkSync(this.mapToBase(e),s,n);let i=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(t),e)),a=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(s),i);return this.baseFs.symlinkSync(a,s,n)}async readFilePromise(e,t){return this.baseFs.readFilePromise(this.fsMapToBase(e),t)}readFileSync(e,t){return this.baseFs.readFileSync(this.fsMapToBase(e),t)}async readdirPromise(e,t){return this.baseFs.readdirPromise(this.mapToBase(e),t)}readdirSync(e,t){return this.baseFs.readdirSync(this.mapToBase(e),t)}async readlinkPromise(e){return this.mapFromBase(await this.baseFs.readlinkPromise(this.mapToBase(e)))}readlinkSync(e){return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(e)))}async truncatePromise(e,t){return this.baseFs.truncatePromise(this.mapToBase(e),t)}truncateSync(e,t){return this.baseFs.truncateSync(this.mapToBase(e),t)}async ftruncatePromise(e,t){return this.baseFs.ftruncatePromise(e,t)}ftruncateSync(e,t){return this.baseFs.ftruncateSync(e,t)}watch(e,t,n){return this.baseFs.watch(this.mapToBase(e),t,n)}watchFile(e,t,n){return this.baseFs.watchFile(this.mapToBase(e),t,n)}unwatchFile(e,t){return this.baseFs.unwatchFile(this.mapToBase(e),t)}fsMapToBase(e){return typeof e=="number"?e:this.mapToBase(e)}},jt=class extends qt{constructor(e=Ai.default){super(),this.realFs=e}getExtractHint(){return!1}getRealPath(){return Jt.root}resolve(e){return x.resolve(e)}async openPromise(e,t,n){return await new Promise((s,i)=>{this.realFs.open(m.fromPortablePath(e),t,n,this.makeCallback(s,i))})}openSync(e,t,n){return this.realFs.openSync(m.fromPortablePath(e),t,n)}async opendirPromise(e,t){return await new Promise((n,s)=>{typeof t<"u"?this.realFs.opendir(m.fromPortablePath(e),t,this.makeCallback(n,s)):this.realFs.opendir(m.fromPortablePath(e),this.makeCallback(n,s))}).then(n=>Object.defineProperty(n,"path",{value:e,configurable:!0,writable:!0}))}opendirSync(e,t){let n=typeof t<"u"?this.realFs.opendirSync(m.fromPortablePath(e),t):this.realFs.opendirSync(m.fromPortablePath(e));return Object.defineProperty(n,"path",{value:e,configurable:!0,writable:!0})}async readPromise(e,t,n=0,s=0,i=-1){return await new Promise((a,c)=>{this.realFs.read(e,t,n,s,i,(l,h)=>{l?c(l):a(h)})})}readSync(e,t,n,s,i){return this.realFs.readSync(e,t,n,s,i)}async writePromise(e,t,n,s,i){return await new Promise((a,c)=>typeof t=="string"?this.realFs.write(e,t,n,this.makeCallback(a,c)):this.realFs.write(e,t,n,s,i,this.makeCallback(a,c)))}writeSync(e,t,n,s,i){return typeof t=="string"?this.realFs.writeSync(e,t,n):this.realFs.writeSync(e,t,n,s,i)}async closePromise(e){await new Promise((t,n)=>{this.realFs.close(e,this.makeCallback(t,n))})}closeSync(e){this.realFs.closeSync(e)}createReadStream(e,t){let n=e!==null?m.fromPortablePath(e):e;return this.realFs.createReadStream(n,t)}createWriteStream(e,t){let n=e!==null?m.fromPortablePath(e):e;return this.realFs.createWriteStream(n,t)}async realpathPromise(e){return await new Promise((t,n)=>{this.realFs.realpath(m.fromPortablePath(e),{},this.makeCallback(t,n))}).then(t=>m.toPortablePath(t))}realpathSync(e){return m.toPortablePath(this.realFs.realpathSync(m.fromPortablePath(e),{}))}async existsPromise(e){return await new Promise(t=>{this.realFs.exists(m.fromPortablePath(e),t)})}accessSync(e,t){return this.realFs.accessSync(m.fromPortablePath(e),t)}async accessPromise(e,t){return await new Promise((n,s)=>{this.realFs.access(m.fromPortablePath(e),t,this.makeCallback(n,s))})}existsSync(e){return this.realFs.existsSync(m.fromPortablePath(e))}async statPromise(e,t){return await new Promise((n,s)=>{t?this.realFs.stat(m.fromPortablePath(e),t,this.makeCallback(n,s)):this.realFs.stat(m.fromPortablePath(e),this.makeCallback(n,s))})}statSync(e,t){return t?this.realFs.statSync(m.fromPortablePath(e),t):this.realFs.statSync(m.fromPortablePath(e))}async fstatPromise(e,t){return await new Promise((n,s)=>{t?this.realFs.fstat(e,t,this.makeCallback(n,s)):this.realFs.fstat(e,this.makeCallback(n,s))})}fstatSync(e,t){return t?this.realFs.fstatSync(e,t):this.realFs.fstatSync(e)}async lstatPromise(e,t){return await new Promise((n,s)=>{t?this.realFs.lstat(m.fromPortablePath(e),t,this.makeCallback(n,s)):this.realFs.lstat(m.fromPortablePath(e),this.makeCallback(n,s))})}lstatSync(e,t){return t?this.realFs.lstatSync(m.fromPortablePath(e),t):this.realFs.lstatSync(m.fromPortablePath(e))}async fchmodPromise(e,t){return await new Promise((n,s)=>{this.realFs.fchmod(e,t,this.makeCallback(n,s))})}fchmodSync(e,t){return this.realFs.fchmodSync(e,t)}async chmodPromise(e,t){return await new Promise((n,s)=>{this.realFs.chmod(m.fromPortablePath(e),t,this.makeCallback(n,s))})}chmodSync(e,t){return this.realFs.chmodSync(m.fromPortablePath(e),t)}async fchownPromise(e,t,n){return await new Promise((s,i)=>{this.realFs.fchown(e,t,n,this.makeCallback(s,i))})}fchownSync(e,t,n){return this.realFs.fchownSync(e,t,n)}async chownPromise(e,t,n){return await new Promise((s,i)=>{this.realFs.chown(m.fromPortablePath(e),t,n,this.makeCallback(s,i))})}chownSync(e,t,n){return this.realFs.chownSync(m.fromPortablePath(e),t,n)}async renamePromise(e,t){return await new Promise((n,s)=>{this.realFs.rename(m.fromPortablePath(e),m.fromPortablePath(t),this.makeCallback(n,s))})}renameSync(e,t){return this.realFs.renameSync(m.fromPortablePath(e),m.fromPortablePath(t))}async copyFilePromise(e,t,n=0){return await new Promise((s,i)=>{this.realFs.copyFile(m.fromPortablePath(e),m.fromPortablePath(t),n,this.makeCallback(s,i))})}copyFileSync(e,t,n=0){return this.realFs.copyFileSync(m.fromPortablePath(e),m.fromPortablePath(t),n)}async appendFilePromise(e,t,n){return await new Promise((s,i)=>{let a=typeof e=="string"?m.fromPortablePath(e):e;n?this.realFs.appendFile(a,t,n,this.makeCallback(s,i)):this.realFs.appendFile(a,t,this.makeCallback(s,i))})}appendFileSync(e,t,n){let s=typeof e=="string"?m.fromPortablePath(e):e;n?this.realFs.appendFileSync(s,t,n):this.realFs.appendFileSync(s,t)}async writeFilePromise(e,t,n){return await new Promise((s,i)=>{let a=typeof e=="string"?m.fromPortablePath(e):e;n?this.realFs.writeFile(a,t,n,this.makeCallback(s,i)):this.realFs.writeFile(a,t,this.makeCallback(s,i))})}writeFileSync(e,t,n){let s=typeof e=="string"?m.fromPortablePath(e):e;n?this.realFs.writeFileSync(s,t,n):this.realFs.writeFileSync(s,t)}async unlinkPromise(e){return await new Promise((t,n)=>{this.realFs.unlink(m.fromPortablePath(e),this.makeCallback(t,n))})}unlinkSync(e){return this.realFs.unlinkSync(m.fromPortablePath(e))}async utimesPromise(e,t,n){return await new Promise((s,i)=>{this.realFs.utimes(m.fromPortablePath(e),t,n,this.makeCallback(s,i))})}utimesSync(e,t,n){this.realFs.utimesSync(m.fromPortablePath(e),t,n)}async lutimesPromise(e,t,n){return await new Promise((s,i)=>{this.realFs.lutimes(m.fromPortablePath(e),t,n,this.makeCallback(s,i))})}lutimesSync(e,t,n){this.realFs.lutimesSync(m.fromPortablePath(e),t,n)}async mkdirPromise(e,t){return await new Promise((n,s)=>{this.realFs.mkdir(m.fromPortablePath(e),t,this.makeCallback(n,s))})}mkdirSync(e,t){return this.realFs.mkdirSync(m.fromPortablePath(e),t)}async rmdirPromise(e,t){return await new Promise((n,s)=>{t?this.realFs.rmdir(m.fromPortablePath(e),t,this.makeCallback(n,s)):this.realFs.rmdir(m.fromPortablePath(e),this.makeCallback(n,s))})}rmdirSync(e,t){return this.realFs.rmdirSync(m.fromPortablePath(e),t)}async linkPromise(e,t){return await new Promise((n,s)=>{this.realFs.link(m.fromPortablePath(e),m.fromPortablePath(t),this.makeCallback(n,s))})}linkSync(e,t){return this.realFs.linkSync(m.fromPortablePath(e),m.fromPortablePath(t))}async symlinkPromise(e,t,n){return await new Promise((s,i)=>{this.realFs.symlink(m.fromPortablePath(e.replace(/\/+$/,"")),m.fromPortablePath(t),n,this.makeCallback(s,i))})}symlinkSync(e,t,n){return this.realFs.symlinkSync(m.fromPortablePath(e.replace(/\/+$/,"")),m.fromPortablePath(t),n)}async readFilePromise(e,t){return await new Promise((n,s)=>{let i=typeof e=="string"?m.fromPortablePath(e):e;this.realFs.readFile(i,t,this.makeCallback(n,s))})}readFileSync(e,t){let n=typeof e=="string"?m.fromPortablePath(e):e;return this.realFs.readFileSync(n,t)}async readdirPromise(e,t){return await new Promise((n,s)=>{t!=null&&t.withFileTypes?this.realFs.readdir(m.fromPortablePath(e),{withFileTypes:!0},this.makeCallback(n,s)):this.realFs.readdir(m.fromPortablePath(e),this.makeCallback(i=>n(i),s))})}readdirSync(e,t){return t!=null&&t.withFileTypes?this.realFs.readdirSync(m.fromPortablePath(e),{withFileTypes:!0}):this.realFs.readdirSync(m.fromPortablePath(e))}async readlinkPromise(e){return await new Promise((t,n)=>{this.realFs.readlink(m.fromPortablePath(e),this.makeCallback(t,n))}).then(t=>m.toPortablePath(t))}readlinkSync(e){return m.toPortablePath(this.realFs.readlinkSync(m.fromPortablePath(e)))}async truncatePromise(e,t){return await new Promise((n,s)=>{this.realFs.truncate(m.fromPortablePath(e),t,this.makeCallback(n,s))})}truncateSync(e,t){return this.realFs.truncateSync(m.fromPortablePath(e),t)}async ftruncatePromise(e,t){return await new Promise((n,s)=>{this.realFs.ftruncate(e,t,this.makeCallback(n,s))})}ftruncateSync(e,t){return this.realFs.ftruncateSync(e,t)}watch(e,t,n){return this.realFs.watch(m.fromPortablePath(e),t,n)}watchFile(e,t,n){return this.realFs.watchFile(m.fromPortablePath(e),t,n)}unwatchFile(e,t){return this.realFs.unwatchFile(m.fromPortablePath(e),t)}makeCallback(e,t){return(n,s)=>{n?t(n):e(s)}}},qi=/^[0-9]+$/,Nt=/^(\/(?:[^/]+\/)*?(?:\$\$virtual|__virtual__))((?:\/((?:[^/]+-)?[a-f0-9]+)(?:\/([^/]+))?)?((?:\/.*)?))$/,Hi=/^([^/]+-)?[a-f0-9]+$/,pe=class extends Ht{constructor({baseFs:e=new jt}={}){super(x),this.baseFs=e}static makeVirtualPath(e,t,n){if(x.basename(e)!=="__virtual__")throw new Error('Assertion failed: Virtual folders must be named "__virtual__"');if(!x.basename(t).match(Hi))throw new Error("Assertion failed: Virtual components must be ended by an hexadecimal hash");let i=x.relative(x.dirname(e),n).split("/"),a=0;for(;a<i.length&&i[a]==="..";)a+=1;let c=i.slice(a);return x.join(e,t,String(a),...c)}static resolveVirtual(e){let t=e.match(Nt);if(!t||!t[3]&&t[5])return e;let n=x.dirname(t[1]);if(!t[3]||!t[4])return n;if(!qi.test(t[4]))return e;let i=Number(t[4]),a="../".repeat(i),c=t[5]||".";return pe.resolveVirtual(x.join(n,a,c))}getExtractHint(e){return this.baseFs.getExtractHint(e)}getRealPath(){return this.baseFs.getRealPath()}realpathSync(e){let t=e.match(Nt);if(!t)return this.baseFs.realpathSync(e);if(!t[5])return e;let n=this.baseFs.realpathSync(this.mapToBase(e));return pe.makeVirtualPath(t[1],t[3],n)}async realpathPromise(e){let t=e.match(Nt);if(!t)return await this.baseFs.realpathPromise(e);if(!t[5])return e;let n=await this.baseFs.realpathPromise(this.mapToBase(e));return pe.makeVirtualPath(t[1],t[3],n)}mapToBase(e){if(e==="")return e;if(this.pathUtils.isAbsolute(e))return pe.resolveVirtual(e);let t=pe.resolveVirtual(this.baseFs.resolve(Jt.dot)),n=pe.resolveVirtual(this.baseFs.resolve(e));return x.relative(t,n)||Jt.dot}mapFromBase(e){return e}},Qn={DEFAULT:{collapsed:!1,next:{["*"]:"DEFAULT"}},TOP_LEVEL:{collapsed:!1,next:{fallbackExclusionList:"FALLBACK_EXCLUSION_LIST",packageRegistryData:"PACKAGE_REGISTRY_DATA",["*"]:"DEFAULT"}},FALLBACK_EXCLUSION_LIST:{collapsed:!1,next:{["*"]:"FALLBACK_EXCLUSION_ENTRIES"}},FALLBACK_EXCLUSION_ENTRIES:{collapsed:!0,next:{["*"]:"FALLBACK_EXCLUSION_DATA"}},FALLBACK_EXCLUSION_DATA:{collapsed:!0,next:{["*"]:"DEFAULT"}},PACKAGE_REGISTRY_DATA:{collapsed:!1,next:{["*"]:"PACKAGE_REGISTRY_ENTRIES"}},PACKAGE_REGISTRY_ENTRIES:{collapsed:!0,next:{["*"]:"PACKAGE_STORE_DATA"}},PACKAGE_STORE_DATA:{collapsed:!1,next:{["*"]:"PACKAGE_STORE_ENTRIES"}},PACKAGE_STORE_ENTRIES:{collapsed:!0,next:{["*"]:"PACKAGE_INFORMATION_DATA"}},PACKAGE_INFORMATION_DATA:{collapsed:!1,next:{packageDependencies:"PACKAGE_DEPENDENCIES",["*"]:"DEFAULT"}},PACKAGE_DEPENDENCIES:{collapsed:!1,next:{["*"]:"PACKAGE_DEPENDENCY"}},PACKAGE_DEPENDENCY:{collapsed:!0,next:{["*"]:"DEFAULT"}}};function ji(r,e,t){let n="";n+="[";for(let s=0,i=r.length;s<i;++s)n+=ut(String(s),r[s],e,t).replace(/^ +/g,""),s+1<i&&(n+=", ");return n+="]",n}function Yi(r,e,t){let n=`${t}  `,s="";s+=t,s+=`[
`;for(let i=0,a=r.length;i<a;++i)s+=n+ut(String(i),r[i],e,n).replace(/^ +/,""),i+1<a&&(s+=","),s+=`
`;return s+=t,s+="]",s}function Qi(r,e,t){let n=Object.keys(r),s="";s+="{";for(let i=0,a=n.length,c=0;i<a;++i){let l=n[i],h=r[l];typeof h>"u"||(c!==0&&(s+=", "),s+=JSON.stringify(l),s+=": ",s+=ut(l,h,e,t).replace(/^ +/g,""),c+=1)}return s+="}",s}function Ki(r,e,t){let n=Object.keys(r),s=`${t}  `,i="";i+=t,i+=`{
`;let a=0;for(let c=0,l=n.length;c<l;++c){let h=n[c],g=r[h];typeof g>"u"||(a!==0&&(i+=",",i+=`
`),i+=s,i+=JSON.stringify(h),i+=": ",i+=ut(h,g,e,s).replace(/^ +/g,""),a+=1)}return a!==0&&(i+=`
`),i+=t,i+="}",i}function ut(r,e,t,n){let{next:s}=Qn[t],i=s[r]||s["*"];return Kn(e,i,n)}function Kn(r,e,t){let{collapsed:n}=Qn[e];return Array.isArray(r)?n?ji(r,e,t):Yi(r,e,t):typeof r=="object"&&r!==null?n?Qi(r,e,t):Ki(r,e,t):JSON.stringify(r)}function Vn(r){return Kn(r,"TOP_LEVEL","")}function je(r,e){let t=Array.from(r);Array.isArray(e)||(e=[e]);let n=[];for(let i of e)n.push(t.map(a=>i(a)));let s=t.map((i,a)=>a);return s.sort((i,a)=>{for(let c of n){let l=c[i]<c[a]?-1:c[i]>c[a]?1:0;if(l!==0)return l}return 0}),s.map(i=>t[i])}function Vi(r){let e=new Map,t=je(r.fallbackExclusionList||[],[({name:n,reference:s})=>n,({name:n,reference:s})=>s]);for(let{name:n,reference:s}of t){let i=e.get(n);typeof i>"u"&&e.set(n,i=new Set),i.add(s)}return Array.from(e).map(([n,s])=>[n,Array.from(s)])}function Xi(r){return je(r.fallbackPool||[],([e])=>e)}function zi(r){let e=[];for(let[t,n]of je(r.packageRegistry,([s])=>s===null?"0":`1${s}`)){let s=[];e.push([t,s]);for(let[i,{packageLocation:a,packageDependencies:c,packagePeers:l,linkType:h,discardFromLookup:g}]of je(n,([p])=>p===null?"0":`1${p}`)){let p=[];t!==null&&i!==null&&!c.has(t)&&p.push([t,i]);for(let[T,L]of je(c.entries(),([O])=>O))p.push([T,L]);let S=l&&l.size>0?Array.from(l):void 0,E=g||void 0;s.push([i,{packageLocation:a,packageDependencies:p,packagePeers:S,linkType:h,discardFromLookup:E}])}}return e}function Xt(r){return{__info:["This file is automatically generated. Do not touch it, or risk","your modifications being lost."],dependencyTreeRoots:r.dependencyTreeRoots,enableTopLevelFallback:r.enableTopLevelFallback||!1,ignorePatternData:r.ignorePattern||null,fallbackExclusionList:Vi(r),fallbackPool:Xi(r),packageRegistryData:zi(r)}}var Ot,Zi=()=>(typeof Ot>"u"&&(Ot=Jn.default.brotliDecompressSync(Buffer.from("","base64")).toString()),Ot);function zt(r,e){return[r?`${r}
`:"",`/* eslint-disable */
`,`"use strict";
`,`
`,e,`
`,Zi()].join("")}function _i(r){return JSON.stringify(r,null,2)}function $i(r){return`'${r.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/\n/g,`\\
`)}'`}function ea(r){return[`const RAW_RUNTIME_STATE =
`,`${$i(Vn(r))};

`,`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(JSON.parse(RAW_RUNTIME_STATE), {basePath: basePath || __dirname});
`,`}
`].join("")}function ta(){return[`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(require(${JSON.stringify(`./${at.pnpData}`)}), {basePath: basePath || __dirname});
`,`}
`].join("")}function ra(r){let e=Xt(r),t=ea(e);return zt(r.shebang,t)}function na(r){let e=Xt(r),t=ta(),n=zt(r.shebang,t);return{dataFile:_i(e),loaderFile:n}}function Xn(r,{basePath:e}){let t=m.toPortablePath(e),n=x.resolve(t),s=r.ignorePatternData!==null?new RegExp(r.ignorePatternData):null,i=new Map,a=new Map(r.packageRegistryData.map(([p,S])=>[p,new Map(S.map(([E,T])=>{if(p===null!=(E===null))throw new Error("Assertion failed: The name and reference should be null, or neither should");let L=T.discardFromLookup??!1,O={name:p,reference:E},v=i.get(T.packageLocation);v?(v.discardFromLookup=v.discardFromLookup&&L,L||(v.locator=O)):i.set(T.packageLocation,{locator:O,discardFromLookup:L});let q=null;return[E,{packageDependencies:new Map(T.packageDependencies),packagePeers:new Set(T.packagePeers),linkType:T.linkType,discardFromLookup:L,get packageLocation(){return q||(q=x.join(n,T.packageLocation))}}]}))])),c=new Map(r.fallbackExclusionList.map(([p,S])=>[p,new Set(S)])),l=new Map(r.fallbackPool),h=r.dependencyTreeRoots,g=r.enableTopLevelFallback;return{basePath:t,dependencyTreeRoots:h,enableTopLevelFallback:g,fallbackExclusionList:c,fallbackPool:l,ignorePattern:s,packageLocatorsByLocations:i,packageRegistry:a}}function Re(r,e){if(typeof r=="string")return r;if(r){let t,n;if(Array.isArray(r)){for(t=0;t<r.length;t++)if(n=Re(r[t],e))return n}else for(t in r)if(e.has(t))return Re(r[t],e)}}function Ee(r,e,t){throw new Error(t?`No known conditions for "${e}" entry in "${r}" package`:`Missing "${e}" export in "${r}" package`)}function sa(r,e){return e===r?".":e[0]==="."?e:e.replace(new RegExp("^"+r+"/"),"./")}function ia(r,e=".",t={}){let{name:n,exports:s}=r;if(s){let{browser:i,require:a,unsafe:c,conditions:l=[]}=t,h=sa(n,e);if(h[0]!=="."&&(h="./"+h),typeof s=="string")return h==="."?s:Ee(n,h);let g=new Set(["default",...l]);c||g.add(a?"require":"import"),c||g.add(i?"browser":"node");let p,S,E=!1;for(p in s){E=p[0]!==".";break}if(E)return h==="."?Re(s,g)||Ee(n,h,1):Ee(n,h);if(S=s[h])return Re(S,g)||Ee(n,h,1);for(p in s){if(S=p[p.length-1],S==="/"&&h.startsWith(p))return(S=Re(s[p],g))?S+h.substring(p.length):Ee(n,h,1);if(S==="*"&&h.startsWith(p.slice(0,-1))&&h.substring(p.length-1).length>0)return(S=Re(s[p],g))?S.replace("*",h.substring(p.length-1)):Ee(n,h,1)}return Ee(n,h)}}var aa=Array.isArray,Yt=JSON.stringify,zn=Object.getOwnPropertyNames,Zt=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),Mn=(r,e)=>RegExp.prototype.exec.call(r,e),Nn=(r,...e)=>RegExp.prototype[Symbol.replace].apply(r,e),Qt=(r,...e)=>String.prototype.endsWith.apply(r,e),oa=(r,...e)=>String.prototype.includes.apply(r,e),ca=(r,...e)=>String.prototype.lastIndexOf.apply(r,e),Kt=(r,...e)=>String.prototype.indexOf.apply(r,e),la=(r,...e)=>String.prototype.replace.apply(r,e),nt=(r,...e)=>String.prototype.slice.apply(r,e),Te=(r,...e)=>String.prototype.startsWith.apply(r,e),ua=Map,fa=JSON.parse;function ft(r,e,t){return class extends t{constructor(...n){super(e(...n)),this.code=r,this.name=`${t.name} [${r}]`}}}var ha=ft("ERR_PACKAGE_IMPORT_NOT_DEFINED",(r,e,t)=>`Package import specifier "${r}" is not defined${e?` in package ${e}package.json`:""} imported from ${t}`,TypeError),Zn=ft("ERR_INVALID_MODULE_SPECIFIER",(r,e,t=void 0)=>`Invalid module "${r}" ${e}${t?` imported from ${t}`:""}`,TypeError),ma=ft("ERR_INVALID_PACKAGE_TARGET",(r,e,t,n=!1,s=void 0)=>{let i=typeof t=="string"&&!n&&t.length&&!Te(t,"./");return e==="."?(Ii.default(n===!1),`Invalid "exports" main target ${Yt(t)} defined in the package config ${r}package.json${s?` imported from ${s}`:""}${i?'; targets must start with "./"':""}`):`Invalid "${n?"imports":"exports"}" target ${Yt(t)} defined for '${e}' in the package config ${r}package.json${s?` imported from ${s}`:""}${i?'; targets must start with "./"':""}`},Error),_n=ft("ERR_INVALID_PACKAGE_CONFIG",(r,e,t)=>`Invalid package config ${r}${e?` while importing ${e}`:""}${t?`. ${t}`:""}`,Error);function pa(r,e){let t=Object.create(null);for(let n=0;n<e.length;n++){let s=e[n];Zt(r,s)&&(t[s]=r[s])}return t}var st=new ua;function da(r,e,t,n){let s=st.get(r);if(s!==void 0)return s;let i=n(r);if(i===void 0){let E={pjsonPath:r,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return st.set(r,E),E}let a;try{a=fa(i)}catch(E){throw new _n(r,(t?`"${e}" from `:"")+se.fileURLToPath(t||e),E.message)}let{imports:c,main:l,name:h,type:g}=pa(a,["imports","main","name","type"]),p=Zt(a,"exports")?a.exports:void 0;(typeof c!="object"||c===null)&&(c=void 0),typeof l!="string"&&(l=void 0),typeof h!="string"&&(h=void 0),g!=="module"&&g!=="commonjs"&&(g="none");let S={pjsonPath:r,exists:!0,main:l,name:h,type:g,exports:p,imports:c};return st.set(r,S),S}function ya(r,e){let t=new URL("./package.json",r);for(;;){let i=t.pathname;if(Qt(i,"node_modules/package.json"))break;let a=da(se.fileURLToPath(t),r,void 0,e);if(a.exists)return a;let c=t;if(t=new URL("../package.json",t),t.pathname===c.pathname)break}let n=se.fileURLToPath(t),s={pjsonPath:n,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return st.set(n,s),s}function ga(r,e,t){throw new ha(r,e&&se.fileURLToPath(new URL(".",e)),se.fileURLToPath(t))}function Pa(r,e,t,n){let s=`request is not a valid subpath for the "${t?"imports":"exports"}" resolution of ${se.fileURLToPath(e)}`;throw new Zn(r,s,n&&se.fileURLToPath(n))}function He(r,e,t,n,s){throw typeof e=="object"&&e!==null?e=Yt(e,null,""):e=`${e}`,new ma(se.fileURLToPath(new URL(".",t)),r,e,n,s&&se.fileURLToPath(s))}var On=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,Wn=/\*/g;function Sa(r,e,t,n,s,i,a,c){if(e!==""&&!i&&r[r.length-1]!=="/"&&He(t,r,n,a,s),!Te(r,"./")){if(a&&!Te(r,"../")&&!Te(r,"/")){let p=!1;try{new URL(r),p=!0}catch{}if(!p)return i?Nn(Wn,r,()=>e):r+e}He(t,r,n,a,s)}Mn(On,nt(r,2))!==null&&He(t,r,n,a,s);let l=new URL(r,n),h=l.pathname,g=new URL(".",n).pathname;if(Te(h,g)||He(t,r,n,a,s),e==="")return l;if(Mn(On,e)!==null){let p=i?la(t,"*",()=>e):t+e;Pa(p,n,a,s)}return i?new URL(Nn(Wn,l.href,()=>e)):new URL(e,l)}function wa(r){let e=+r;return`${e}`!==r?!1:e>=0&&e<4294967295}function ct(r,e,t,n,s,i,a,c){if(typeof e=="string")return Sa(e,t,n,r,s,i,a);if(aa(e)){if(e.length===0)return null;let l;for(let h=0;h<e.length;h++){let g=e[h],p;try{p=ct(r,g,t,n,s,i,a,c)}catch(S){if(l=S,S.code==="ERR_INVALID_PACKAGE_TARGET")continue;throw S}if(p!==void 0){if(p===null){l=null;continue}return p}}if(l==null)return l;throw l}else if(typeof e=="object"&&e!==null){let l=zn(e);for(let h=0;h<l.length;h++){let g=l[h];if(wa(g))throw new _n(se.fileURLToPath(r),s,'"exports" cannot contain numeric property keys.')}for(let h=0;h<l.length;h++){let g=l[h];if(g==="default"||c.has(g)){let p=e[g],S=ct(r,p,t,n,s,i,a,c);if(S===void 0)continue;return S}}return}else if(e===null)return null;He(n,e,r,a,s)}function ka(r,e){let t=Kt(r,"*"),n=Kt(e,"*"),s=t===-1?r.length:t+1,i=n===-1?e.length:n+1;return s>i?-1:i>s||t===-1?1:n===-1||r.length>e.length?-1:e.length>r.length?1:0}function ba({name:r,base:e,conditions:t,readFileSyncFn:n}){if(r==="#"||Te(r,"#/")||Qt(r,"/")){let a="is not a valid internal imports specifier name";throw new Zn(r,a,se.fileURLToPath(e))}let s,i=ya(e,n);if(i.exists){s=se.pathToFileURL(i.pjsonPath);let a=i.imports;if(a)if(Zt(a,r)&&!oa(r,"*")){let c=ct(s,a[r],"",r,e,!1,!0,t);if(c!=null)return c}else{let c="",l,h=zn(a);for(let g=0;g<h.length;g++){let p=h[g],S=Kt(p,"*");if(S!==-1&&Te(r,nt(p,0,S))){let E=nt(p,S+1);r.length>=p.length&&Qt(r,E)&&ka(c,p)===1&&ca(p,"*")===S&&(c=p,l=nt(r,S,r.length-E.length))}}if(c){let g=a[c],p=ct(s,g,l,c,e,!0,!0,t);if(p!=null)return p}}}ga(r,s,e)}var U=(r=>(r.API_ERROR="API_ERROR",r.BUILTIN_NODE_RESOLUTION_FAILED="BUILTIN_NODE_RESOLUTION_FAILED",r.EXPORTS_RESOLUTION_FAILED="EXPORTS_RESOLUTION_FAILED",r.MISSING_DEPENDENCY="MISSING_DEPENDENCY",r.MISSING_PEER_DEPENDENCY="MISSING_PEER_DEPENDENCY",r.QUALIFIED_PATH_RESOLUTION_FAILED="QUALIFIED_PATH_RESOLUTION_FAILED",r.INTERNAL="INTERNAL",r.UNDECLARED_DEPENDENCY="UNDECLARED_DEPENDENCY",r.UNSUPPORTED="UNSUPPORTED",r))(U||{}),Ea=new Set(["BUILTIN_NODE_RESOLUTION_FAILED","MISSING_DEPENDENCY","MISSING_PEER_DEPENDENCY","QUALIFIED_PATH_RESOLUTION_FAILED","UNDECLARED_DEPENDENCY"]);function Y(r,e,t={},n){n??(n=Ea.has(r)?"MODULE_NOT_FOUND":r);let s={configurable:!0,writable:!0,enumerable:!1};return Object.defineProperties(new Error(e),{code:{...s,value:n},pnpCode:{...s,value:r},data:{...s,value:t}})}function me(r){return m.normalize(m.fromPortablePath(r))}var Ta=new Set(qe.Module.builtinModules||Object.keys(process.binding("natives"))),Wt=r=>r.startsWith("node:")||Ta.has(r);function $n(r,e){let t=Number(process.env.PNP_ALWAYS_WARN_ON_FALLBACK)>0,n=Number(process.env.PNP_DEBUG_LEVEL),s=/^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:node:)?(?:@[^/]+\/)?[^/]+)\/*(.*|)$/,i=/^(\/|\.{1,2}(\/|$))/,a=/\/$/,c=/^\.{0,2}\//,l={name:null,reference:null},h=[],g=new Set;if(r.enableTopLevelFallback===!0&&h.push(l),e.compatibilityMode!==!1)for(let f of["react-scripts","gatsby"]){let u=r.packageRegistry.get(f);if(u)for(let y of u.keys()){if(y===null)throw new Error("Assertion failed: This reference shouldn't be null");h.push({name:f,reference:y})}}let{ignorePattern:p,packageRegistry:S,packageLocatorsByLocations:E}=r;function T(f,u){return{fn:f,args:u,error:null,result:null}}function L(f){var u,y,o,d;let b=((y=(u=process.stderr)==null?void 0:u.hasColors)==null?void 0:y.call(u))??process.stdout.isTTY,k=(F,ne)=>`\x1B[${F}m${ne}\x1B[0m`,P=f.error;console.error(P?k("31;1",`\u2716 ${(o=f.error)==null?void 0:o.message.replace(/\n.*/s,"")}`):k("33;1","\u203C Resolution")),f.args.length>0&&console.error();for(let F of f.args)console.error(`  ${k("37;1","In \u2190")} ${Rn.inspect(F,{colors:b,compact:!0})}`);f.result&&(console.error(),console.error(`  ${k("37;1","Out \u2192")} ${Rn.inspect(f.result,{colors:b,compact:!0})}`));let C=((d=new Error().stack.match(/(?<=^ +)at.*/gm))==null?void 0:d.slice(2))??[];if(C.length>0){console.error();for(let F of C)console.error(`  ${k("38;5;244",F)}`)}console.error()}function O(f,u){if(e.allowDebug===!1)return u;if(Number.isFinite(n)){if(n>=2)return(...y)=>{let o=T(f,y);try{return o.result=u(...y)}catch(d){throw o.error=d}finally{L(o)}};if(n>=1)return(...y)=>{try{return u(...y)}catch(o){let d=T(f,y);throw d.error=o,L(d),o}}}return u}function v(f){let u=ae(f);if(!u)throw Y(U.INTERNAL,"Couldn't find a matching entry in the dependency tree for the specified parent (this is probably an internal error)");return u}function q(f){if(f.name===null)return!0;for(let u of r.dependencyTreeRoots)if(u.name===f.name&&u.reference===f.reference)return!0;return!1}let Q=new Set(["default","node","require"]);function X(f,u=Q){let y=R(x.join(f,"internal.js"),{resolveIgnored:!0,includeDiscardFromLookup:!0});if(y===null)throw Y(U.INTERNAL,`The locator that owns the "${f}" path can't be found inside the dependency tree (this is probably an internal error)`);let{packageLocation:o}=v(y),d=x.join(o,at.manifest);if(!e.fakeFs.existsSync(d))return null;let b=JSON.parse(e.fakeFs.readFileSync(d,"utf8")),k=x.contains(o,f);if(k===null)throw Y(U.INTERNAL,"unqualifiedPath doesn't contain the packageLocation (this is probably an internal error)");c.test(k)||(k=`./${k}`);let P;try{P=ia(b,x.normalize(k),{conditions:u,unsafe:!0})}catch(C){throw Y(U.EXPORTS_RESOLUTION_FAILED,C.message,{unqualifiedPath:me(f),locator:y,pkgJson:b,subpath:me(k),conditions:u},"ERR_PACKAGE_PATH_NOT_EXPORTED")}return typeof P=="string"?x.join(o,P):null}function de(f,u,{extensions:y}){let o;try{u.push(f),o=e.fakeFs.statSync(f)}catch{}if(o&&!o.isDirectory())return e.fakeFs.realpathSync(f);if(o&&o.isDirectory()){let d;try{d=JSON.parse(e.fakeFs.readFileSync(x.join(f,at.manifest),"utf8"))}catch{}let b;if(d&&d.main&&(b=x.resolve(f,d.main)),b&&b!==f){let k=de(b,u,{extensions:y});if(k!==null)return k}}for(let d=0,b=y.length;d<b;d++){let k=`${f}${y[d]}`;if(u.push(k),e.fakeFs.existsSync(k))return k}if(o&&o.isDirectory())for(let d=0,b=y.length;d<b;d++){let k=x.format({dir:f,name:"index",ext:y[d]});if(u.push(k),e.fakeFs.existsSync(k))return k}return null}function Se(f){let u=new qe.Module(f,null);return u.filename=f,u.paths=qe.Module._nodeModulePaths(f),u}function ye(f,u){return u.endsWith("/")&&(u=x.join(u,"internal.js")),qe.Module._resolveFilename(m.fromPortablePath(f),Se(m.fromPortablePath(u)),!1,{plugnplay:!1})}function xe(f){if(p===null)return!1;let u=x.contains(r.basePath,f);return u===null?!1:!!p.test(u.replace(/\/$/,""))}let Ye={std:3,resolveVirtual:1,getAllLocators:1},D=l;function ae({name:f,reference:u}){let y=S.get(f);if(!y)return null;let o=y.get(u);return o||null}function W({name:f,reference:u}){let y=[];for(let[o,d]of S)if(o!==null)for(let[b,k]of d)b===null||k.packageDependencies.get(f)!==u||o===f&&b===u||y.push({name:o,reference:b});return y}function A(f,u){let y=new Map,o=new Set,d=k=>{let P=JSON.stringify(k.name);if(o.has(P))return;o.add(P);let C=W(k);for(let F of C)if(v(F).packagePeers.has(f))d(F);else{let G=y.get(F.name);typeof G>"u"&&y.set(F.name,G=new Set),G.add(F.reference)}};d(u);let b=[];for(let k of[...y.keys()].sort())for(let P of[...y.get(k)].sort())b.push({name:k,reference:P});return b}function R(f,{resolveIgnored:u=!1,includeDiscardFromLookup:y=!1}={}){if(xe(f)&&!u)return null;let o=x.relative(r.basePath,f);o.match(i)||(o=`./${o}`),o.endsWith("/")||(o=`${o}/`);do{let d=E.get(o);if(typeof d>"u"||d.discardFromLookup&&!y){o=o.substring(0,o.lastIndexOf("/",o.length-2)+1);continue}return d.locator}while(o!=="");return null}function H(f){try{return e.fakeFs.readFileSync(m.toPortablePath(f),"utf8")}catch(u){if(u.code==="ENOENT")return;throw u}}function z(f,u,{considerBuiltins:y=!0}={}){if(f.startsWith("#"))throw new Error("resolveToUnqualified can not handle private import mappings");if(f==="pnpapi")return m.toPortablePath(e.pnpapiResolution);if(y&&Wt(f))return null;let o=me(f),d=u&&me(u);if(u&&xe(u)&&(!x.isAbsolute(f)||R(f)===null)){let P=ye(f,u);if(P===!1)throw Y(U.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer was explicitely ignored by the regexp)

Require request: "${o}"
Required by: ${d}
`,{request:o,issuer:d});return m.toPortablePath(P)}let b,k=f.match(s);if(k){if(!u)throw Y(U.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:o,issuer:d});let[,P,C]=k,F=R(u);if(!F){let K=ye(f,u);if(K===!1)throw Y(U.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer doesn't seem to be part of the Yarn-managed dependency tree).

Require path: "${o}"
Required by: ${d}
`,{request:o,issuer:d});return m.toPortablePath(K)}let G=v(F).packageDependencies.get(P),oe=null;if(G==null&&F.name!==null){let K=r.fallbackExclusionList.get(F.name);if(!K||!K.has(F.reference)){for(let ee=0,ce=h.length;ee<ce;++ee){let Be=v(h[ee]).packageDependencies.get(P);if(Be!=null){t?oe=Be:G=Be;break}}if(r.enableTopLevelFallback&&G==null&&oe===null){let ee=r.fallbackPool.get(P);ee!=null&&(oe=ee)}}}let j=null;if(G===null)if(q(F))j=Y(U.MISSING_PEER_DEPENDENCY,`Your application tried to access ${P} (a peer dependency); this isn't allowed as there is no ancestor to satisfy the requirement. Use a devDependency if needed.

Required package: ${P}${P!==o?` (via "${o}")`:""}
Required by: ${d}
`,{request:o,issuer:d,dependencyName:P});else{let K=A(P,F);K.every($=>q($))?j=Y(U.MISSING_PEER_DEPENDENCY,`${F.name} tried to access ${P} (a peer dependency) but it isn't provided by your application; this makes the require call ambiguous and unsound.

Required package: ${P}${P!==o?` (via "${o}")`:""}
Required by: ${F.name}@${F.reference} (via ${d})
${K.map($=>`Ancestor breaking the chain: ${$.name}@${$.reference}
`).join("")}
`,{request:o,issuer:d,issuerLocator:Object.assign({},F),dependencyName:P,brokenAncestors:K}):j=Y(U.MISSING_PEER_DEPENDENCY,`${F.name} tried to access ${P} (a peer dependency) but it isn't provided by its ancestors; this makes the require call ambiguous and unsound.

Required package: ${P}${P!==o?` (via "${o}")`:""}
Required by: ${F.name}@${F.reference} (via ${d})

${K.map($=>`Ancestor breaking the chain: ${$.name}@${$.reference}
`).join("")}
`,{request:o,issuer:d,issuerLocator:Object.assign({},F),dependencyName:P,brokenAncestors:K})}else G===void 0&&(!y&&Wt(f)?q(F)?j=Y(U.UNDECLARED_DEPENDENCY,`Your application tried to access ${P}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${P} isn't otherwise declared in your dependencies, this makes the require call ambiguous and unsound.

Required package: ${P}${P!==o?` (via "${o}")`:""}
Required by: ${d}
`,{request:o,issuer:d,dependencyName:P}):j=Y(U.UNDECLARED_DEPENDENCY,`${F.name} tried to access ${P}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${P} isn't otherwise declared in ${F.name}'s dependencies, this makes the require call ambiguous and unsound.

Required package: ${P}${P!==o?` (via "${o}")`:""}
Required by: ${d}
`,{request:o,issuer:d,issuerLocator:Object.assign({},F),dependencyName:P}):q(F)?j=Y(U.UNDECLARED_DEPENDENCY,`Your application tried to access ${P}, but it isn't declared in your dependencies; this makes the require call ambiguous and unsound.

Required package: ${P}${P!==o?` (via "${o}")`:""}
Required by: ${d}
`,{request:o,issuer:d,dependencyName:P}):j=Y(U.UNDECLARED_DEPENDENCY,`${F.name} tried to access ${P}, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.

Required package: ${P}${P!==o?` (via "${o}")`:""}
Required by: ${F.name}@${F.reference} (via ${d})
`,{request:o,issuer:d,issuerLocator:Object.assign({},F),dependencyName:P}));if(G==null){if(oe===null||j===null)throw j||new Error("Assertion failed: Expected an error to have been set");G=oe;let K=j.message.replace(/\n.*/g,"");j.message=K,!g.has(K)&&n!==0&&(g.add(K),process.emitWarning(j))}let le=Array.isArray(G)?{name:G[0],reference:G[1]}:{name:P,reference:G},we=v(le);if(!we.packageLocation)throw Y(U.MISSING_DEPENDENCY,`A dependency seems valid but didn't get installed for some reason. This might be caused by a partial install, such as dev vs prod.

Required package: ${le.name}@${le.reference}${le.name!==o?` (via "${o}")`:""}
Required by: ${F.name}@${F.reference} (via ${d})
`,{request:o,issuer:d,dependencyLocator:Object.assign({},le)});let ue=we.packageLocation;C?b=x.join(ue,C):b=ue}else if(x.isAbsolute(f))b=x.normalize(f);else{if(!u)throw Y(U.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:o,issuer:d});let P=x.resolve(u);u.match(a)?b=x.normalize(x.join(P,f)):b=x.normalize(x.join(x.dirname(P),f))}return x.normalize(b)}function B(f,u,y=Q){if(i.test(f))return u;let o=X(u,y);return o?x.normalize(o):u}function I(f,{extensions:u=Object.keys(qe.Module._extensions)}={}){let y=[],o=de(f,y,{extensions:u});if(o)return x.normalize(o);{let d=me(f),b=R(f);if(b){let{packageLocation:k}=v(b),P=!0;try{e.fakeFs.accessSync(k)}catch(C){if((C==null?void 0:C.code)==="ENOENT")P=!1;else{let F=((C==null?void 0:C.message)??C??"empty exception thrown").replace(/^[A-Z]/,ne=>ne.toLowerCase());throw Y(U.QUALIFIED_PATH_RESOLUTION_FAILED,`Required package exists but could not be accessed (${F}).

Missing package: ${b.name}@${b.reference}
Expected package location: ${me(k)}
`,{unqualifiedPath:d,extensions:u})}}if(!P){let C=k.includes("/unplugged/")?"Required unplugged package missing from disk. This may happen when switching branches without running installs (unplugged packages must be fully materialized on disk to work).":"Required package missing from disk. If you keep your packages inside your repository then restarting the Node process may be enough. Otherwise, try to run an install first.";throw Y(U.QUALIFIED_PATH_RESOLUTION_FAILED,`${C}

Missing package: ${b.name}@${b.reference}
Expected package location: ${me(k)}
`,{unqualifiedPath:d,extensions:u})}}throw Y(U.QUALIFIED_PATH_RESOLUTION_FAILED,`Qualified path resolution failed: we looked for the following paths, but none could be accessed.

Source path: ${d}
${y.map(k=>`Not found: ${me(k)}
`).join("")}`,{unqualifiedPath:d,extensions:u})}}function re(f,u,y){if(!u)throw new Error("Assertion failed: An issuer is required to resolve private import mappings");let o=ba({name:f,base:se.pathToFileURL(m.fromPortablePath(u)),conditions:y.conditions??Q,readFileSyncFn:H});if(o instanceof URL)return I(m.toPortablePath(se.fileURLToPath(o)),{extensions:y.extensions});if(o.startsWith("#"))throw new Error("Mapping from one private import to another isn't allowed");return Z(o,u,y)}function Z(f,u,y={}){try{if(f.startsWith("#"))return re(f,u,y);let{considerBuiltins:o,extensions:d,conditions:b}=y,k=z(f,u,{considerBuiltins:o});if(f==="pnpapi")return k;if(k===null)return null;let P=()=>u!==null?xe(u):!1,C=(!o||!Wt(f))&&!P()?B(f,k,b):k;return I(C,{extensions:d})}catch(o){throw Object.prototype.hasOwnProperty.call(o,"pnpCode")&&Object.assign(o.data,{request:me(f),issuer:u&&me(u)}),o}}function w(f){let u=x.normalize(f),y=pe.resolveVirtual(u);return y!==u?y:null}return{VERSIONS:Ye,topLevel:D,getLocator:(f,u)=>Array.isArray(u)?{name:u[0],reference:u[1]}:{name:f,reference:u},getDependencyTreeRoots:()=>[...r.dependencyTreeRoots],getAllLocators(){let f=[];for(let[u,y]of S)for(let o of y.keys())u!==null&&o!==null&&f.push({name:u,reference:o});return f},getPackageInformation:f=>{let u=ae(f);if(u===null)return null;let y=m.fromPortablePath(u.packageLocation);return{...u,packageLocation:y}},findPackageLocator:f=>R(m.toPortablePath(f)),resolveToUnqualified:O("resolveToUnqualified",(f,u,y)=>{let o=u!==null?m.toPortablePath(u):null,d=z(m.toPortablePath(f),o,y);return d===null?null:m.fromPortablePath(d)}),resolveUnqualified:O("resolveUnqualified",(f,u)=>m.fromPortablePath(I(m.toPortablePath(f),u))),resolveRequest:O("resolveRequest",(f,u,y)=>{let o=u!==null?m.toPortablePath(u):null,d=Z(m.toPortablePath(f),o,y);return d===null?null:m.fromPortablePath(d)}),resolveVirtual:O("resolveVirtual",f=>{let u=w(m.toPortablePath(f));return u!==null?m.fromPortablePath(u):null})}}async function Fa(r,{fakeFs:e,pnpapiResolution:t}){let n=await e.readFilePromise(r,"utf8");return es(n,{basePath:Gn.dirname(r),fakeFs:e,pnpapiResolution:t})}function es(r,{basePath:e,fakeFs:t,pnpapiResolution:n}){let s=JSON.parse(r),i=Xn(s,{basePath:e});return $n(i,{compatibilityMode:!0,fakeFs:t,pnpapiResolution:n})}var xa=(r,e,t)=>{let n=Xt(r),s=Xn(n,{basePath:e}),i=m.join(e,at.pnpCjs);return $n(s,{fakeFs:t,pnpapiResolution:i})},Gt,Ia=()=>(typeof Gt>"u"&&(Gt=Jn.default.brotliDecompressSync(Buffer.from("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","base64")).toString()),Gt);fe.LinkType=Un;fe.generateInlinedScript=ra;fe.generateLoader=zt;fe.generatePrettyJson=Vn;fe.generateSplitScript=na;fe.getESMLoaderTemplate=Ia;fe.hydratePnpFile=Fa;fe.hydratePnpSource=es;fe.makeRuntimeApi=xa});var rs=J((Jo,Aa)=>{Aa.exports=`# This file can't import anything as we include the contents of this file
# directly in nix eval --apply arguments (see how this file is included in runner/src/common.ts)

with builtins;

let
  nameValuePair = name: value: { inherit name value; };

  filterAttrs = pred: set:
    listToAttrs (concatMap (name: let v = set.\${name}; in if pred name v then [(nameValuePair name v)] else []) (attrNames set));

  ##

  getPackages = manifest:
    mapAttrs (name: pkg:
      filterAttrs (key: b: (builtins.elem key [
        "name"
        "outputHash"
        "outputHashByPlatform"
      ])) pkg
    ) manifest;
in
`});var Ra={};fs(Ra,{getExistingYarnManifest:()=>ss,nixCurrentSystem:()=>$t});module.exports=hs(Ra);var ge=ie(require("fs")),Pe=ie(require("path")),ns=require("stream");var An=require("node:buffer"),Ln=ie(require("node:path"),1),rt=ie(require("node:child_process"),1),Je=ie(require("node:process"),1),vn=ie(jr(),1);function kt(r){let e=typeof r=="string"?`
`:`
`.charCodeAt(),t=typeof r=="string"?"\r":"\r".charCodeAt();return r[r.length-1]===e&&(r=r.slice(0,-1)),r[r.length-1]===t&&(r=r.slice(0,-1)),r}var Ne=ie(require("node:process"),1),Le=ie(require("node:path"),1),Yr=ie(require("node:url"),1);function Ve(r={}){let{env:e=process.env,platform:t=process.platform}=r;return t!=="win32"?"PATH":Object.keys(e).reverse().find(n=>n.toUpperCase()==="PATH")||"Path"}function Gs(r={}){let{cwd:e=Ne.default.cwd(),path:t=Ne.default.env[Ve()],execPath:n=Ne.default.execPath}=r,s,i=e instanceof URL?Yr.default.fileURLToPath(e):e,a=Le.default.resolve(i),c=[];for(;s!==a;)c.push(Le.default.join(a,"node_modules/.bin")),s=a,a=Le.default.resolve(a,"..");return c.push(Le.default.resolve(i,n,"..")),[...c,t].join(Le.default.delimiter)}function Qr({env:r=Ne.default.env,...e}={}){r={...r};let t=Ve({env:r});return e.path=r[t],r[t]=Gs(e),r}var Js=(r,e,t,n)=>{if(t==="length"||t==="prototype"||t==="arguments"||t==="caller")return;let s=Object.getOwnPropertyDescriptor(r,t),i=Object.getOwnPropertyDescriptor(e,t);!Us(s,i)&&n||Object.defineProperty(r,t,i)},Us=function(r,e){return r===void 0||r.configurable||r.writable===e.writable&&r.enumerable===e.enumerable&&r.configurable===e.configurable&&(r.writable||r.value===e.value)},qs=(r,e)=>{let t=Object.getPrototypeOf(e);t!==Object.getPrototypeOf(r)&&Object.setPrototypeOf(r,t)},Hs=(r,e)=>`/* Wrapped ${r}*/
${e}`,js=Object.getOwnPropertyDescriptor(Function.prototype,"toString"),Ys=Object.getOwnPropertyDescriptor(Function.prototype.toString,"name"),Qs=(r,e,t)=>{let n=t===""?"":`with ${t.trim()}() `,s=Hs.bind(null,n,e.toString());Object.defineProperty(s,"name",Ys),Object.defineProperty(r,"toString",{...js,value:s})};function bt(r,e,{ignoreNonConfigurable:t=!1}={}){let{name:n}=r;for(let s of Reflect.ownKeys(e))Js(r,e,s,t);return qs(r,e),Qs(r,e,n),r}var Xe=new WeakMap,Kr=(r,e={})=>{if(typeof r!="function")throw new TypeError("Expected a function");let t,n=0,s=r.displayName||r.name||"<anonymous>",i=function(...a){if(Xe.set(i,++n),n===1)t=r.apply(this,a),r=null;else if(e.throw===!0)throw new Error(`Function \`${s}\` can only be called once`);return t};return bt(i,r),Xe.set(i,n),i};Kr.callCount=r=>{if(!Xe.has(r))throw new Error(`The given function \`${r.name}\` is not wrapped by the \`onetime\` package`);return Xe.get(r)};var Vr=Kr;var $r=require("os");var Xr=function(){let r=Et-zr+1;return Array.from({length:r},Ks)},Ks=function(r,e){return{name:`SIGRT${e+1}`,number:zr+e,action:"terminate",description:"Application-specific signal (realtime)",standard:"posix"}},zr=34,Et=64;var _r=require("os");var Zr=[{name:"SIGHUP",number:1,action:"terminate",description:"Terminal closed",standard:"posix"},{name:"SIGINT",number:2,action:"terminate",description:"User interruption with CTRL-C",standard:"ansi"},{name:"SIGQUIT",number:3,action:"core",description:"User interruption with CTRL-\\",standard:"posix"},{name:"SIGILL",number:4,action:"core",description:"Invalid machine instruction",standard:"ansi"},{name:"SIGTRAP",number:5,action:"core",description:"Debugger breakpoint",standard:"posix"},{name:"SIGABRT",number:6,action:"core",description:"Aborted",standard:"ansi"},{name:"SIGIOT",number:6,action:"core",description:"Aborted",standard:"bsd"},{name:"SIGBUS",number:7,action:"core",description:"Bus error due to misaligned, non-existing address or paging error",standard:"bsd"},{name:"SIGEMT",number:7,action:"terminate",description:"Command should be emulated but is not implemented",standard:"other"},{name:"SIGFPE",number:8,action:"core",description:"Floating point arithmetic error",standard:"ansi"},{name:"SIGKILL",number:9,action:"terminate",description:"Forced termination",standard:"posix",forced:!0},{name:"SIGUSR1",number:10,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGSEGV",number:11,action:"core",description:"Segmentation fault",standard:"ansi"},{name:"SIGUSR2",number:12,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGPIPE",number:13,action:"terminate",description:"Broken pipe or socket",standard:"posix"},{name:"SIGALRM",number:14,action:"terminate",description:"Timeout or timer",standard:"posix"},{name:"SIGTERM",number:15,action:"terminate",description:"Termination",standard:"ansi"},{name:"SIGSTKFLT",number:16,action:"terminate",description:"Stack is empty or overflowed",standard:"other"},{name:"SIGCHLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"posix"},{name:"SIGCLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"other"},{name:"SIGCONT",number:18,action:"unpause",description:"Unpaused",standard:"posix",forced:!0},{name:"SIGSTOP",number:19,action:"pause",description:"Paused",standard:"posix",forced:!0},{name:"SIGTSTP",number:20,action:"pause",description:'Paused using CTRL-Z or "suspend"',standard:"posix"},{name:"SIGTTIN",number:21,action:"pause",description:"Background process cannot read terminal input",standard:"posix"},{name:"SIGBREAK",number:21,action:"terminate",description:"User interruption with CTRL-BREAK",standard:"other"},{name:"SIGTTOU",number:22,action:"pause",description:"Background process cannot write to terminal output",standard:"posix"},{name:"SIGURG",number:23,action:"ignore",description:"Socket received out-of-band data",standard:"bsd"},{name:"SIGXCPU",number:24,action:"core",description:"Process timed out",standard:"bsd"},{name:"SIGXFSZ",number:25,action:"core",description:"File too big",standard:"bsd"},{name:"SIGVTALRM",number:26,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGPROF",number:27,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGWINCH",number:28,action:"ignore",description:"Terminal window size changed",standard:"bsd"},{name:"SIGIO",number:29,action:"terminate",description:"I/O is available",standard:"other"},{name:"SIGPOLL",number:29,action:"terminate",description:"Watched event",standard:"other"},{name:"SIGINFO",number:29,action:"ignore",description:"Request for process information",standard:"other"},{name:"SIGPWR",number:30,action:"terminate",description:"Device running out of power",standard:"systemv"},{name:"SIGSYS",number:31,action:"core",description:"Invalid system call",standard:"other"},{name:"SIGUNUSED",number:31,action:"terminate",description:"Invalid system call",standard:"other"}];var Tt=function(){let r=Xr();return[...Zr,...r].map(Vs)},Vs=function({name:r,number:e,description:t,action:n,forced:s=!1,standard:i}){let{signals:{[r]:a}}=_r.constants,c=a!==void 0;return{name:r,number:c?a:e,description:t,supported:c,action:n,forced:s,standard:i}};var Xs=function(){return Tt().reduce(zs,{})},zs=function(r,{name:e,number:t,description:n,supported:s,action:i,forced:a,standard:c}){return{...r,[e]:{name:e,number:t,description:n,supported:s,action:i,forced:a,standard:c}}},en=Xs(),Zs=function(){let r=Tt(),e=64+1,t=Array.from({length:e},(n,s)=>_s(s,r));return Object.assign({},...t)},_s=function(r,e){let t=$s(r,e);if(t===void 0)return{};let{name:n,description:s,supported:i,action:a,forced:c,standard:l}=t;return{[r]:{name:n,number:r,description:s,supported:i,action:a,forced:c,standard:l}}},$s=function(r,e){let t=e.find(({name:n})=>$r.constants.signals[n]===r);return t!==void 0?t:e.find(n=>n.number===r)},lo=Zs();var ei=({timedOut:r,timeout:e,errorCode:t,signal:n,signalDescription:s,exitCode:i,isCanceled:a})=>r?`timed out after ${e} milliseconds`:a?"was canceled":t!==void 0?`failed with ${t}`:n!==void 0?`was killed with ${n} (${s})`:i!==void 0?`failed with exit code ${i}`:"failed",Oe=({stdout:r,stderr:e,all:t,error:n,signal:s,exitCode:i,command:a,escapedCommand:c,timedOut:l,isCanceled:h,killed:g,parsed:{options:{timeout:p}}})=>{i=i===null?void 0:i,s=s===null?void 0:s;let S=s===void 0?void 0:en[s].description,E=n&&n.code,L=`Command ${ei({timedOut:l,timeout:p,errorCode:E,signal:s,signalDescription:S,exitCode:i,isCanceled:h})}: ${a}`,O=Object.prototype.toString.call(n)==="[object Error]",v=O?`${L}
${n.message}`:L,q=[v,e,r].filter(Boolean).join(`
`);return O?(n.originalMessage=n.message,n.message=q):n=new Error(q),n.shortMessage=v,n.command=a,n.escapedCommand=c,n.exitCode=i,n.signal=s,n.signalDescription=S,n.stdout=r,n.stderr=e,t!==void 0&&(n.all=t),"bufferedData"in n&&delete n.bufferedData,n.failed=!0,n.timedOut=Boolean(l),n.isCanceled=h,n.killed=g&&!l,n};var ze=["stdin","stdout","stderr"],ti=r=>ze.some(e=>r[e]!==void 0),tn=r=>{if(!r)return;let{stdio:e}=r;if(e===void 0)return ze.map(n=>r[n]);if(ti(r))throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${ze.map(n=>`\`${n}\``).join(", ")}`);if(typeof e=="string")return e;if(!Array.isArray(e))throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof e}\``);let t=Math.max(e.length,ze.length);return Array.from({length:t},(n,s)=>e[s])};var ln=ie(require("node:os"),1),un=ie(cn(),1),ri=1e3*5,fn=(r,e="SIGTERM",t={})=>{let n=r(e);return ni(r,e,t,n),n},ni=(r,e,t,n)=>{if(!si(e,t,n))return;let s=ai(t),i=setTimeout(()=>{r("SIGKILL")},s);i.unref&&i.unref()},si=(r,{forceKillAfterTimeout:e},t)=>ii(r)&&e!==!1&&t,ii=r=>r===ln.default.constants.signals.SIGTERM||typeof r=="string"&&r.toUpperCase()==="SIGTERM",ai=({forceKillAfterTimeout:r=!0})=>{if(r===!0)return ri;if(!Number.isFinite(r)||r<0)throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${r}\` (${typeof r})`);return r},hn=(r,e)=>{r.kill()&&(e.isCanceled=!0)},oi=(r,e,t)=>{r.kill(e),t(Object.assign(new Error("Timed out"),{timedOut:!0,signal:e}))},mn=(r,{timeout:e,killSignal:t="SIGTERM"},n)=>{if(e===0||e===void 0)return n;let s,i=new Promise((c,l)=>{s=setTimeout(()=>{oi(r,t,l)},e)}),a=n.finally(()=>{clearTimeout(s)});return Promise.race([i,a])},pn=({timeout:r})=>{if(r!==void 0&&(!Number.isFinite(r)||r<0))throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${r}\` (${typeof r})`)},dn=async(r,{cleanup:e,detached:t},n)=>{if(!e||t)return n;let s=(0,un.default)(()=>{r.kill()});return n.finally(()=>{s()})};function It(r){return r!==null&&typeof r=="object"&&typeof r.pipe=="function"}var Dt=ie(Pn(),1),kn=ie(wn(),1),bn=(r,e)=>{e===void 0||r.stdin===void 0||(It(e)?e.pipe(r.stdin):r.stdin.end(e))},En=(r,{all:e})=>{if(!e||!r.stdout&&!r.stderr)return;let t=(0,kn.default)();return r.stdout&&t.add(r.stdout),r.stderr&&t.add(r.stderr),t},Lt=async(r,e)=>{if(!!r){r.destroy();try{return await e}catch(t){return t.bufferedData}}},vt=(r,{encoding:e,buffer:t,maxBuffer:n})=>{if(!(!r||!t))return e?(0,Dt.default)(r,{encoding:e,maxBuffer:n}):Dt.default.buffer(r,{maxBuffer:n})},Tn=async({stdout:r,stderr:e,all:t},{encoding:n,buffer:s,maxBuffer:i},a)=>{let c=vt(r,{encoding:n,buffer:s,maxBuffer:i}),l=vt(e,{encoding:n,buffer:s,maxBuffer:i}),h=vt(t,{encoding:n,buffer:s,maxBuffer:i*2});try{return await Promise.all([a,c,l,h])}catch(g){return Promise.all([{error:g,signal:g.signal,timedOut:g.timedOut},Lt(r,c),Lt(e,l),Lt(t,h)])}},Fn=({input:r})=>{if(It(r))throw new TypeError("The `input` option cannot be a stream in sync mode")};var di=(async()=>{})().constructor.prototype,yi=["then","catch","finally"].map(r=>[r,Reflect.getOwnPropertyDescriptor(di,r)]),Ct=(r,e)=>{for(let[t,n]of yi){let s=typeof e=="function"?(...i)=>Reflect.apply(n.value,e(),i):n.value.bind(e);Reflect.defineProperty(r,t,{...n,value:s})}return r},xn=r=>new Promise((e,t)=>{r.on("exit",(n,s)=>{e({exitCode:n,signal:s})}),r.on("error",n=>{t(n)}),r.stdin&&r.stdin.on("error",n=>{t(n)})});var In=(r,e=[])=>Array.isArray(e)?[r,...e]:[r],gi=/^[\w.-]+$/,Pi=/"/g,Si=r=>typeof r!="string"||gi.test(r)?r:`"${r.replace(Pi,'\\"')}"`,Rt=(r,e)=>In(r,e).join(" "),Bt=(r,e)=>In(r,e).map(t=>Si(t)).join(" ");var wi=1e3*1e3*100,ki=({env:r,extendEnv:e,preferLocal:t,localDir:n,execPath:s})=>{let i=e?{...Je.default.env,...r}:r;return t?Qr({env:i,cwd:n,execPath:s}):i},Dn=(r,e,t={})=>{let n=vn.default._parse(r,e,t);return r=n.command,e=n.args,t=n.options,t={maxBuffer:wi,buffer:!0,stripFinalNewline:!0,extendEnv:!0,preferLocal:!1,localDir:t.cwd||Je.default.cwd(),execPath:Je.default.execPath,encoding:"utf8",reject:!0,cleanup:!0,all:!1,windowsHide:!0,...t},t.env=ki(t),t.stdio=tn(t),Je.default.platform==="win32"&&Ln.default.basename(r,".exe")==="cmd"&&e.unshift("/q"),{file:r,args:e,options:t,parsed:n}},Ue=(r,e,t)=>typeof e!="string"&&!An.Buffer.isBuffer(e)?t===void 0?void 0:"":r.stripFinalNewline?kt(e):e;function Mt(r,e,t){let n=Dn(r,e,t),s=Rt(r,e),i=Bt(r,e);pn(n.options);let a;try{a=rt.default.spawn(n.file,n.args,n.options)}catch(E){let T=new rt.default.ChildProcess,L=Promise.reject(Oe({error:E,stdout:"",stderr:"",all:"",command:s,escapedCommand:i,parsed:n,timedOut:!1,isCanceled:!1,killed:!1}));return Ct(T,L)}let c=xn(a),l=mn(a,n.options,c),h=dn(a,n.options,l),g={isCanceled:!1};a.kill=fn.bind(null,a.kill.bind(a)),a.cancel=hn.bind(null,a,g);let S=Vr(async()=>{let[{error:E,exitCode:T,signal:L,timedOut:O},v,q,Q]=await Tn(a,n.options,h),X=Ue(n.options,v),de=Ue(n.options,q),Se=Ue(n.options,Q);if(E||T!==0||L!==null){let ye=Oe({error:E,exitCode:T,signal:L,stdout:X,stderr:de,all:Se,command:s,escapedCommand:i,parsed:n,timedOut:O,isCanceled:g.isCanceled||(n.options.signal?n.options.signal.aborted:!1),killed:a.killed});if(!n.options.reject)return ye;throw ye}return{command:s,escapedCommand:i,exitCode:0,stdout:X,stderr:de,all:Se,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}});return bn(a,n.options.input),a.all=En(a,n.options),Ct(a,S)}function Cn(r,e,t){let n=Dn(r,e,t),s=Rt(r,e),i=Bt(r,e);Fn(n.options);let a;try{a=rt.default.spawnSync(n.file,n.args,n.options)}catch(h){throw Oe({error:h,stdout:"",stderr:"",all:"",command:s,escapedCommand:i,parsed:n,timedOut:!1,isCanceled:!1,killed:!1})}let c=Ue(n.options,a.stdout,a.error),l=Ue(n.options,a.stderr,a.error);if(a.error||a.status!==0||a.signal!==null){let h=Oe({stdout:c,stderr:l,error:a.error,signal:a.signal,exitCode:a.status,command:s,escapedCommand:i,parsed:n,timedOut:a.error&&a.error.code==="ETIMEDOUT",isCanceled:!1,killed:a.signal!==null});if(!n.options.reject)return h;throw h}return{command:s,escapedCommand:i,exitCode:0,stdout:c,stderr:l,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}}var{generateInlinedScript:La}=ts(),va=rs(),_t;function $t(){if(_t)return _t;let r=JSON.parse(Cn("nix",["eval","--impure","--json","--expr","builtins.currentSystem"]).stdout);return _t=r,r}async function ss(r){try{let e=["eval","--json","--impure","--expr",va+`

        getPackages (import ${r})
      `],{stdout:t}=await Mt("nix",e,{stderr:"ignore"});return JSON.parse(t)}catch{return null}}var Da={name:"plugin-nix-store",factory:r=>{let{Configuration:e,Project:t,Cache:n,StreamReport:s,Manifest:i,tgzUtils:a,structUtils:c,miscUtils:l,scriptUtils:h}=r("@yarnpkg/core"),{BaseCommand:g}=r("@yarnpkg/cli"),{xfs:p,CwdFS:S,PortablePath:E,VirtualFS:T}=r("@yarnpkg/fslib"),{ZipOpenFS:L}=r("@yarnpkg/libzip"),{getPnpPath:O,pnpUtils:v}=r("@yarnpkg/plugin-pnp"),{fileUtils:q}=r("@yarnpkg/plugin-file"),{Option:Q}=r("clipanion"),X=r("typanion");class de extends g{constructor(){super(...arguments);this.locator=Q.String({validator:X.isString()});this.outDirectory=Q.String({validator:X.isString()})}async execute(){let W=await e.find(process.cwd(),this.context.plugins),{project:A,workspace:R}=await t.find(W,process.cwd()),H=W.makeFetcher(),z=await s.start({configuration:W,stdout:this.context.stdout,includeLogs:!this.context.quiet},async B=>{W.values.set("enableMirror",!1);let I={...JSON.parse(this.locator),locatorHash:"",identHash:""};c.isVirtualLocator(I)&&(I=c.devirtualizeLocator(I));let re={checksums:new Map,project:A,cache:new n(this.outDirectory,{check:!1,configuration:W,immutable:!1}),fetcher:H,report:B},Z=await H.fetch(I,re);ge.default.renameSync(Z.packageFs.target,Pe.default.join(this.outDirectory,"output.zip"))})}}de.paths=[["nix","fetch-by-locator"]];class Se extends g{constructor(){super(...arguments);this.packageRegistryDataPath=Q.String({validator:X.isString()})}async execute(){var z;let W=await e.find(process.cwd(),this.context.plugins),A=new t(process.cwd(),{configuration:W});await A.setupResolutions();let R=JSON.parse(ge.default.readFileSync(this.packageRegistryDataPath,"utf8")),H=Object.values(R).filter(B=>!!(B!=null&&B.manifest));for(let B of H){let I=B.manifest,re=new Map,Z=new Map(Object.entries(I.bin??{})),w={identHash:I.descriptorIdentHash,scope:I.scope,name:I.flatName,locatorHash:I.locatorHash,reference:I.reference,languageName:I.languageName,linkType:I.linkType,conditions:null,dependencies:re,bin:Z};A.originalPackages.set(I.locatorHash,w),A.storedResolutions.set(I.descriptorHash,I.locatorHash),I.checksum!=null&&A.storedChecksums.set(I.locatorHash,I.checksum);let f={identHash:I.descriptorIdentHash,scope:I.scope,name:I.flatName,descriptorHash:I.descriptorHash,range:I.descriptorRange};A.storedDescriptors.set(I.descriptorHash,f)}for(let B of H){let I=A.originalPackages.get(B.manifest.locatorHash);if(!I)continue;let re=B.packageDependencies??{};for(let Z of Object.keys(re)){let[w,f]=re[Z],u=H.find(y=>{var o,d;return((o=y==null?void 0:y.manifest)==null?void 0:o.name)===w&&((d=y==null?void 0:y.manifest)==null?void 0:d.reference)===f});if(((z=u==null?void 0:u.manifest)==null?void 0:z.descriptorHash)!=null){let y=A.storedDescriptors.get(u.manifest.descriptorHash);y!=null&&I.dependencies.set(u.manifest.descriptorHash,y)}}}A.storedPackages=A.originalPackages,await A.persistLockfile()}}Se.paths=[["nix","create-lockfile"]];class ye extends g{constructor(){super(...arguments);this.locator=Q.String({validator:X.isString()});this.tgzPath=Q.String({validator:X.isString()});this.outPath=Q.String({validator:X.isString()})}async execute(){let W=await e.find(process.cwd(),this.context.plugins),{project:A,workspace:R}=await t.find(W,process.cwd()),H={...JSON.parse(this.locator),locatorHash:"",identHash:""},{path:z}=await a.convertToZip(ge.default.readFileSync(this.tgzPath),{compressionLevel:A.configuration.get("compressionLevel"),prefixPath:c.getIdentVendorPath(H),stripComponents:1});ge.default.copyFileSync(z,this.outPath)}}ye.paths=[["nix","convert-to-zip"]];class xe extends g{constructor(){super(...arguments);this.outDirectory=Q.String({validator:X.isString()});this.packageRegistryDataPath=Q.String({validator:X.isString()});this.topLevelPackageDirectory=Q.String({validator:X.isString()})}async execute(){var b;let W=await e.find(process.cwd(),this.context.plugins),{project:A,workspace:R}=await t.find(W,process.cwd()),H=O({cwd:this.outDirectory}),z=A.configuration.get("pnpFallbackMode"),B=[],I=z!=="none",re=new Map,Z=l.buildIgnorePattern([".yarn/sdks/**",...A.configuration.get("pnpIgnorePatterns")]),w=A.configuration.get("pnpShebang"),f=new Map,u=JSON.parse(ge.default.readFileSync(this.packageRegistryDataPath,"utf8")),y=null;for(let k of Object.keys(u)){let P=u[k];if(!P)continue;let C={name:P.manifest.flatName,scope:P.manifest.scope,reference:P.manifest.reference,locatorHash:P.manifest.locatorHash},F=c.isVirtualLocator(P),ne=new Map,G=new Set;for(let ue of((b=P.manifest)==null?void 0:b.packagePeers)??[])ne.set(ue,null),G.add(ue);if(P.packageDependencies!=null)for(let ue of Object.keys(P.packageDependencies))ne.set(ue,P.packageDependencies[ue]);let oe=P.drvPath+"/node_modules/"+P.name,j=Pe.default.relative(this.outDirectory,oe),le=(j.startsWith("../")?j:"./"+j)+"/";F&&(le="./"+T.makeVirtualPath("./.yarn/__virtual__",c.slugifyLocator(C),j)+"/");let we={packageLocation:le,packageDependencies:ne,packagePeers:G,linkType:P.linkType};l.getMapWithDefault(f,P.name).set(P.reference,we),C.reference.startsWith("workspace:")&&B.push({name:c.stringifyIdent(C),reference:C.reference}),oe.includes(this.topLevelPackageDirectory)&&(y=we)}if(y!=null)l.getMapWithDefault(f,null).set(null,y);else throw new Error("Could not determine topLevelPackage, this is NEEDED for the .pnp.cjs to be correctly generated");let d=La({dependencyTreeRoots:B,enableTopLevelFallback:I,fallbackExclusionList:z==="dependencies-only"?B:[],fallbackPool:re,ignorePattern:Z,packageRegistry:f,shebang:w});await p.changeFilePromise(H.cjs,d,{automaticNewlines:!0,mode:493})}}xe.paths=[["nix","generate-pnp-file"]];class Ye extends g{constructor(){super(...arguments);this.locator=Q.String({validator:X.isString()});this.pnpRootDirectory=Q.String({validator:X.isString()});this.packageDirectory=Q.String({validator:X.isString()})}async execute(){let W=await e.find(process.cwd(),this.context.plugins),{project:A,workspace:R}=await t.find(W,process.cwd()),H=A.originalPackages.get(this.locator);A.cwd=this.pnpRootDirectory,A.storedPackages=A.originalPackages;let z=await L.openPromise(async B=>{let I=A.configuration.getLinkers(),re={project:A,report:new s({stdout:new ns.PassThrough,configuration:W})},Z=I.find(y=>y.supportsPackage(H,re));if(!Z)throw new Error(`The package ${c.prettyLocator(A.configuration,H)} isn't supported by any of the available linkers`);let w=await Z.findPackageLocation(H,re),f=new S(w,{baseFs:B});return await i.find(E.dot,{baseFs:f})});for(let B of["preinstall","install","postinstall"]){if(!z.scripts.has(B))continue;let I=await h.executePackageScript(H,B,[],{cwd:this.packageDirectory,project:A,stdin:process.stdin,stdout:process.stdout,stderr:process.stderr});if(I>0)return I}}}return Ye.paths=[["nix","run-build-scripts"]],{hooks:{afterAllInstalled:async(D,ae)=>{let W=D.configuration.getLinkers(),A={project:D,report:null},R=await ss(Pe.default.join(D.cwd,"yarn-manifest.nix")),H=new Map(W.map(y=>{let o=y.makeInstaller(A),d=y.getCustomDataKey(),b=D.linkersCustomData.get(d);return typeof b<"u"&&o.attachCustomData(b),[y,o]})),z=D.configuration.makeFetcher(),B={checksums:new Map,project:D,cache:null,fetcher:z,report:null},I=D.configuration.makeResolver(),re={project:D,report:ae.report,resolver:I},Z={};for(let[y,o]of D.storedPackages){let d=c.isVirtualLocator(o),b=d?D.storedPackages.get(c.devirtualizeLocator(o).locatorHash):o,k=W.find(N=>N.supportsPackage(b,A)),P=H.get(k),C=z.getLocalPath(b,B);if(!C){let N=q.parseSpec(b.reference);if((N==null?void 0:N.parentLocator)!=null&&(N==null?void 0:N.path)!=null){let te=z.getLocalPath(N.parentLocator,B),_=Pe.default.resolve(te,N.path);_!=null&&(C=_)}}let F=C!=null?"./"+Pe.default.relative(D.cwd,C):null,ne=o.reference.startsWith("workspace:")?`./${o.reference.substring(10)}`:F??null,G=o.bin!=null?Object.fromEntries(o.bin):null,oe=ne!=null?!0:(P==null?void 0:P.shouldBeUnplugged)!=null?P.customData.store.get(o.locatorHash)!=null?P.shouldBeUnplugged(o,P.customData.store.get(o.locatorHash),D.getDependencyMeta(c.isVirtualLocator(o)?c.devirtualizeLocator(o):o,o.version)):!1:!0,j=!ne&&!oe,le=null;if(o.conditions!=null){let N=o.conditions.split("&").map(_=>_.trim().split("=")),te=[];for(let _ of N){let he=_[0],Me=_[1];if(he==="os")Me==="linux"?te.push("stdenv.isLinux"):Me==="darwin"?te.push("stdenv.isDarwin"):te.push("false");else if(he==="cpu"){let tr={ia32:"stdenv.isi686",x64:"stdenv.isx86_64",arm:"stdenv.isAarch32",arm64:"stdenv.isAarch64"};tr[Me]!=null?te.push(tr[Me]):te.push("false")}else he==="libc"&&Me!=="glibc"&&te.push("false")}te.length>0&&(le=`stdenv: ${te.map(_=>`(${_})`).join(" && ")}`)}let we=(await Promise.all(Array.from(o.dependencies).map(async([N,te])=>{let _=D.storedResolutions.get(te.descriptorHash),he=_!=null?D.storedPackages.get(_):null;return he?{key:N,name:c.stringifyIdent(te),packageManifestId:c.stringifyIdent(he)+"@"+he.reference}:(console.log("failed to resolve",te),null)}))).filter(N=>!!N),ue=[];for(let N of o.peerDependencies.values())ue.push(c.stringifyIdent(N));let K=c.stringifyIdent(o)+"@"+o.reference,$=R==null?void 0:R[K],ee=$==null?void 0:$.outputHash,ce=($==null?void 0:$.outputHashByPlatform)??{};await async function(){var N;if(ne!=null){ee=null,ce=null;return}else if(j){ee=(N=D.storedChecksums.get(o.locatorHash))==null?void 0:N.substring(2),ce=null;return}else if(oe){if(ce[$t()]){ee=null;return}else{let _=v.getUnpluggedPath(o,{configuration:D.configuration});if(_!=null&&await p.existsPromise(_)){let he=await Mt("nix",["hash","path","--type","sha512",_]);if(he.stdout!=null){ee=null,ce||(ce={}),ce[$t()]=he.stdout;return}}else if(Object.keys(ce).length>0&&ee==null)return}ee="",ce=null;return}else{ee=null,ce=null;return}}();let er=Ca(D.storedResolutions,o.locatorHash),Be=D.storedDescriptors.get(er),is=D.storedChecksums.get(o.locatorHash);Z[K]={isVirtual:d,canonicalPackage:b,name:c.stringifyIdent(o),reference:o.reference,locatorHash:o.locatorHash,linkType:o.linkType,outputName:[c.stringifyIdent(o),o.version,o.locatorHash.substring(0,10)].filter(N=>!!N).join("-").replace(/@/g,"").replace(/[\/]/g,"-"),outputHash:ee,outputHashByPlatform:ce,src:ne,shouldBeUnplugged:oe,installCondition:le,bin:G,flatName:o.name,descriptor:Be,languageName:o.languageName,scope:o.scope,checksum:is,dependencies:we,packagePeers:ue}}let w=[];w.push('# This file is generated by running "yarn install" inside your project.'),w.push("# It is essentially a version of yarn.lock that Nix can better understand"),w.push("# Manual changes WILL be lost - proceed with caution!"),w.push("let"),w.push("  packages = {");function f(y,o){if(o.length>0){w.push(`      ${y} = {`);for(let d of o)w.push(`        ${JSON.stringify(d.name)} = packages.${JSON.stringify(d.packageManifestId)};`);w.push("      };")}}let u=Object.keys(Z).sort((y,o)=>y.localeCompare(o));for(let y of u){let o=Z[y];if(w.push(`    "${y}" = {`),w.push(`      name = ${JSON.stringify(o.name)};`),w.push(`      reference = ${JSON.stringify(o.reference)};`),o.isVirtual&&o.canonicalPackage!=null&&w.push(`      canonicalPackage = packages.${JSON.stringify(`${c.stringifyIdent(o.canonicalPackage)}@${o.canonicalPackage.reference}`)};`),!o.isVirtual){if(w.push(`      locatorHash = ${JSON.stringify(o.locatorHash)};`),w.push(`      linkType = ${JSON.stringify(o.linkType)};`),w.push(`      outputName = ${JSON.stringify(o.outputName)};`),o.outputHash!=null&&w.push(`      outputHash = ${JSON.stringify(o.outputHash)};`),o.outputHashByPlatform&&Object.keys(o.outputHashByPlatform).length>0){w.push("      outputHashByPlatform = {");for(let d of Object.keys(o.outputHashByPlatform))w.push(`        ${JSON.stringify(d)} = ${JSON.stringify(o.outputHashByPlatform[d])};`);w.push("      };")}if(o.src&&w.push(`      src = ${o.src};`),o.shouldBeUnplugged&&w.push(`      shouldBeUnplugged = ${o.shouldBeUnplugged};`),o.installCondition&&w.push(`      installCondition = ${o.installCondition};`),w.push(`      flatName = ${JSON.stringify(o.flatName)};`),w.push(`      descriptorHash = ${JSON.stringify(o.descriptor.descriptorHash)};`),w.push(`      languageName = ${JSON.stringify(o.languageName)};`),w.push(`      scope = ${JSON.stringify(o.scope)};`),w.push(`      descriptorRange = ${JSON.stringify(o.descriptor.range)};`),w.push(`      descriptorIdentHash = ${JSON.stringify(o.descriptor.identHash)};`),o.checksum&&w.push(`      checksum = ${JSON.stringify(o.checksum)};`),o.bin&&Object.keys(o.bin).length>0){w.push("      bin = {");for(let d of Object.keys(o.bin))w.push(`        ${JSON.stringify(d)} = ${JSON.stringify(o.bin[d])};`);w.push("      };")}}if(f("dependencies",o.dependencies),!o.isVirtual&&o.packagePeers&&o.packagePeers.length>0){w.push("      packagePeers = [");for(let d of o.packagePeers)w.push(`        ${JSON.stringify(d)}`);w.push("      ];")}w.push("    };")}w.push("  };"),w.push("in"),w.push("packages"),w.push(""),ge.default.writeFileSync(Pe.default.join(D.cwd,"yarn-manifest.nix"),w.join(`
`),"utf8")},populateYarnPaths:async D=>{let ae=process.env.YARNNIX_PACKAGE_REGISTRY_DATA_PATH;if(ae){let W=JSON.parse(ge.default.readFileSync(ae,"utf8")),A=Object.values(W).filter(R=>!!(R!=null&&R.manifest));for(let R of A)R.manifest.reference.startsWith("workspace:")&&R.drvPath!==process.env.out&&await D.addWorkspace(Pe.default.join(R.drvPath,"node_modules",R.manifest.name))}}},commands:[Se,de,ye,xe,Ye]}}};function Ca(r,e){for(let[t,n]of r.entries())if(n===e)return t}module.exports=Da;0&&(module.exports={getExistingYarnManifest,nixCurrentSystem});
/**
  @license
  Copyright Node.js contributors. All rights reserved.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
*/
//# sourceMappingURL=data:application/json;base64,
