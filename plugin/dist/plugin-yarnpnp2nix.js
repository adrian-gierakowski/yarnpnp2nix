/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-yarnpnp2nix",
factory: function (require) {
var plugin=(()=>{var Ji=Object.create;var Ze=Object.defineProperty;var Zi=Object.getOwnPropertyDescriptor;var ji=Object.getOwnPropertyNames;var Yi=Object.getPrototypeOf,Ki=Object.prototype.hasOwnProperty;var L=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,n)=>(typeof require<"u"?require:e)[n]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});var G=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Xi=(t,e)=>{for(var n in e)Ze(t,n,{get:e[n],enumerable:!0})},bn=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of ji(e))!Ki.call(t,i)&&i!==n&&Ze(t,i,{get:()=>e[i],enumerable:!(r=Zi(e,i))||r.enumerable});return t};var Y=(t,e,n)=>(n=t!=null?Ji(Yi(t)):{},bn(e||!t||!t.__esModule?Ze(n,"default",{value:t,enumerable:!0}):n,t)),Vi=t=>bn(Ze({},"__esModule",{value:!0}),t);var Ln=G((Aa,Tn)=>{Tn.exports=En;En.sync=_i;var kn=L("fs");function Qi(t,e){var n=e.pathExt!==void 0?e.pathExt:process.env.PATHEXT;if(!n||(n=n.split(";"),n.indexOf("")!==-1))return!0;for(var r=0;r<n.length;r++){var i=n[r].toLowerCase();if(i&&t.substr(-i.length).toLowerCase()===i)return!0}return!1}function wn(t,e,n){return!t.isSymbolicLink()&&!t.isFile()?!1:Qi(e,n)}function En(t,e,n){kn.stat(t,function(r,i){n(r,r?!1:wn(i,t,e))})}function _i(t,e){return wn(kn.statSync(t),t,e)}});var xn=G((Ba,Nn)=>{Nn.exports=Fn;Fn.sync=$i;var Rn=L("fs");function Fn(t,e,n){Rn.stat(t,function(r,i){n(r,r?!1:vn(i,e))})}function $i(t,e){return vn(Rn.statSync(t),e)}function vn(t,e){return t.isFile()&&es(t,e)}function es(t,e){var n=t.mode,r=t.uid,i=t.gid,s=e.uid!==void 0?e.uid:process.getuid&&process.getuid(),o=e.gid!==void 0?e.gid:process.getgid&&process.getgid(),a=parseInt("100",8),c=parseInt("010",8),u=parseInt("001",8),P=a|c,l=n&u||n&c&&i===o||n&a&&r===s||n&P&&s===0;return l}});var In=G((Ma,On)=>{var Ga=L("fs"),je;process.platform==="win32"||global.TESTING_WINDOWS?je=Ln():je=xn();On.exports=St;St.sync=ts;function St(t,e,n){if(typeof e=="function"&&(n=e,e={}),!n){if(typeof Promise!="function")throw new TypeError("callback not provided");return new Promise(function(r,i){St(t,e||{},function(s,o){s?i(s):r(o)})})}je(t,e||{},function(r,i){r&&(r.code==="EACCES"||e&&e.ignoreErrors)&&(r=null,i=!1),n(r,i)})}function ts(t,e){try{return je.sync(t,e||{})}catch(n){if(e&&e.ignoreErrors||n.code==="EACCES")return!1;throw n}}});var Mn=G((za,Gn)=>{var be=process.platform==="win32"||process.env.OSTYPE==="cygwin"||process.env.OSTYPE==="msys",Dn=L("path"),ns=be?";":":",Un=In(),Cn=t=>Object.assign(new Error(`not found: ${t}`),{code:"ENOENT"}),An=(t,e)=>{let n=e.colon||ns,r=t.match(/\//)||be&&t.match(/\\/)?[""]:[...be?[process.cwd()]:[],...(e.path||process.env.PATH||"").split(n)],i=be?e.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",s=be?i.split(n):[""];return be&&t.indexOf(".")!==-1&&s[0]!==""&&s.unshift(""),{pathEnv:r,pathExt:s,pathExtExe:i}},Bn=(t,e,n)=>{typeof e=="function"&&(n=e,e={}),e||(e={});let{pathEnv:r,pathExt:i,pathExtExe:s}=An(t,e),o=[],a=u=>new Promise((P,l)=>{if(u===r.length)return e.all&&o.length?P(o):l(Cn(t));let g=r[u],b=/^".*"$/.test(g)?g.slice(1,-1):g,T=Dn.join(b,t),f=!b&&/^\.[\\\/]/.test(t)?t.slice(0,2)+T:T;P(c(f,u,0))}),c=(u,P,l)=>new Promise((g,b)=>{if(l===i.length)return g(a(P+1));let T=i[l];Un(u+T,{pathExt:s},(f,F)=>{if(!f&&F)if(e.all)o.push(u+T);else return g(u+T);return g(c(u,P,l+1))})});return n?a(0).then(u=>n(null,u),n):a(0)},rs=(t,e)=>{e=e||{};let{pathEnv:n,pathExt:r,pathExtExe:i}=An(t,e),s=[];for(let o=0;o<n.length;o++){let a=n[o],c=/^".*"$/.test(a)?a.slice(1,-1):a,u=Dn.join(c,t),P=!c&&/^\.[\\\/]/.test(t)?t.slice(0,2)+u:u;for(let l=0;l<r.length;l++){let g=P+r[l];try{if(Un.sync(g,{pathExt:i}))if(e.all)s.push(g);else return g}catch{}}}if(e.all&&s.length)return s;if(e.nothrow)return null;throw Cn(t)};Gn.exports=Bn;Bn.sync=rs});var Hn=G((Ha,bt)=>{"use strict";var zn=(t={})=>{let e=t.env||process.env;return(t.platform||process.platform)!=="win32"?"PATH":Object.keys(e).reverse().find(r=>r.toUpperCase()==="PATH")||"Path"};bt.exports=zn;bt.exports.default=zn});var Zn=G((qa,Jn)=>{"use strict";var qn=L("path"),is=Mn(),ss=Hn();function Wn(t,e){let n=t.options.env||process.env,r=process.cwd(),i=t.options.cwd!=null,s=i&&process.chdir!==void 0&&!process.chdir.disabled;if(s)try{process.chdir(t.options.cwd)}catch{}let o;try{o=is.sync(t.command,{path:n[ss({env:n})],pathExt:e?qn.delimiter:void 0})}catch{}finally{s&&process.chdir(r)}return o&&(o=qn.resolve(i?t.options.cwd:"",o)),o}function os(t){return Wn(t)||Wn(t,!0)}Jn.exports=os});var jn=G((Wa,wt)=>{"use strict";var kt=/([()\][%!^"`<>&|;, *?])/g;function as(t){return t=t.replace(kt,"^$1"),t}function cs(t,e){return t=`${t}`,t=t.replace(/(\\*)"/g,'$1$1\\"'),t=t.replace(/(\\*)$/,"$1$1"),t=`"${t}"`,t=t.replace(kt,"^$1"),e&&(t=t.replace(kt,"^$1")),t}wt.exports.command=as;wt.exports.argument=cs});var Kn=G((Ja,Yn)=>{"use strict";Yn.exports=/^#!(.*)/});var Vn=G((Za,Xn)=>{"use strict";var ls=Kn();Xn.exports=(t="")=>{let e=t.match(ls);if(!e)return null;let[n,r]=e[0].replace(/#! ?/,"").split(" "),i=n.split("/").pop();return i==="env"?r:r?`${i} ${r}`:i}});var _n=G((ja,Qn)=>{"use strict";var Et=L("fs"),us=Vn();function fs(t){let n=Buffer.alloc(150),r;try{r=Et.openSync(t,"r"),Et.readSync(r,n,0,150,0),Et.closeSync(r)}catch{}return us(n.toString())}Qn.exports=fs});var nr=G((Ya,tr)=>{"use strict";var ms=L("path"),$n=Zn(),er=jn(),ds=_n(),hs=process.platform==="win32",ps=/\.(?:com|exe)$/i,Ps=/node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;function ys(t){t.file=$n(t);let e=t.file&&ds(t.file);return e?(t.args.unshift(t.file),t.command=e,$n(t)):t.file}function gs(t){if(!hs)return t;let e=ys(t),n=!ps.test(e);if(t.options.forceShell||n){let r=Ps.test(e);t.command=ms.normalize(t.command),t.command=er.command(t.command),t.args=t.args.map(s=>er.argument(s,r));let i=[t.command].concat(t.args).join(" ");t.args=["/d","/s","/c",`"${i}"`],t.command=process.env.comspec||"cmd.exe",t.options.windowsVerbatimArguments=!0}return t}function Ss(t,e,n){e&&!Array.isArray(e)&&(n=e,e=null),e=e?e.slice(0):[],n=Object.assign({},n);let r={command:t,args:e,options:n,file:void 0,original:{command:t,args:e}};return n.shell?r:gs(r)}tr.exports=Ss});var sr=G((Ka,ir)=>{"use strict";var Tt=process.platform==="win32";function Lt(t,e){return Object.assign(new Error(`${e} ${t.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${e} ${t.command}`,path:t.command,spawnargs:t.args})}function bs(t,e){if(!Tt)return;let n=t.emit;t.emit=function(r,i){if(r==="exit"){let s=rr(i,e,"spawn");if(s)return n.call(t,"error",s)}return n.apply(t,arguments)}}function rr(t,e){return Tt&&t===1&&!e.file?Lt(e.original,"spawn"):null}function ks(t,e){return Tt&&t===1&&!e.file?Lt(e.original,"spawnSync"):null}ir.exports={hookChildProcess:bs,verifyENOENT:rr,verifyENOENTSync:ks,notFoundError:Lt}});var cr=G((Xa,ke)=>{"use strict";var or=L("child_process"),Rt=nr(),Ft=sr();function ar(t,e,n){let r=Rt(t,e,n),i=or.spawn(r.command,r.args,r.options);return Ft.hookChildProcess(i,r),i}function ws(t,e,n){let r=Rt(t,e,n),i=or.spawnSync(r.command,r.args,r.options);return i.error=i.error||Ft.verifyENOENTSync(i.status,r),i}ke.exports=ar;ke.exports.spawn=ar;ke.exports.sync=ws;ke.exports._parse=Rt;ke.exports._enoent=Ft});var wr=G((hc,Ve)=>{Ve.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"];process.platform!=="win32"&&Ve.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT");process.platform==="linux"&&Ve.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")});var Fr=G((pc,Le)=>{var U=global.process,fe=function(t){return t&&typeof t=="object"&&typeof t.removeListener=="function"&&typeof t.emit=="function"&&typeof t.reallyExit=="function"&&typeof t.listeners=="function"&&typeof t.kill=="function"&&typeof t.pid=="number"&&typeof t.on=="function"};fe(U)?(Er=L("assert"),Ee=wr(),Tr=/^win/i.test(U.platform),De=L("events"),typeof De!="function"&&(De=De.EventEmitter),U.__signal_exit_emitter__?q=U.__signal_exit_emitter__:(q=U.__signal_exit_emitter__=new De,q.count=0,q.emitted={}),q.infinite||(q.setMaxListeners(1/0),q.infinite=!0),Le.exports=function(t,e){if(!fe(global.process))return function(){};Er.equal(typeof t,"function","a callback must be provided for exit handler"),Te===!1&&Ot();var n="exit";e&&e.alwaysLast&&(n="afterexit");var r=function(){q.removeListener(n,t),q.listeners("exit").length===0&&q.listeners("afterexit").length===0&&Qe()};return q.on(n,t),r},Qe=function(){!Te||!fe(global.process)||(Te=!1,Ee.forEach(function(e){try{U.removeListener(e,_e[e])}catch{}}),U.emit=$e,U.reallyExit=It,q.count-=1)},Le.exports.unload=Qe,me=function(e,n,r){q.emitted[e]||(q.emitted[e]=!0,q.emit(e,n,r))},_e={},Ee.forEach(function(t){_e[t]=function(){if(fe(global.process)){var n=U.listeners(t);n.length===q.count&&(Qe(),me("exit",null,t),me("afterexit",null,t),Tr&&t==="SIGHUP"&&(t="SIGINT"),U.kill(U.pid,t))}}}),Le.exports.signals=function(){return Ee},Te=!1,Ot=function(){Te||!fe(global.process)||(Te=!0,q.count+=1,Ee=Ee.filter(function(e){try{return U.on(e,_e[e]),!0}catch{return!1}}),U.emit=Rr,U.reallyExit=Lr)},Le.exports.load=Ot,It=U.reallyExit,Lr=function(e){fe(global.process)&&(U.exitCode=e||0,me("exit",U.exitCode,null),me("afterexit",U.exitCode,null),It.call(U,U.exitCode))},$e=U.emit,Rr=function(e,n){if(e==="exit"&&fe(global.process)){n!==void 0&&(U.exitCode=n);var r=$e.apply(this,arguments);return me("exit",U.exitCode,null),me("afterexit",U.exitCode,null),r}else return $e.apply(this,arguments)}):Le.exports=function(){return function(){}};var Er,Ee,Tr,De,q,Qe,me,_e,Te,Ot,It,Lr,$e,Rr});var Mr=G((bc,Gr)=>{"use strict";var{PassThrough:Ys}=L("stream");Gr.exports=t=>{t={...t};let{array:e}=t,{encoding:n}=t,r=n==="buffer",i=!1;e?i=!(n||r):n=n||"utf8",r&&(n=null);let s=new Ys({objectMode:i});n&&s.setEncoding(n);let o=0,a=[];return s.on("data",c=>{a.push(c),i?o=a.length:o+=c.length}),s.getBufferedValue=()=>e?a:r?Buffer.concat(a,o):a.join(""),s.getBufferedLength=()=>o,s}});var zr=G((kc,Ue)=>{"use strict";var{constants:Ks}=L("buffer"),Xs=L("stream"),{promisify:Vs}=L("util"),Qs=Mr(),_s=Vs(Xs.pipeline),tt=class extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}};async function Ct(t,e){if(!t)throw new Error("Expected a stream");e={maxBuffer:1/0,...e};let{maxBuffer:n}=e,r=Qs(e);return await new Promise((i,s)=>{let o=a=>{a&&r.getBufferedLength()<=Ks.MAX_LENGTH&&(a.bufferedData=r.getBufferedValue()),s(a)};(async()=>{try{await _s(t,r),i()}catch(a){o(a)}})(),r.on("data",()=>{r.getBufferedLength()>n&&o(new tt)})}),r.getBufferedValue()}Ue.exports=Ct;Ue.exports.buffer=(t,e)=>Ct(t,{...e,encoding:"buffer"});Ue.exports.array=(t,e)=>Ct(t,{...e,array:!0});Ue.exports.MaxBufferError=tt});var qr=G((wc,Hr)=>{"use strict";var{PassThrough:$s}=L("stream");Hr.exports=function(){var t=[],e=new $s({objectMode:!0});return e.setMaxListeners(0),e.add=n,e.isEmpty=r,e.on("unpipe",i),Array.prototype.slice.call(arguments).forEach(n),e;function n(s){return Array.isArray(s)?(s.forEach(n),this):(t.push(s),s.once("end",i.bind(null,s)),s.once("error",e.emit.bind(e,"error")),s.pipe(e,{end:!1}),this)}function r(){return t.length==0}function i(s){t=t.filter(function(o){return o!==s}),!t.length&&e.readable&&e.end()}}});var ui=G((Wc,ho)=>{ho.exports=`# This file can't import anything as we include the contents of this file
# directly in nix eval --apply arguments (see how this file is included in runner/src/common.ts)

with builtins;

let
  nameValuePair = name: value: { inherit name value; };

  filterAttrs = pred: set:
    listToAttrs (concatMap (name: let v = set.\${name}; in if pred name v then [(nameValuePair name v)] else []) (attrNames set));

  ##

  getPackages = manifest:
    mapAttrs (name: pkg:
      filterAttrs (key: b: (builtins.elem key [
        "name"
        "outputHash"
        "outputHashByPlatform"
      ])) pkg
    ) manifest;
in
`});var Mi=G($=>{"use strict";Object.defineProperty($,"__esModule",{value:!0});var po=L("zlib"),ki=L("path"),de=L("module"),B=L("url"),fi=L("util"),Po=L("assert"),yo=L("fs"),go=L("crypto"),So=L("os"),ft=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},wi=ft(po),ot=ft(ki),bo=ft(Po),ko=ft(yo),Ei=(t=>(t.HARD="HARD",t.SOFT="SOFT",t))(Ei||{}),wo=456789e3,Qt={root:"/",dot:".",parent:".."},at={home:"~",nodeModules:"node_modules",manifest:"package.json",lockfile:"yarn.lock",virtual:"__virtual__",pnpJs:".pnp.js",pnpCjs:".pnp.cjs",pnpData:".pnp.data.json",pnpEsmLoader:".pnp.loader.mjs",rc:".yarnrc.yml",env:".env"},d=Object.create(ot.default),N=Object.create(ot.default.posix);d.cwd=()=>process.cwd();N.cwd=process.platform==="win32"?()=>on(process.cwd()):process.cwd;process.platform==="win32"&&(N.resolve=(...t)=>t.length>0&&N.isAbsolute(t[0])?ot.default.posix.resolve(...t):ot.default.posix.resolve(N.cwd(),...t));var Ti=function(t,e,n){return e=t.normalize(e),n=t.normalize(n),e===n?".":(e.endsWith(t.sep)||(e=e+t.sep),n.startsWith(e)?n.slice(e.length):null)};d.contains=(t,e)=>Ti(d,t,e);N.contains=(t,e)=>Ti(N,t,e);var Eo=/^([a-zA-Z]:.*)$/,To=/^\/\/(\.\/)?(.*)$/,Lo=/^\/([a-zA-Z]:.*)$/,Ro=/^\/unc\/(\.dot\/)?(.*)$/;function Fo(t){let e,n;if(e=t.match(Lo))t=e[1];else if(n=t.match(Ro))t=`\\\\${n[1]?".\\":""}${n[2]}`;else return t;return t.replace(/\//g,"\\")}function vo(t){t=t.replace(/\\/g,"/");let e,n;return(e=t.match(Eo))?t=`/${e[1]}`:(n=t.match(To))&&(t=`/unc/${n[1]?".dot/":""}${n[2]}`),t}var on=process.platform==="win32"?vo:t=>t,Li=process.platform==="win32"?Fo:t=>t;d.fromPortablePath=Li;d.toPortablePath=on;function Ri(t,e){return t===d?Li(e):on(e)}var pe=new Date(wo*1e3),No=pe.getTime();async function xo(t,e,n,r,i){let s=t.pathUtils.normalize(e),o=n.pathUtils.normalize(r),a=[],c=[],{atime:u,mtime:P}=i.stableTime?{atime:pe,mtime:pe}:await n.lstatPromise(o);await t.mkdirpPromise(t.pathUtils.dirname(e),{utimes:[u,P]}),await _t(a,c,t,s,n,o,{...i,didParentExist:!0});for(let l of a)await l();await Promise.all(c.map(l=>l()))}async function _t(t,e,n,r,i,s,o){let a=o.didParentExist?await Fi(n,r):null,c=await i.lstatPromise(s),{atime:u,mtime:P}=o.stableTime?{atime:pe,mtime:pe}:c,l;switch(!0){case c.isDirectory():l=await Oo(t,e,n,r,a,i,s,c,o);break;case c.isFile():l=await Uo(t,e,n,r,a,i,s,c,o);break;case c.isSymbolicLink():l=await Co(t,e,n,r,a,i,s,c,o);break;default:throw new Error(`Unsupported file type (${c.mode})`)}return(o.linkStrategy?.type!=="HardlinkFromIndex"||!c.isFile())&&((l||a?.mtime?.getTime()!==P.getTime()||a?.atime?.getTime()!==u.getTime())&&(e.push(()=>n.lutimesPromise(r,u,P)),l=!0),(a===null||(a.mode&511)!==(c.mode&511))&&(e.push(()=>n.chmodPromise(r,c.mode&511)),l=!0)),l}async function Fi(t,e){try{return await t.lstatPromise(e)}catch{return null}}async function Oo(t,e,n,r,i,s,o,a,c){if(i!==null&&!i.isDirectory())if(c.overwrite)t.push(async()=>n.removePromise(r)),i=null;else return!1;let u=!1;i===null&&(t.push(async()=>{try{await n.mkdirPromise(r,{mode:a.mode})}catch(g){if(g.code!=="EEXIST")throw g}}),u=!0);let P=await s.readdirPromise(o),l=c.didParentExist&&!i?{...c,didParentExist:!1}:c;if(c.stableSort)for(let g of P.sort())await _t(t,e,n,n.pathUtils.join(r,g),s,s.pathUtils.join(o,g),l)&&(u=!0);else(await Promise.all(P.map(async b=>{await _t(t,e,n,n.pathUtils.join(r,b),s,s.pathUtils.join(o,b),l)}))).some(b=>b)&&(u=!0);return u}async function Io(t,e,n,r,i,s,o,a,c,u){let P=await s.checksumFilePromise(o,{algorithm:"sha1"}),l=420,g=a.mode&511,b=`${P}${g!==l?g.toString(8):""}`,T=n.pathUtils.join(u.indexPath,P.slice(0,2),`${b}.dat`),f;(C=>{C[C.Lock=0]="Lock",C[C.Rename=1]="Rename"})(f||(f={}));let F=1,v=await Fi(n,T);if(i){let C=v&&i.dev===v.dev&&i.ino===v.ino,H=v?.mtimeMs!==No;if(C&&H&&u.autoRepair&&(F=0,v=null),!C)if(c.overwrite)t.push(async()=>n.removePromise(r)),i=null;else return!1}let D=!v&&F===1?`${T}.${Math.floor(Math.random()*4294967296).toString(16).padStart(8,"0")}`:null,O=!1;return t.push(async()=>{if(!v&&(F===0&&await n.lockPromise(T,async()=>{let C=await s.readFilePromise(o);await n.writeFilePromise(T,C)}),F===1&&D)){let C=await s.readFilePromise(o);await n.writeFilePromise(D,C);try{await n.linkPromise(D,T)}catch(H){if(H.code==="EEXIST")O=!0,await n.unlinkPromise(D);else throw H}}i||await n.linkPromise(T,r)}),e.push(async()=>{v||(await n.lutimesPromise(T,pe,pe),g!==l&&await n.chmodPromise(T,g)),D&&!O&&await n.unlinkPromise(D)}),!1}async function Do(t,e,n,r,i,s,o,a,c){if(i!==null)if(c.overwrite)t.push(async()=>n.removePromise(r)),i=null;else return!1;return t.push(async()=>{let u=await s.readFilePromise(o);await n.writeFilePromise(r,u)}),!0}async function Uo(t,e,n,r,i,s,o,a,c){return c.linkStrategy?.type==="HardlinkFromIndex"?Io(t,e,n,r,i,s,o,a,c,c.linkStrategy):Do(t,e,n,r,i,s,o,a,c)}async function Co(t,e,n,r,i,s,o,a,c){if(i!==null)if(c.overwrite)t.push(async()=>n.removePromise(r)),i=null;else return!1;return t.push(async()=>{await n.symlinkPromise(Ri(n.pathUtils,await s.readlinkPromise(o)),r)}),!0}var ct=class{constructor(e){this.pathUtils=e}async*genTraversePromise(e,{stableSort:n=!1}={}){let r=[e];for(;r.length>0;){let i=r.shift();if((await this.lstatPromise(i)).isDirectory()){let o=await this.readdirPromise(i);if(n)for(let a of o.sort())r.push(this.pathUtils.join(i,a));else throw new Error("Not supported")}else yield i}}async checksumFilePromise(e,{algorithm:n="sha512"}={}){let r=await this.openPromise(e,"r");try{let s=Buffer.allocUnsafeSlow(65536),o=go.createHash(n),a=0;for(;(a=await this.readPromise(r,s,0,65536))!==0;)o.update(a===65536?s:s.slice(0,a));return o.digest("hex")}finally{await this.closePromise(r)}}async removePromise(e,{recursive:n=!0,maxRetries:r=5}={}){let i;try{i=await this.lstatPromise(e)}catch(s){if(s.code==="ENOENT")return;throw s}if(i.isDirectory()){if(n){let s=await this.readdirPromise(e);await Promise.all(s.map(o=>this.removePromise(this.pathUtils.resolve(e,o))))}for(let s=0;s<=r;s++)try{await this.rmdirPromise(e);break}catch(o){if(o.code!=="EBUSY"&&o.code!=="ENOTEMPTY")throw o;s<r&&await new Promise(a=>setTimeout(a,s*100))}}else await this.unlinkPromise(e)}removeSync(e,{recursive:n=!0}={}){let r;try{r=this.lstatSync(e)}catch(i){if(i.code==="ENOENT")return;throw i}if(r.isDirectory()){if(n)for(let i of this.readdirSync(e))this.removeSync(this.pathUtils.resolve(e,i));this.rmdirSync(e)}else this.unlinkSync(e)}async mkdirpPromise(e,{chmod:n,utimes:r}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let i=e.split(this.pathUtils.sep),s;for(let o=2;o<=i.length;++o){let a=i.slice(0,o).join(this.pathUtils.sep);if(!this.existsSync(a)){try{await this.mkdirPromise(a)}catch(c){if(c.code==="EEXIST")continue;throw c}if(s??=a,n!=null&&await this.chmodPromise(a,n),r!=null)await this.utimesPromise(a,r[0],r[1]);else{let c=await this.statPromise(this.pathUtils.dirname(a));await this.utimesPromise(a,c.atime,c.mtime)}}}return s}mkdirpSync(e,{chmod:n,utimes:r}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let i=e.split(this.pathUtils.sep),s;for(let o=2;o<=i.length;++o){let a=i.slice(0,o).join(this.pathUtils.sep);if(!this.existsSync(a)){try{this.mkdirSync(a)}catch(c){if(c.code==="EEXIST")continue;throw c}if(s??=a,n!=null&&this.chmodSync(a,n),r!=null)this.utimesSync(a,r[0],r[1]);else{let c=this.statSync(this.pathUtils.dirname(a));this.utimesSync(a,c.atime,c.mtime)}}}return s}async copyPromise(e,n,{baseFs:r=this,overwrite:i=!0,stableSort:s=!1,stableTime:o=!1,linkStrategy:a=null}={}){return await xo(this,e,r,n,{overwrite:i,stableSort:s,stableTime:o,linkStrategy:a})}copySync(e,n,{baseFs:r=this,overwrite:i=!0}={}){let s=r.lstatSync(n),o=this.existsSync(e);if(s.isDirectory()){this.mkdirpSync(e);let c=r.readdirSync(n);for(let u of c)this.copySync(this.pathUtils.join(e,u),r.pathUtils.join(n,u),{baseFs:r,overwrite:i})}else if(s.isFile()){if(!o||i){o&&this.removeSync(e);let c=r.readFileSync(n);this.writeFileSync(e,c)}}else if(s.isSymbolicLink()){if(!o||i){o&&this.removeSync(e);let c=r.readlinkSync(n);this.symlinkSync(Ri(this.pathUtils,c),e)}}else throw new Error(`Unsupported file type (file: ${n}, mode: 0o${s.mode.toString(8).padStart(6,"0")})`);let a=s.mode&511;this.chmodSync(e,a)}async changeFilePromise(e,n,r={}){return Buffer.isBuffer(n)?this.changeFileBufferPromise(e,n,r):this.changeFileTextPromise(e,n,r)}async changeFileBufferPromise(e,n,{mode:r}={}){let i=Buffer.alloc(0);try{i=await this.readFilePromise(e)}catch{}Buffer.compare(i,n)!==0&&await this.writeFilePromise(e,n,{mode:r})}async changeFileTextPromise(e,n,{automaticNewlines:r,mode:i}={}){let s="";try{s=await this.readFilePromise(e,"utf8")}catch{}let o=r?mi(s,n):n;s!==o&&await this.writeFilePromise(e,o,{mode:i})}changeFileSync(e,n,r={}){return Buffer.isBuffer(n)?this.changeFileBufferSync(e,n,r):this.changeFileTextSync(e,n,r)}changeFileBufferSync(e,n,{mode:r}={}){let i=Buffer.alloc(0);try{i=this.readFileSync(e)}catch{}Buffer.compare(i,n)!==0&&this.writeFileSync(e,n,{mode:r})}changeFileTextSync(e,n,{automaticNewlines:r=!1,mode:i}={}){let s="";try{s=this.readFileSync(e,"utf8")}catch{}let o=r?mi(s,n):n;s!==o&&this.writeFileSync(e,o,{mode:i})}async movePromise(e,n){try{await this.renamePromise(e,n)}catch(r){if(r.code==="EXDEV")await this.copyPromise(n,e),await this.removePromise(e);else throw r}}moveSync(e,n){try{this.renameSync(e,n)}catch(r){if(r.code==="EXDEV")this.copySync(n,e),this.removeSync(e);else throw r}}async lockPromise(e,n){let r=`${e}.flock`,i=1e3/60,s=Date.now(),o=null,a=async()=>{let c;try{[c]=await this.readJsonPromise(r)}catch{return Date.now()-s<500}try{return process.kill(c,0),!0}catch{return!1}};for(;o===null;)try{o=await this.openPromise(r,"wx")}catch(c){if(c.code==="EEXIST"){if(!await a())try{await this.unlinkPromise(r);continue}catch{}if(Date.now()-s<60*1e3)await new Promise(u=>setTimeout(u,i));else throw new Error(`Couldn't acquire a lock in a reasonable time (via ${r})`)}else throw c}await this.writePromise(o,JSON.stringify([process.pid]));try{return await n()}finally{try{await this.closePromise(o),await this.unlinkPromise(r)}catch{}}}async readJsonPromise(e){let n=await this.readFilePromise(e,"utf8");try{return JSON.parse(n)}catch(r){throw r.message+=` (in ${e})`,r}}readJsonSync(e){let n=this.readFileSync(e,"utf8");try{return JSON.parse(n)}catch(r){throw r.message+=` (in ${e})`,r}}async writeJsonPromise(e,n,{compact:r=!1}={}){let i=r?0:2;return await this.writeFilePromise(e,`${JSON.stringify(n,null,i)}
`)}writeJsonSync(e,n,{compact:r=!1}={}){let i=r?0:2;return this.writeFileSync(e,`${JSON.stringify(n,null,i)}
`)}async preserveTimePromise(e,n){let r=await this.lstatPromise(e),i=await n();typeof i<"u"&&(e=i),await this.lutimesPromise(e,r.atime,r.mtime)}async preserveTimeSync(e,n){let r=this.lstatSync(e),i=n();typeof i<"u"&&(e=i),this.lutimesSync(e,r.atime,r.mtime)}},$t=class extends ct{constructor(){super(N)}};function Ao(t){let e=t.match(/\r?\n/g);if(e===null)return So.EOL;let n=e.filter(i=>i===`\r
`).length,r=e.length-n;return n>r?`\r
`:`
`}function mi(t,e){return e.replace(/\r?\n/g,Ao(t))}var en=class extends ct{getExtractHint(e){return this.baseFs.getExtractHint(e)}resolve(e){return this.mapFromBase(this.baseFs.resolve(this.mapToBase(e)))}getRealPath(){return this.mapFromBase(this.baseFs.getRealPath())}async openPromise(e,n,r){return this.baseFs.openPromise(this.mapToBase(e),n,r)}openSync(e,n,r){return this.baseFs.openSync(this.mapToBase(e),n,r)}async opendirPromise(e,n){return Object.assign(await this.baseFs.opendirPromise(this.mapToBase(e),n),{path:e})}opendirSync(e,n){return Object.assign(this.baseFs.opendirSync(this.mapToBase(e),n),{path:e})}async readPromise(e,n,r,i,s){return await this.baseFs.readPromise(e,n,r,i,s)}readSync(e,n,r,i,s){return this.baseFs.readSync(e,n,r,i,s)}async writePromise(e,n,r,i,s){return typeof n=="string"?await this.baseFs.writePromise(e,n,r):await this.baseFs.writePromise(e,n,r,i,s)}writeSync(e,n,r,i,s){return typeof n=="string"?this.baseFs.writeSync(e,n,r):this.baseFs.writeSync(e,n,r,i,s)}async closePromise(e){return this.baseFs.closePromise(e)}closeSync(e){this.baseFs.closeSync(e)}createReadStream(e,n){return this.baseFs.createReadStream(e!==null?this.mapToBase(e):e,n)}createWriteStream(e,n){return this.baseFs.createWriteStream(e!==null?this.mapToBase(e):e,n)}async realpathPromise(e){return this.mapFromBase(await this.baseFs.realpathPromise(this.mapToBase(e)))}realpathSync(e){return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(e)))}async existsPromise(e){return this.baseFs.existsPromise(this.mapToBase(e))}existsSync(e){return this.baseFs.existsSync(this.mapToBase(e))}accessSync(e,n){return this.baseFs.accessSync(this.mapToBase(e),n)}async accessPromise(e,n){return this.baseFs.accessPromise(this.mapToBase(e),n)}async statPromise(e,n){return this.baseFs.statPromise(this.mapToBase(e),n)}statSync(e,n){return this.baseFs.statSync(this.mapToBase(e),n)}async fstatPromise(e,n){return this.baseFs.fstatPromise(e,n)}fstatSync(e,n){return this.baseFs.fstatSync(e,n)}lstatPromise(e,n){return this.baseFs.lstatPromise(this.mapToBase(e),n)}lstatSync(e,n){return this.baseFs.lstatSync(this.mapToBase(e),n)}async fchmodPromise(e,n){return this.baseFs.fchmodPromise(e,n)}fchmodSync(e,n){return this.baseFs.fchmodSync(e,n)}async chmodPromise(e,n){return this.baseFs.chmodPromise(this.mapToBase(e),n)}chmodSync(e,n){return this.baseFs.chmodSync(this.mapToBase(e),n)}async fchownPromise(e,n,r){return this.baseFs.fchownPromise(e,n,r)}fchownSync(e,n,r){return this.baseFs.fchownSync(e,n,r)}async chownPromise(e,n,r){return this.baseFs.chownPromise(this.mapToBase(e),n,r)}chownSync(e,n,r){return this.baseFs.chownSync(this.mapToBase(e),n,r)}async renamePromise(e,n){return this.baseFs.renamePromise(this.mapToBase(e),this.mapToBase(n))}renameSync(e,n){return this.baseFs.renameSync(this.mapToBase(e),this.mapToBase(n))}async copyFilePromise(e,n,r=0){return this.baseFs.copyFilePromise(this.mapToBase(e),this.mapToBase(n),r)}copyFileSync(e,n,r=0){return this.baseFs.copyFileSync(this.mapToBase(e),this.mapToBase(n),r)}async appendFilePromise(e,n,r){return this.baseFs.appendFilePromise(this.fsMapToBase(e),n,r)}appendFileSync(e,n,r){return this.baseFs.appendFileSync(this.fsMapToBase(e),n,r)}async writeFilePromise(e,n,r){return this.baseFs.writeFilePromise(this.fsMapToBase(e),n,r)}writeFileSync(e,n,r){return this.baseFs.writeFileSync(this.fsMapToBase(e),n,r)}async unlinkPromise(e){return this.baseFs.unlinkPromise(this.mapToBase(e))}unlinkSync(e){return this.baseFs.unlinkSync(this.mapToBase(e))}async utimesPromise(e,n,r){return this.baseFs.utimesPromise(this.mapToBase(e),n,r)}utimesSync(e,n,r){return this.baseFs.utimesSync(this.mapToBase(e),n,r)}async lutimesPromise(e,n,r){return this.baseFs.lutimesPromise(this.mapToBase(e),n,r)}lutimesSync(e,n,r){return this.baseFs.lutimesSync(this.mapToBase(e),n,r)}async mkdirPromise(e,n){return this.baseFs.mkdirPromise(this.mapToBase(e),n)}mkdirSync(e,n){return this.baseFs.mkdirSync(this.mapToBase(e),n)}async rmdirPromise(e,n){return this.baseFs.rmdirPromise(this.mapToBase(e),n)}rmdirSync(e,n){return this.baseFs.rmdirSync(this.mapToBase(e),n)}async rmPromise(e,n){return this.baseFs.rmPromise(this.mapToBase(e),n)}rmSync(e,n){return this.baseFs.rmSync(this.mapToBase(e),n)}async linkPromise(e,n){return this.baseFs.linkPromise(this.mapToBase(e),this.mapToBase(n))}linkSync(e,n){return this.baseFs.linkSync(this.mapToBase(e),this.mapToBase(n))}async symlinkPromise(e,n,r){let i=this.mapToBase(n);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkPromise(this.mapToBase(e),i,r);let s=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(n),e)),o=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(i),s);return this.baseFs.symlinkPromise(o,i,r)}symlinkSync(e,n,r){let i=this.mapToBase(n);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkSync(this.mapToBase(e),i,r);let s=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(n),e)),o=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(i),s);return this.baseFs.symlinkSync(o,i,r)}async readFilePromise(e,n){return this.baseFs.readFilePromise(this.fsMapToBase(e),n)}readFileSync(e,n){return this.baseFs.readFileSync(this.fsMapToBase(e),n)}readdirPromise(e,n){return this.baseFs.readdirPromise(this.mapToBase(e),n)}readdirSync(e,n){return this.baseFs.readdirSync(this.mapToBase(e),n)}async readlinkPromise(e){return this.mapFromBase(await this.baseFs.readlinkPromise(this.mapToBase(e)))}readlinkSync(e){return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(e)))}async truncatePromise(e,n){return this.baseFs.truncatePromise(this.mapToBase(e),n)}truncateSync(e,n){return this.baseFs.truncateSync(this.mapToBase(e),n)}async ftruncatePromise(e,n){return this.baseFs.ftruncatePromise(e,n)}ftruncateSync(e,n){return this.baseFs.ftruncateSync(e,n)}watch(e,n,r){return this.baseFs.watch(this.mapToBase(e),n,r)}watchFile(e,n,r){return this.baseFs.watchFile(this.mapToBase(e),n,r)}unwatchFile(e,n){return this.baseFs.unwatchFile(this.mapToBase(e),n)}fsMapToBase(e){return typeof e=="number"?e:this.mapToBase(e)}};function di(t){let e=t;return typeof t.path=="string"&&(e.path=d.toPortablePath(t.path)),e}var tn=class extends $t{constructor(e=ko.default){super(),this.realFs=e}getExtractHint(){return!1}getRealPath(){return Qt.root}resolve(e){return N.resolve(e)}async openPromise(e,n,r){return await new Promise((i,s)=>{this.realFs.open(d.fromPortablePath(e),n,r,this.makeCallback(i,s))})}openSync(e,n,r){return this.realFs.openSync(d.fromPortablePath(e),n,r)}async opendirPromise(e,n){return await new Promise((r,i)=>{typeof n<"u"?this.realFs.opendir(d.fromPortablePath(e),n,this.makeCallback(r,i)):this.realFs.opendir(d.fromPortablePath(e),this.makeCallback(r,i))}).then(r=>{let i=r;return Object.defineProperty(i,"path",{value:e,configurable:!0,writable:!0}),i})}opendirSync(e,n){let i=typeof n<"u"?this.realFs.opendirSync(d.fromPortablePath(e),n):this.realFs.opendirSync(d.fromPortablePath(e));return Object.defineProperty(i,"path",{value:e,configurable:!0,writable:!0}),i}async readPromise(e,n,r=0,i=0,s=-1){return await new Promise((o,a)=>{this.realFs.read(e,n,r,i,s,(c,u)=>{c?a(c):o(u)})})}readSync(e,n,r,i,s){return this.realFs.readSync(e,n,r,i,s)}async writePromise(e,n,r,i,s){return await new Promise((o,a)=>typeof n=="string"?this.realFs.write(e,n,r,this.makeCallback(o,a)):this.realFs.write(e,n,r,i,s,this.makeCallback(o,a)))}writeSync(e,n,r,i,s){return typeof n=="string"?this.realFs.writeSync(e,n,r):this.realFs.writeSync(e,n,r,i,s)}async closePromise(e){await new Promise((n,r)=>{this.realFs.close(e,this.makeCallback(n,r))})}closeSync(e){this.realFs.closeSync(e)}createReadStream(e,n){let r=e!==null?d.fromPortablePath(e):e;return this.realFs.createReadStream(r,n)}createWriteStream(e,n){let r=e!==null?d.fromPortablePath(e):e;return this.realFs.createWriteStream(r,n)}async realpathPromise(e){return await new Promise((n,r)=>{this.realFs.realpath(d.fromPortablePath(e),{},this.makeCallback(n,r))}).then(n=>d.toPortablePath(n))}realpathSync(e){return d.toPortablePath(this.realFs.realpathSync(d.fromPortablePath(e),{}))}async existsPromise(e){return await new Promise(n=>{this.realFs.exists(d.fromPortablePath(e),n)})}accessSync(e,n){return this.realFs.accessSync(d.fromPortablePath(e),n)}async accessPromise(e,n){return await new Promise((r,i)=>{this.realFs.access(d.fromPortablePath(e),n,this.makeCallback(r,i))})}existsSync(e){return this.realFs.existsSync(d.fromPortablePath(e))}async statPromise(e,n){return await new Promise((r,i)=>{n?this.realFs.stat(d.fromPortablePath(e),n,this.makeCallback(r,i)):this.realFs.stat(d.fromPortablePath(e),this.makeCallback(r,i))})}statSync(e,n){return n?this.realFs.statSync(d.fromPortablePath(e),n):this.realFs.statSync(d.fromPortablePath(e))}async fstatPromise(e,n){return await new Promise((r,i)=>{n?this.realFs.fstat(e,n,this.makeCallback(r,i)):this.realFs.fstat(e,this.makeCallback(r,i))})}fstatSync(e,n){return n?this.realFs.fstatSync(e,n):this.realFs.fstatSync(e)}async lstatPromise(e,n){return await new Promise((r,i)=>{n?this.realFs.lstat(d.fromPortablePath(e),n,this.makeCallback(r,i)):this.realFs.lstat(d.fromPortablePath(e),this.makeCallback(r,i))})}lstatSync(e,n){return n?this.realFs.lstatSync(d.fromPortablePath(e),n):this.realFs.lstatSync(d.fromPortablePath(e))}async fchmodPromise(e,n){return await new Promise((r,i)=>{this.realFs.fchmod(e,n,this.makeCallback(r,i))})}fchmodSync(e,n){return this.realFs.fchmodSync(e,n)}async chmodPromise(e,n){return await new Promise((r,i)=>{this.realFs.chmod(d.fromPortablePath(e),n,this.makeCallback(r,i))})}chmodSync(e,n){return this.realFs.chmodSync(d.fromPortablePath(e),n)}async fchownPromise(e,n,r){return await new Promise((i,s)=>{this.realFs.fchown(e,n,r,this.makeCallback(i,s))})}fchownSync(e,n,r){return this.realFs.fchownSync(e,n,r)}async chownPromise(e,n,r){return await new Promise((i,s)=>{this.realFs.chown(d.fromPortablePath(e),n,r,this.makeCallback(i,s))})}chownSync(e,n,r){return this.realFs.chownSync(d.fromPortablePath(e),n,r)}async renamePromise(e,n){return await new Promise((r,i)=>{this.realFs.rename(d.fromPortablePath(e),d.fromPortablePath(n),this.makeCallback(r,i))})}renameSync(e,n){return this.realFs.renameSync(d.fromPortablePath(e),d.fromPortablePath(n))}async copyFilePromise(e,n,r=0){return await new Promise((i,s)=>{this.realFs.copyFile(d.fromPortablePath(e),d.fromPortablePath(n),r,this.makeCallback(i,s))})}copyFileSync(e,n,r=0){return this.realFs.copyFileSync(d.fromPortablePath(e),d.fromPortablePath(n),r)}async appendFilePromise(e,n,r){return await new Promise((i,s)=>{let o=typeof e=="string"?d.fromPortablePath(e):e;r?this.realFs.appendFile(o,n,r,this.makeCallback(i,s)):this.realFs.appendFile(o,n,this.makeCallback(i,s))})}appendFileSync(e,n,r){let i=typeof e=="string"?d.fromPortablePath(e):e;r?this.realFs.appendFileSync(i,n,r):this.realFs.appendFileSync(i,n)}async writeFilePromise(e,n,r){return await new Promise((i,s)=>{let o=typeof e=="string"?d.fromPortablePath(e):e;r?this.realFs.writeFile(o,n,r,this.makeCallback(i,s)):this.realFs.writeFile(o,n,this.makeCallback(i,s))})}writeFileSync(e,n,r){let i=typeof e=="string"?d.fromPortablePath(e):e;r?this.realFs.writeFileSync(i,n,r):this.realFs.writeFileSync(i,n)}async unlinkPromise(e){return await new Promise((n,r)=>{this.realFs.unlink(d.fromPortablePath(e),this.makeCallback(n,r))})}unlinkSync(e){return this.realFs.unlinkSync(d.fromPortablePath(e))}async utimesPromise(e,n,r){return await new Promise((i,s)=>{this.realFs.utimes(d.fromPortablePath(e),n,r,this.makeCallback(i,s))})}utimesSync(e,n,r){this.realFs.utimesSync(d.fromPortablePath(e),n,r)}async lutimesPromise(e,n,r){return await new Promise((i,s)=>{this.realFs.lutimes(d.fromPortablePath(e),n,r,this.makeCallback(i,s))})}lutimesSync(e,n,r){this.realFs.lutimesSync(d.fromPortablePath(e),n,r)}async mkdirPromise(e,n){return await new Promise((r,i)=>{this.realFs.mkdir(d.fromPortablePath(e),n,this.makeCallback(r,i))})}mkdirSync(e,n){return this.realFs.mkdirSync(d.fromPortablePath(e),n)}async rmdirPromise(e,n){return await new Promise((r,i)=>{n?this.realFs.rmdir(d.fromPortablePath(e),n,this.makeCallback(r,i)):this.realFs.rmdir(d.fromPortablePath(e),this.makeCallback(r,i))})}rmdirSync(e,n){return this.realFs.rmdirSync(d.fromPortablePath(e),n)}async rmPromise(e,n){return await new Promise((r,i)=>{n?this.realFs.rm(d.fromPortablePath(e),n,this.makeCallback(r,i)):this.realFs.rm(d.fromPortablePath(e),this.makeCallback(r,i))})}rmSync(e,n){return this.realFs.rmSync(d.fromPortablePath(e),n)}async linkPromise(e,n){return await new Promise((r,i)=>{this.realFs.link(d.fromPortablePath(e),d.fromPortablePath(n),this.makeCallback(r,i))})}linkSync(e,n){return this.realFs.linkSync(d.fromPortablePath(e),d.fromPortablePath(n))}async symlinkPromise(e,n,r){return await new Promise((i,s)=>{this.realFs.symlink(d.fromPortablePath(e.replace(/\/+$/,"")),d.fromPortablePath(n),r,this.makeCallback(i,s))})}symlinkSync(e,n,r){return this.realFs.symlinkSync(d.fromPortablePath(e.replace(/\/+$/,"")),d.fromPortablePath(n),r)}async readFilePromise(e,n){return await new Promise((r,i)=>{let s=typeof e=="string"?d.fromPortablePath(e):e;this.realFs.readFile(s,n,this.makeCallback(r,i))})}readFileSync(e,n){let r=typeof e=="string"?d.fromPortablePath(e):e;return this.realFs.readFileSync(r,n)}async readdirPromise(e,n){return await new Promise((r,i)=>{n?n.recursive&&process.platform==="win32"?n.withFileTypes?this.realFs.readdir(d.fromPortablePath(e),n,this.makeCallback(s=>r(s.map(di)),i)):this.realFs.readdir(d.fromPortablePath(e),n,this.makeCallback(s=>r(s.map(d.toPortablePath)),i)):this.realFs.readdir(d.fromPortablePath(e),n,this.makeCallback(r,i)):this.realFs.readdir(d.fromPortablePath(e),this.makeCallback(r,i))})}readdirSync(e,n){return n?n.recursive&&process.platform==="win32"?n.withFileTypes?this.realFs.readdirSync(d.fromPortablePath(e),n).map(di):this.realFs.readdirSync(d.fromPortablePath(e),n).map(d.toPortablePath):this.realFs.readdirSync(d.fromPortablePath(e),n):this.realFs.readdirSync(d.fromPortablePath(e))}async readlinkPromise(e){return await new Promise((n,r)=>{this.realFs.readlink(d.fromPortablePath(e),this.makeCallback(n,r))}).then(n=>d.toPortablePath(n))}readlinkSync(e){return d.toPortablePath(this.realFs.readlinkSync(d.fromPortablePath(e)))}async truncatePromise(e,n){return await new Promise((r,i)=>{this.realFs.truncate(d.fromPortablePath(e),n,this.makeCallback(r,i))})}truncateSync(e,n){return this.realFs.truncateSync(d.fromPortablePath(e),n)}async ftruncatePromise(e,n){return await new Promise((r,i)=>{this.realFs.ftruncate(e,n,this.makeCallback(r,i))})}ftruncateSync(e,n){return this.realFs.ftruncateSync(e,n)}watch(e,n,r){return this.realFs.watch(d.fromPortablePath(e),n,r)}watchFile(e,n,r){return this.realFs.watchFile(d.fromPortablePath(e),n,r)}unwatchFile(e,n){return this.realFs.unwatchFile(d.fromPortablePath(e),n)}makeCallback(e,n){return(r,i)=>{r?n(r):e(i)}}},Bo=/^[0-9]+$/,jt=/^(\/(?:[^/]+\/)*?(?:\$\$virtual|__virtual__))((?:\/((?:[^/]+-)?[a-f0-9]+)(?:\/([^/]+))?)?((?:\/.*)?))$/,Go=/^([^/]+-)?[a-f0-9]+$/,lt=class t extends en{constructor({baseFs:e=new tn}={}){super(N),this.baseFs=e}static makeVirtualPath(e,n,r){if(N.basename(e)!=="__virtual__")throw new Error('Assertion failed: Virtual folders must be named "__virtual__"');if(!N.basename(n).match(Go))throw new Error("Assertion failed: Virtual components must be ended by an hexadecimal hash");let s=N.relative(N.dirname(e),r).split("/"),o=0;for(;o<s.length&&s[o]==="..";)o+=1;let a=s.slice(o);return N.join(e,n,String(o),...a)}static resolveVirtual(e){let n=e.match(jt);if(!n||!n[3]&&n[5])return e;let r=N.dirname(n[1]);if(!n[3]||!n[4])return r;if(!Bo.test(n[4]))return e;let s=Number(n[4]),o="../".repeat(s),a=n[5]||".";return t.resolveVirtual(N.join(r,o,a))}getExtractHint(e){return this.baseFs.getExtractHint(e)}getRealPath(){return this.baseFs.getRealPath()}realpathSync(e){let n=e.match(jt);if(!n)return this.baseFs.realpathSync(e);if(!n[5])return e;let r=this.baseFs.realpathSync(this.mapToBase(e));return t.makeVirtualPath(n[1],n[3],r)}async realpathPromise(e){let n=e.match(jt);if(!n)return await this.baseFs.realpathPromise(e);if(!n[5])return e;let r=await this.baseFs.realpathPromise(this.mapToBase(e));return t.makeVirtualPath(n[1],n[3],r)}mapToBase(e){if(e==="")return e;if(this.pathUtils.isAbsolute(e))return t.resolveVirtual(e);let n=t.resolveVirtual(this.baseFs.resolve(Qt.dot)),r=t.resolveVirtual(this.baseFs.resolve(e));return N.relative(n,r)||Qt.dot}mapFromBase(e){return e}},vi={DEFAULT:{collapsed:!1,next:{"*":"DEFAULT"}},TOP_LEVEL:{collapsed:!1,next:{fallbackExclusionList:"FALLBACK_EXCLUSION_LIST",packageRegistryData:"PACKAGE_REGISTRY_DATA","*":"DEFAULT"}},FALLBACK_EXCLUSION_LIST:{collapsed:!1,next:{"*":"FALLBACK_EXCLUSION_ENTRIES"}},FALLBACK_EXCLUSION_ENTRIES:{collapsed:!0,next:{"*":"FALLBACK_EXCLUSION_DATA"}},FALLBACK_EXCLUSION_DATA:{collapsed:!0,next:{"*":"DEFAULT"}},PACKAGE_REGISTRY_DATA:{collapsed:!1,next:{"*":"PACKAGE_REGISTRY_ENTRIES"}},PACKAGE_REGISTRY_ENTRIES:{collapsed:!0,next:{"*":"PACKAGE_STORE_DATA"}},PACKAGE_STORE_DATA:{collapsed:!1,next:{"*":"PACKAGE_STORE_ENTRIES"}},PACKAGE_STORE_ENTRIES:{collapsed:!0,next:{"*":"PACKAGE_INFORMATION_DATA"}},PACKAGE_INFORMATION_DATA:{collapsed:!1,next:{packageDependencies:"PACKAGE_DEPENDENCIES","*":"DEFAULT"}},PACKAGE_DEPENDENCIES:{collapsed:!1,next:{"*":"PACKAGE_DEPENDENCY"}},PACKAGE_DEPENDENCY:{collapsed:!0,next:{"*":"DEFAULT"}}};function Mo(t,e,n){let r="";r+="[";for(let i=0,s=t.length;i<s;++i)r+=mt(String(i),t[i],e,n).replace(/^ +/g,""),i+1<s&&(r+=", ");return r+="]",r}function zo(t,e,n){let r=`${n}  `,i="";i+=n,i+=`[
`;for(let s=0,o=t.length;s<o;++s)i+=r+mt(String(s),t[s],e,r).replace(/^ +/,""),s+1<o&&(i+=","),i+=`
`;return i+=n,i+="]",i}function Ho(t,e,n){let r=Object.keys(t),i="";i+="{";for(let s=0,o=r.length,a=0;s<o;++s){let c=r[s],u=t[c];typeof u>"u"||(a!==0&&(i+=", "),i+=JSON.stringify(c),i+=": ",i+=mt(c,u,e,n).replace(/^ +/g,""),a+=1)}return i+="}",i}function qo(t,e,n){let r=Object.keys(t),i=`${n}  `,s="";s+=n,s+=`{
`;let o=0;for(let a=0,c=r.length;a<c;++a){let u=r[a],P=t[u];typeof P>"u"||(o!==0&&(s+=",",s+=`
`),s+=i,s+=JSON.stringify(u),s+=": ",s+=mt(u,P,e,i).replace(/^ +/g,""),o+=1)}return o!==0&&(s+=`
`),s+=n,s+="}",s}function mt(t,e,n,r){let{next:i}=vi[n],s=i[t]||i["*"];return Ni(e,s,r)}function Ni(t,e,n){let{collapsed:r}=vi[e];return Array.isArray(t)?r?Mo(t,e,n):zo(t,e,n):typeof t=="object"&&t!==null?r?Ho(t,e,n):qo(t,e,n):JSON.stringify(t)}function xi(t){return Ni(t,"TOP_LEVEL","")}function Ge(t,e){let n=Array.from(t);Array.isArray(e)||(e=[e]);let r=[];for(let s of e)r.push(n.map(o=>s(o)));let i=n.map((s,o)=>o);return i.sort((s,o)=>{for(let a of r){let c=a[s]<a[o]?-1:a[s]>a[o]?1:0;if(c!==0)return c}return 0}),i.map(s=>n[s])}function Wo(t){let e=new Map,n=Ge(t.fallbackExclusionList||[],[({name:r,reference:i})=>r,({name:r,reference:i})=>i]);for(let{name:r,reference:i}of n){let s=e.get(r);typeof s>"u"&&e.set(r,s=new Set),s.add(i)}return Array.from(e).map(([r,i])=>[r,Array.from(i)])}function Jo(t){return Ge(t.fallbackPool||[],([e])=>e)}function Zo(t){let e=[];for(let[n,r]of Ge(t.packageRegistry,([i])=>i===null?"0":`1${i}`)){let i=[];e.push([n,i]);for(let[s,{packageLocation:o,packageDependencies:a,packagePeers:c,linkType:u,discardFromLookup:P}]of Ge(r,([l])=>l===null?"0":`1${l}`)){let l=[];n!==null&&s!==null&&!a.has(n)&&l.push([n,s]);for(let[T,f]of Ge(a.entries(),([F])=>F))l.push([T,f]);let g=c&&c.size>0?Array.from(c):void 0,b=P||void 0;i.push([s,{packageLocation:o,packageDependencies:l,packagePeers:g,linkType:u,discardFromLookup:b}])}}return e}function an(t){return{__info:["This file is automatically generated. Do not touch it, or risk","your modifications being lost."],dependencyTreeRoots:t.dependencyTreeRoots,enableTopLevelFallback:t.enableTopLevelFallback||!1,ignorePatternData:t.ignorePattern||null,fallbackExclusionList:Wo(t),fallbackPool:Jo(t),packageRegistryData:Zo(t)}}var Yt,jo=()=>(typeof Yt>"u"&&(Yt=wi.default.brotliDecompressSync(Buffer.from("","base64")).toString()),Yt);function cn(t,e){return[t?`${t}
`:"",`/* eslint-disable */
`,`// @ts-nocheck
`,`"use strict";
`,`
`,e,`
`,jo()].join("")}function Yo(t){return JSON.stringify(t,null,2)}function Ko(t){return`'${t.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/\n/g,`\\
`)}'`}function Xo(t){return[`const RAW_RUNTIME_STATE =
`,`${Ko(xi(t))};

`,`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(JSON.parse(RAW_RUNTIME_STATE), {basePath: basePath || __dirname});
`,`}
`].join("")}function Vo(){return[`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  const fs = require('fs');
`,`  const path = require('path');
`,`  const pnpDataFilepath = path.resolve(__dirname, ${JSON.stringify(at.pnpData)});
`,`  return hydrateRuntimeState(JSON.parse(fs.readFileSync(pnpDataFilepath, 'utf8')), {basePath: basePath || __dirname});
`,`}
`].join("")}function Qo(t){let e=an(t),n=Xo(e);return cn(t.shebang,n)}function _o(t){let e=an(t),n=Vo(),r=cn(t.shebang,n);return{dataFile:Yo(e),loaderFile:r}}function Oi(t,{basePath:e}){let n=d.toPortablePath(e),r=N.resolve(n),i=t.ignorePatternData!==null?new RegExp(t.ignorePatternData):null,s=new Map,o=new Map(t.packageRegistryData.map(([l,g])=>[l,new Map(g.map(([b,T])=>{if(l===null!=(b===null))throw new Error("Assertion failed: The name and reference should be null, or neither should");let f=T.discardFromLookup??!1,F={name:l,reference:b},v=s.get(T.packageLocation);v?(v.discardFromLookup=v.discardFromLookup&&f,f||(v.locator=F)):s.set(T.packageLocation,{locator:F,discardFromLookup:f});let D=null;return[b,{packageDependencies:new Map(T.packageDependencies),packagePeers:new Set(T.packagePeers),linkType:T.linkType,discardFromLookup:f,get packageLocation(){return D||(D=N.join(r,T.packageLocation))}}]}))])),a=new Map(t.fallbackExclusionList.map(([l,g])=>[l,new Set(g)])),c=new Map(t.fallbackPool),u=t.dependencyTreeRoots,P=t.enableTopLevelFallback;return{basePath:n,dependencyTreeRoots:u,enableTopLevelFallback:P,fallbackExclusionList:a,fallbackPool:c,ignorePattern:i,packageLocatorsByLocations:s,packageRegistry:o}}var Ii=Array.isArray,nn=JSON.stringify,dt=Object.getOwnPropertyNames,ht=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),hi=(t,e)=>RegExp.prototype.exec.call(t,e),pi=(t,...e)=>RegExp.prototype[Symbol.replace].apply(t,e),Re=(t,...e)=>String.prototype.endsWith.apply(t,e),Di=(t,...e)=>String.prototype.includes.apply(t,e),Ui=(t,...e)=>String.prototype.lastIndexOf.apply(t,e),ut=(t,...e)=>String.prototype.indexOf.apply(t,e),$o=(t,...e)=>String.prototype.replace.apply(t,e),he=(t,...e)=>String.prototype.slice.apply(t,e),le=(t,...e)=>String.prototype.startsWith.apply(t,e),ea=Map,ta=JSON.parse;function ze(t,e,n){return class extends n{constructor(...r){super(e(...r)),this.code=t,this.name=`${n.name} [${t}]`}}}var na=ze("ERR_PACKAGE_IMPORT_NOT_DEFINED",(t,e,n)=>`Package import specifier "${t}" is not defined${e?` in package ${e}package.json`:""} imported from ${n}`,TypeError),Ci=ze("ERR_INVALID_MODULE_SPECIFIER",(t,e,n=void 0)=>`Invalid module "${t}" ${e}${n?` imported from ${n}`:""}`,TypeError),ra=ze("ERR_INVALID_PACKAGE_TARGET",(t,e,n,r=!1,i=void 0)=>{let s=typeof n=="string"&&!r&&n.length&&!le(n,"./");return e==="."?(bo.default(r===!1),`Invalid "exports" main target ${nn(n)} defined in the package config ${t}package.json${i?` imported from ${i}`:""}${s?'; targets must start with "./"':""}`):`Invalid "${r?"imports":"exports"}" target ${nn(n)} defined for '${e}' in the package config ${t}package.json${i?` imported from ${i}`:""}${s?'; targets must start with "./"':""}`},Error),ln=ze("ERR_INVALID_PACKAGE_CONFIG",(t,e,n)=>`Invalid package config ${t}${e?` while importing ${e}`:""}${n?`. ${n}`:""}`,Error),ia=ze("ERR_PACKAGE_PATH_NOT_EXPORTED",(t,e,n=void 0)=>e==="."?`No "exports" main defined in ${t}package.json${n?` imported from ${n}`:""}`:`Package subpath '${e}' is not defined by "exports" in ${t}package.json${n?` imported from ${n}`:""}`,Error);function sa(t,e){let n=Object.create(null);for(let r=0;r<e.length;r++){let i=e[r];ht(t,i)&&(n[i]=t[i])}return n}var st=new ea;function oa(t,e,n,r){let i=st.get(t);if(i!==void 0)return i;let s=r(t);if(s===void 0){let b={pjsonPath:t,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return st.set(t,b),b}let o;try{o=ta(s)}catch(b){throw new ln(t,(n?`"${e}" from `:"")+B.fileURLToPath(n||e),b.message)}let{imports:a,main:c,name:u,type:P}=sa(o,["imports","main","name","type"]),l=ht(o,"exports")?o.exports:void 0;(typeof a!="object"||a===null)&&(a=void 0),typeof c!="string"&&(c=void 0),typeof u!="string"&&(u=void 0),P!=="module"&&P!=="commonjs"&&(P="none");let g={pjsonPath:t,exists:!0,main:c,name:u,type:P,exports:l,imports:a};return st.set(t,g),g}function aa(t,e){let n=new URL("./package.json",t);for(;;){let s=n.pathname;if(Re(s,"node_modules/package.json"))break;let o=oa(B.fileURLToPath(n),t,void 0,e);if(o.exists)return o;let a=n;if(n=new URL("../package.json",n),n.pathname===a.pathname)break}let r=B.fileURLToPath(n),i={pjsonPath:r,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return st.set(r,i),i}function ca(t,e,n){throw new na(t,e&&B.fileURLToPath(new URL(".",e)),B.fileURLToPath(n))}function la(t,e,n,r){let i=`request is not a valid subpath for the "${n?"imports":"exports"}" resolution of ${B.fileURLToPath(e)}`;throw new Ci(t,i,r&&B.fileURLToPath(r))}function Be(t,e,n,r,i){throw typeof e=="object"&&e!==null?e=nn(e,null,""):e=`${e}`,new ra(B.fileURLToPath(new URL(".",n)),t,e,r,i&&B.fileURLToPath(i))}var Pi=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,yi=/\*/g;function ua(t,e,n,r,i,s,o,a){if(e!==""&&!s&&t[t.length-1]!=="/"&&Be(n,t,r,o,i),!le(t,"./")){if(o&&!le(t,"../")&&!le(t,"/")){let l=!1;try{new URL(t),l=!0}catch{}if(!l)return s?pi(yi,t,()=>e):t+e}Be(n,t,r,o,i)}hi(Pi,he(t,2))!==null&&Be(n,t,r,o,i);let c=new URL(t,r),u=c.pathname,P=new URL(".",r).pathname;if(le(u,P)||Be(n,t,r,o,i),e==="")return c;if(hi(Pi,e)!==null){let l=s?$o(n,"*",()=>e):n+e;la(l,r,o,i)}return s?new URL(pi(yi,c.href,()=>e)):new URL(e,c)}function fa(t){let e=+t;return`${e}`!==t?!1:e>=0&&e<4294967295}function Fe(t,e,n,r,i,s,o,a){if(typeof e=="string")return ua(e,n,r,t,i,s,o);if(Ii(e)){if(e.length===0)return null;let c;for(let u=0;u<e.length;u++){let P=e[u],l;try{l=Fe(t,P,n,r,i,s,o,a)}catch(g){if(c=g,g.code==="ERR_INVALID_PACKAGE_TARGET")continue;throw g}if(l!==void 0){if(l===null){c=null;continue}return l}}if(c==null)return c;throw c}else if(typeof e=="object"&&e!==null){let c=dt(e);for(let u=0;u<c.length;u++){let P=c[u];if(fa(P))throw new ln(B.fileURLToPath(t),i,'"exports" cannot contain numeric property keys.')}for(let u=0;u<c.length;u++){let P=c[u];if(P==="default"||a.has(P)){let l=e[P],g=Fe(t,l,n,r,i,s,o,a);if(g===void 0)continue;return g}}return}else if(e===null)return null;Be(r,e,t,o,i)}function Ai(t,e){let n=ut(t,"*"),r=ut(e,"*"),i=n===-1?t.length:n+1,s=r===-1?e.length:r+1;return i>s?-1:s>i||n===-1?1:r===-1||t.length>e.length?-1:e.length>t.length?1:0}function ma(t,e,n){if(typeof t=="string"||Ii(t))return!0;if(typeof t!="object"||t===null)return!1;let r=dt(t),i=!1,s=0;for(let o=0;o<r.length;o++){let a=r[o],c=a===""||a[0]!==".";if(s++===0)i=c;else if(i!==c)throw new ln(B.fileURLToPath(e),n,`"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`)}return i}function Kt(t,e,n){throw new ia(B.fileURLToPath(new URL(".",e)),t,n&&B.fileURLToPath(n))}var gi=new Set;function da(t,e,n){let r=B.fileURLToPath(e);gi.has(r+"|"+t)||(gi.add(r+"|"+t),process.emitWarning(`Use of deprecated trailing slash pattern mapping "${t}" in the "exports" field module resolution of the package at ${r}${n?` imported from ${B.fileURLToPath(n)}`:""}. Mapping specifiers ending in "/" is no longer supported.`,"DeprecationWarning","DEP0155"))}function ha({packageJSONUrl:t,packageSubpath:e,exports:n,base:r,conditions:i}){if(ma(n,t,r)&&(n={".":n}),ht(n,e)&&!Di(e,"*")&&!Re(e,"/")){let c=n[e],u=Fe(t,c,"",e,r,!1,!1,i);return u==null&&Kt(e,t,r),u}let s="",o,a=dt(n);for(let c=0;c<a.length;c++){let u=a[c],P=ut(u,"*");if(P!==-1&&le(e,he(u,0,P))){Re(e,"/")&&da(e,t,r);let l=he(u,P+1);e.length>=u.length&&Re(e,l)&&Ai(s,u)===1&&Ui(u,"*")===P&&(s=u,o=he(e,P,e.length-l.length))}}if(s){let c=n[s],u=Fe(t,c,o,s,r,!0,!1,i);return u==null&&Kt(e,t,r),u}Kt(e,t,r)}function pa({name:t,base:e,conditions:n,readFileSyncFn:r}){if(t==="#"||le(t,"#/")||Re(t,"/")){let o="is not a valid internal imports specifier name";throw new Ci(t,o,B.fileURLToPath(e))}let i,s=aa(e,r);if(s.exists){i=B.pathToFileURL(s.pjsonPath);let o=s.imports;if(o)if(ht(o,t)&&!Di(t,"*")){let a=Fe(i,o[t],"",t,e,!1,!0,n);if(a!=null)return a}else{let a="",c,u=dt(o);for(let P=0;P<u.length;P++){let l=u[P],g=ut(l,"*");if(g!==-1&&le(t,he(l,0,g))){let b=he(l,g+1);t.length>=l.length&&Re(t,b)&&Ai(a,l)===1&&Ui(l,"*")===g&&(a=l,c=he(t,g,t.length-b.length))}}if(a){let P=o[a],l=Fe(i,P,c,a,e,!0,!0,n);if(l!=null)return l}}}ca(t,i,e)}var M=(t=>(t.API_ERROR="API_ERROR",t.BUILTIN_NODE_RESOLUTION_FAILED="BUILTIN_NODE_RESOLUTION_FAILED",t.EXPORTS_RESOLUTION_FAILED="EXPORTS_RESOLUTION_FAILED",t.MISSING_DEPENDENCY="MISSING_DEPENDENCY",t.MISSING_PEER_DEPENDENCY="MISSING_PEER_DEPENDENCY",t.QUALIFIED_PATH_RESOLUTION_FAILED="QUALIFIED_PATH_RESOLUTION_FAILED",t.INTERNAL="INTERNAL",t.UNDECLARED_DEPENDENCY="UNDECLARED_DEPENDENCY",t.UNSUPPORTED="UNSUPPORTED",t))(M||{}),Pa=new Set(["BUILTIN_NODE_RESOLUTION_FAILED","MISSING_DEPENDENCY","MISSING_PEER_DEPENDENCY","QUALIFIED_PATH_RESOLUTION_FAILED","UNDECLARED_DEPENDENCY"]);function z(t,e,n={},r){r??=Pa.has(t)?"MODULE_NOT_FOUND":t;let i={configurable:!0,writable:!0,enumerable:!1};return Object.defineProperties(new Error(e),{code:{...i,value:r},pnpCode:{...i,value:t},data:{...i,value:n}})}function ne(t){return d.normalize(d.fromPortablePath(t))}var rn=Symbol("arg flag"),Q=class t extends Error{constructor(e,n){super(e),this.name="ArgError",this.code=n,Object.setPrototypeOf(this,t.prototype)}};function Me(t,{argv:e=process.argv.slice(2),permissive:n=!1,stopAtPositional:r=!1}={}){if(!t)throw new Q("argument specification object is required","ARG_CONFIG_NO_SPEC");let i={_:[]},s={},o={};for(let a of Object.keys(t)){if(!a)throw new Q("argument key cannot be an empty string","ARG_CONFIG_EMPTY_KEY");if(a[0]!=="-")throw new Q(`argument key must start with '-' but found: '${a}'`,"ARG_CONFIG_NONOPT_KEY");if(a.length===1)throw new Q(`argument key must have a name; singular '-' keys are not allowed: ${a}`,"ARG_CONFIG_NONAME_KEY");if(typeof t[a]=="string"){s[a]=t[a];continue}let c=t[a],u=!1;if(Array.isArray(c)&&c.length===1&&typeof c[0]=="function"){let[P]=c;c=(l,g,b=[])=>(b.push(P(l,g,b[b.length-1])),b),u=P===Boolean||P[rn]===!0}else if(typeof c=="function")u=c===Boolean||c[rn]===!0;else throw new Q(`type missing or not a function or valid array type: ${a}`,"ARG_CONFIG_VAD_TYPE");if(a[1]!=="-"&&a.length>2)throw new Q(`short argument keys (with a single hyphen) must have only one character: ${a}`,"ARG_CONFIG_SHORTOPT_TOOLONG");o[a]=[c,u]}for(let a=0,c=e.length;a<c;a++){let u=e[a];if(r&&i._.length>0){i._=i._.concat(e.slice(a));break}if(u==="--"){i._=i._.concat(e.slice(a+1));break}if(u.length>1&&u[0]==="-"){let P=u[1]==="-"||u.length===2?[u]:u.slice(1).split("").map(l=>`-${l}`);for(let l=0;l<P.length;l++){let g=P[l],[b,T]=g[1]==="-"?g.split(/=(.*)/,2):[g,void 0],f=b;for(;f in s;)f=s[f];if(!(f in o))if(n){i._.push(g);continue}else throw new Q(`unknown or unexpected option: ${b}`,"ARG_UNKNOWN_OPTION");let[F,v]=o[f];if(!v&&l+1<P.length)throw new Q(`option requires argument (but was followed by another short argument): ${b}`,"ARG_MISSING_REQUIRED_SHORTARG");if(v)i[f]=F(!0,f,i[f]);else if(T===void 0){if(e.length<a+2||e[a+1].length>1&&e[a+1][0]==="-"&&!(e[a+1].match(/^-?\d*(\.(?=\d))?\d*$/)&&(F===Number||typeof BigInt<"u"&&F===BigInt))){let D=b===f?"":` (alias for ${f})`;throw new Q(`option requires argument: ${b}${D}`,"ARG_MISSING_REQUIRED_LONGARG")}i[f]=F(e[a+1],f,i[f]),++a}else i[f]=F(T,f,i[f])}}else i._.push(u)}return i}Me.flag=t=>(t[rn]=!0,t);Me.COUNT=Me.flag((t,e,n)=>(n||0)+1);Me.ArgError=Q;var ya=Me;function ga(t){return Sa(),sn[t]}var sn;function Sa(){sn||(sn={"--conditions":[],...Si(ba()),...Si(process.execArgv)})}function Si(t){return ya({"--conditions":[String],"-C":"--conditions"},{argv:t,permissive:!0})}function ba(){let t=[],e=ka(process.env.NODE_OPTIONS||"",t);return t.length,e}function ka(t,e){let n=[],r=!1,i=!0;for(let s=0;s<t.length;++s){let o=t[s];if(o==="\\"&&r){if(s+1===t.length)return e.push(`invalid value for NODE_OPTIONS (invalid escape)
`),n;o=t[++s]}else if(o===" "&&!r){i=!0;continue}else if(o==='"'){r=!r;continue}i?(n.push(o),i=!1):n[n.length-1]+=o}return r&&e.push(`invalid value for NODE_OPTIONS (unterminated string)
`),n}var[Xt,bi]=process.versions.node.split(".").map(t=>parseInt(t,10)),wa=Xt>19||Xt===19&&bi>=2||Xt===18&&bi>=13;function Ea(t){if(process.env.WATCH_REPORT_DEPENDENCIES&&process.send)if(t=t.map(e=>d.fromPortablePath(lt.resolveVirtual(d.toPortablePath(e)))),wa)process.send({"watch:require":t});else for(let e of t)process.send({"watch:require":e})}function Bi(t,e){let n=Number(process.env.PNP_ALWAYS_WARN_ON_FALLBACK)>0,r=Number(process.env.PNP_DEBUG_LEVEL),i=/^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:node:)?(?:@[^/]+\/)?[^/]+)\/*(.*|)$/,s=/^(\/|\.{1,2}(\/|$))/,o=/\/$/,a=/^\.{0,2}\//,c={name:null,reference:null},u=[],P=new Set;if(t.enableTopLevelFallback===!0&&u.push(c),e.compatibilityMode!==!1)for(let p of["react-scripts","gatsby"]){let h=t.packageRegistry.get(p);if(h)for(let k of h.keys()){if(k===null)throw new Error("Assertion failed: This reference shouldn't be null");u.push({name:p,reference:k})}}let{ignorePattern:l,packageRegistry:g,packageLocatorsByLocations:b}=t;function T(p,h){return{fn:p,args:h,error:null,result:null}}function f(p){let h=process.stderr?.hasColors?.()??process.stdout.isTTY,k=(E,R)=>`\x1B[${E}m${R}\x1B[0m`,m=p.error;console.error(m?k("31;1",`\u2716 ${p.error?.message.replace(/\n.*/s,"")}`):k("33;1","\u203C Resolution")),p.args.length>0&&console.error();for(let E of p.args)console.error(`  ${k("37;1","In \u2190")} ${fi.inspect(E,{colors:h,compact:!0})}`);p.result&&(console.error(),console.error(`  ${k("37;1","Out \u2192")} ${fi.inspect(p.result,{colors:h,compact:!0})}`));let y=new Error().stack.match(/(?<=^ +)at.*/gm)?.slice(2)??[];if(y.length>0){console.error();for(let E of y)console.error(`  ${k("38;5;244",E)}`)}console.error()}function F(p,h){if(e.allowDebug===!1)return h;if(Number.isFinite(r)){if(r>=2)return(...k)=>{let m=T(p,k);try{return m.result=h(...k)}catch(y){throw m.error=y}finally{f(m)}};if(r>=1)return(...k)=>{try{return h(...k)}catch(m){let y=T(p,k);throw y.error=m,f(y),m}}}return h}function v(p){let h=oe(p);if(!h)throw z(M.INTERNAL,"Couldn't find a matching entry in the dependency tree for the specified parent (this is probably an internal error)");return h}function D(p){if(p.name===null)return!0;for(let h of t.dependencyTreeRoots)if(h.name===p.name&&h.reference===p.reference)return!0;return!1}let O=new Set(["node","require",...ga("--conditions")]);function C(p,h=O,k){let m=ye(N.join(p,"internal.js"),{resolveIgnored:!0,includeDiscardFromLookup:!0});if(m===null)throw z(M.INTERNAL,`The locator that owns the "${p}" path can't be found inside the dependency tree (this is probably an internal error)`);let{packageLocation:y}=v(m),E=N.join(y,at.manifest);if(!e.fakeFs.existsSync(E))return null;let R=JSON.parse(e.fakeFs.readFileSync(E,"utf8"));if(R.exports==null)return null;let S=N.contains(y,p);if(S===null)throw z(M.INTERNAL,"unqualifiedPath doesn't contain the packageLocation (this is probably an internal error)");S!=="."&&!a.test(S)&&(S=`./${S}`);try{let A=ha({packageJSONUrl:B.pathToFileURL(d.fromPortablePath(E)),packageSubpath:S,exports:R.exports,base:k?B.pathToFileURL(d.fromPortablePath(k)):null,conditions:h});return d.toPortablePath(B.fileURLToPath(A))}catch(A){throw z(M.EXPORTS_RESOLUTION_FAILED,A.message,{unqualifiedPath:ne(p),locator:m,pkgJson:R,subpath:ne(S),conditions:h},A.code)}}function H(p,h,{extensions:k}){let m;try{h.push(p),m=e.fakeFs.statSync(p)}catch{}if(m&&!m.isDirectory())return e.fakeFs.realpathSync(p);if(m&&m.isDirectory()){let y;try{y=JSON.parse(e.fakeFs.readFileSync(N.join(p,at.manifest),"utf8"))}catch{}let E;if(y&&y.main&&(E=N.resolve(p,y.main)),E&&E!==p){let R=H(E,h,{extensions:k});if(R!==null)return R}}for(let y=0,E=k.length;y<E;y++){let R=`${p}${k[y]}`;if(h.push(R),e.fakeFs.existsSync(R))return R}if(m&&m.isDirectory())for(let y=0,E=k.length;y<E;y++){let R=N.format({dir:p,name:"index",ext:k[y]});if(h.push(R),e.fakeFs.existsSync(R))return R}return null}function K(p){let h=new de.Module(p,null);return h.filename=p,h.paths=de.Module._nodeModulePaths(p),h}function _(p,h){return h.endsWith("/")&&(h=N.join(h,"internal.js")),de.Module._resolveFilename(d.fromPortablePath(p),K(d.fromPortablePath(h)),!1,{plugnplay:!1})}function ee(p){if(l===null)return!1;let h=N.contains(t.basePath,p);return h===null?!1:!!l.test(h.replace(/\/$/,""))}let ve={std:3,resolveVirtual:1,getAllLocators:1},se=c;function oe({name:p,reference:h}){let k=g.get(p);if(!k)return null;let m=k.get(h);return m||null}function ae({name:p,reference:h}){let k=[];for(let[m,y]of g)if(m!==null)for(let[E,R]of y)E===null||R.packageDependencies.get(p)!==h||m===p&&E===h||k.push({name:m,reference:E});return k}function X(p,h){let k=new Map,m=new Set,y=R=>{let S=JSON.stringify(R.name);if(m.has(S))return;m.add(S);let A=ae(R);for(let x of A)if(v(x).packagePeers.has(p))y(x);else{let W=k.get(x.name);typeof W>"u"&&k.set(x.name,W=new Set),W.add(x.reference)}};y(h);let E=[];for(let R of[...k.keys()].sort())for(let S of[...k.get(R)].sort())E.push({name:R,reference:S});return E}function ye(p,{resolveIgnored:h=!1,includeDiscardFromLookup:k=!1}={}){if(ee(p)&&!h)return null;let m=N.relative(t.basePath,p);m.match(s)||(m=`./${m}`),m.endsWith("/")||(m=`${m}/`);do{let y=b.get(m);if(typeof y>"u"||y.discardFromLookup&&!k){m=m.substring(0,m.lastIndexOf("/",m.length-2)+1);continue}return y.locator}while(m!=="");return null}function qe(p){try{return e.fakeFs.readFileSync(d.toPortablePath(p),"utf8")}catch(h){if(h.code==="ENOENT")return;throw h}}function We(p,h,{considerBuiltins:k=!0}={}){if(p.startsWith("#"))throw new Error("resolveToUnqualified can not handle private import mappings");if(p==="pnpapi")return d.toPortablePath(e.pnpapiResolution);if(k&&de.isBuiltin(p))return null;let m=ne(p),y=h&&ne(h);if(h&&ee(h)&&(!N.isAbsolute(p)||ye(p)===null)){let S=_(p,h);if(S===!1)throw z(M.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer was explicitely ignored by the regexp)

Require request: "${m}"
Required by: ${y}
`,{request:m,issuer:y});return d.toPortablePath(S)}let E,R=p.match(i);if(R){if(!h)throw z(M.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:m,issuer:y});let[,S,A]=R,x=ye(h);if(!x){let j=_(p,h);if(j===!1)throw z(M.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer doesn't seem to be part of the Yarn-managed dependency tree).

Require path: "${m}"
Required by: ${y}
`,{request:m,issuer:y});return d.toPortablePath(j)}let W=v(x).packageDependencies.get(S),Ne=null;if(W==null&&x.name!==null){let j=t.fallbackExclusionList.get(x.name);if(!j||!j.has(x.reference)){for(let Se=0,Wi=u.length;Se<Wi;++Se){let gt=v(u[Se]).packageDependencies.get(S);if(gt!=null){n?Ne=gt:W=gt;break}}if(t.enableTopLevelFallback&&W==null&&Ne===null){let Se=t.fallbackPool.get(S);Se!=null&&(Ne=Se)}}}let V=null;if(W===null)if(D(x))V=z(M.MISSING_PEER_DEPENDENCY,`Your application tried to access ${S} (a peer dependency); this isn't allowed as there is no ancestor to satisfy the requirement. Use a devDependency if needed.

Required package: ${S}${S!==m?` (via "${m}")`:""}
Required by: ${y}
`,{request:m,issuer:y,dependencyName:S});else{let j=X(S,x);j.every(ce=>D(ce))?V=z(M.MISSING_PEER_DEPENDENCY,`${x.name} tried to access ${S} (a peer dependency) but it isn't provided by your application; this makes the require call ambiguous and unsound.

Required package: ${S}${S!==m?` (via "${m}")`:""}
Required by: ${x.name}@${x.reference} (via ${y})
${j.map(ce=>`Ancestor breaking the chain: ${ce.name}@${ce.reference}
`).join("")}
`,{request:m,issuer:y,issuerLocator:Object.assign({},x),dependencyName:S,brokenAncestors:j}):V=z(M.MISSING_PEER_DEPENDENCY,`${x.name} tried to access ${S} (a peer dependency) but it isn't provided by its ancestors; this makes the require call ambiguous and unsound.

Required package: ${S}${S!==m?` (via "${m}")`:""}
Required by: ${x.name}@${x.reference} (via ${y})

${j.map(ce=>`Ancestor breaking the chain: ${ce.name}@${ce.reference}
`).join("")}
`,{request:m,issuer:y,issuerLocator:Object.assign({},x),dependencyName:S,brokenAncestors:j})}else W===void 0&&(!k&&de.isBuiltin(p)?D(x)?V=z(M.UNDECLARED_DEPENDENCY,`Your application tried to access ${S}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${S} isn't otherwise declared in your dependencies, this makes the require call ambiguous and unsound.

Required package: ${S}${S!==m?` (via "${m}")`:""}
Required by: ${y}
`,{request:m,issuer:y,dependencyName:S}):V=z(M.UNDECLARED_DEPENDENCY,`${x.name} tried to access ${S}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${S} isn't otherwise declared in ${x.name}'s dependencies, this makes the require call ambiguous and unsound.

Required package: ${S}${S!==m?` (via "${m}")`:""}
Required by: ${y}
`,{request:m,issuer:y,issuerLocator:Object.assign({},x),dependencyName:S}):D(x)?V=z(M.UNDECLARED_DEPENDENCY,`Your application tried to access ${S}, but it isn't declared in your dependencies; this makes the require call ambiguous and unsound.

Required package: ${S}${S!==m?` (via "${m}")`:""}
Required by: ${y}
`,{request:m,issuer:y,dependencyName:S}):V=z(M.UNDECLARED_DEPENDENCY,`${x.name} tried to access ${S}, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.

Required package: ${S}${S!==m?` (via "${m}")`:""}
Required by: ${x.name}@${x.reference} (via ${y})
`,{request:m,issuer:y,issuerLocator:Object.assign({},x),dependencyName:S}));if(W==null){if(Ne===null||V===null)throw V||new Error("Assertion failed: Expected an error to have been set");W=Ne;let j=V.message.replace(/\n.*/g,"");V.message=j,!P.has(j)&&r!==0&&(P.add(j),process.emitWarning(V))}let xe=Array.isArray(W)?{name:W[0],reference:W[1]}:{name:S,reference:W},gn=v(xe);if(!gn.packageLocation)throw z(M.MISSING_DEPENDENCY,`A dependency seems valid but didn't get installed for some reason. This might be caused by a partial install, such as dev vs prod.

Required package: ${xe.name}@${xe.reference}${xe.name!==m?` (via "${m}")`:""}
Required by: ${x.name}@${x.reference} (via ${y})
`,{request:m,issuer:y,dependencyLocator:Object.assign({},xe)});let Sn=gn.packageLocation;A?E=N.join(Sn,A):E=Sn}else if(N.isAbsolute(p))E=N.normalize(p);else{if(!h)throw z(M.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:m,issuer:y});let S=N.resolve(h);h.match(o)?E=N.normalize(N.join(S,p)):E=N.normalize(N.join(N.dirname(S),p))}return N.normalize(E)}function Pt(p,h,k=O,m){if(s.test(p))return h;let y=C(h,k,m);return y?N.normalize(y):h}function ge(p,{extensions:h=Object.keys(de.Module._extensions)}={}){let k=[],m=H(p,k,{extensions:h});if(m)return N.normalize(m);{Ea(k.map(R=>d.fromPortablePath(R)));let y=ne(p),E=ye(p);if(E){let{packageLocation:R}=v(E),S=!0;try{e.fakeFs.accessSync(R)}catch(A){if(A?.code==="ENOENT")S=!1;else{let x=(A?.message??A??"empty exception thrown").replace(/^[A-Z]/,Je=>Je.toLowerCase());throw z(M.QUALIFIED_PATH_RESOLUTION_FAILED,`Required package exists but could not be accessed (${x}).

Missing package: ${E.name}@${E.reference}
Expected package location: ${ne(R)}
`,{unqualifiedPath:y,extensions:h})}}if(!S){let A=R.includes("/unplugged/")?"Required unplugged package missing from disk. This may happen when switching branches without running installs (unplugged packages must be fully materialized on disk to work).":"Required package missing from disk. If you keep your packages inside your repository then restarting the Node process may be enough. Otherwise, try to run an install first.";throw z(M.QUALIFIED_PATH_RESOLUTION_FAILED,`${A}

Missing package: ${E.name}@${E.reference}
Expected package location: ${ne(R)}
`,{unqualifiedPath:y,extensions:h})}}throw z(M.QUALIFIED_PATH_RESOLUTION_FAILED,`Qualified path resolution failed: we looked for the following paths, but none could be accessed.

Source path: ${y}
${k.map(R=>`Not found: ${ne(R)}
`).join("")}`,{unqualifiedPath:y,extensions:h})}}function yt(p,h,k){if(!h)throw new Error("Assertion failed: An issuer is required to resolve private import mappings");let m=pa({name:p,base:B.pathToFileURL(d.fromPortablePath(h)),conditions:k.conditions??O,readFileSyncFn:qe});if(m instanceof URL)return ge(d.toPortablePath(B.fileURLToPath(m)),{extensions:k.extensions});if(m.startsWith("#"))throw new Error("Mapping from one private import to another isn't allowed");return te(m,h,k)}function te(p,h,k={}){try{if(p.startsWith("#"))return yt(p,h,k);let{considerBuiltins:m,extensions:y,conditions:E}=k,R=We(p,h,{considerBuiltins:m});if(p==="pnpapi")return R;if(R===null)return null;let S=()=>h!==null?ee(h):!1,A=(!m||!de.isBuiltin(p))&&!S()?Pt(p,R,E,h):R;return ge(A,{extensions:y})}catch(m){throw Object.hasOwn(m,"pnpCode")&&Object.assign(m.data,{request:ne(p),issuer:h&&ne(h)}),m}}function ue(p){let h=N.normalize(p),k=lt.resolveVirtual(h);return k!==h?k:null}return{VERSIONS:ve,topLevel:se,getLocator:(p,h)=>Array.isArray(h)?{name:h[0],reference:h[1]}:{name:p,reference:h},getDependencyTreeRoots:()=>[...t.dependencyTreeRoots],getAllLocators(){let p=[];for(let[h,k]of g)for(let m of k.keys())h!==null&&m!==null&&p.push({name:h,reference:m});return p},getPackageInformation:p=>{let h=oe(p);if(h===null)return null;let k=d.fromPortablePath(h.packageLocation);return{...h,packageLocation:k}},findPackageLocator:p=>ye(d.toPortablePath(p)),resolveToUnqualified:F("resolveToUnqualified",(p,h,k)=>{let m=h!==null?d.toPortablePath(h):null,y=We(d.toPortablePath(p),m,k);return y===null?null:d.fromPortablePath(y)}),resolveUnqualified:F("resolveUnqualified",(p,h)=>d.fromPortablePath(ge(d.toPortablePath(p),h))),resolveRequest:F("resolveRequest",(p,h,k)=>{let m=h!==null?d.toPortablePath(h):null,y=te(d.toPortablePath(p),m,k);return y===null?null:d.fromPortablePath(y)}),resolveVirtual:F("resolveVirtual",p=>{let h=ue(d.toPortablePath(p));return h!==null?d.fromPortablePath(h):null})}}async function Ta(t,{fakeFs:e,pnpapiResolution:n}){let r=await e.readFilePromise(t,"utf8");return Gi(r,{basePath:ki.dirname(t),fakeFs:e,pnpapiResolution:n})}function Gi(t,{basePath:e,fakeFs:n,pnpapiResolution:r}){let i=JSON.parse(t),s=Oi(i,{basePath:e});return Bi(s,{compatibilityMode:!0,fakeFs:n,pnpapiResolution:r})}var La=(t,e,n)=>{let r=an(t),i=Oi(r,{basePath:e}),s=d.join(e,at.pnpCjs);return Bi(i,{fakeFs:n,pnpapiResolution:s})},Vt,Ra=()=>(typeof Vt>"u"&&(Vt=wi.default.brotliDecompressSync(Buffer.from("","base64")).toString()),Vt);$.LinkType=Ei;$.generateInlinedScript=Qo;$.generateLoader=cn;$.generatePrettyJson=xi;$.generateSplitScript=_o;$.getESMLoaderTemplate=Ra;$.hydratePnpFile=Ta;$.hydratePnpSource=Gi;$.makeRuntimeApi=La});var Da={};Xi(Da,{default:()=>Ia,getExistingYarnManifest:()=>Oa,nixCurrentSystem:()=>xa});var si=L("buffer"),oi=Y(L("path"),1),it=Y(L("child_process"),1),Ce=Y(L("process"),1),ai=Y(cr(),1);function vt(t){let e=typeof t=="string"?`
`:10,n=typeof t=="string"?"\r":13;return t[t.length-1]===e&&(t=t.slice(0,-1)),t[t.length-1]===n&&(t=t.slice(0,-1)),t}var Oe=Y(L("process"),1),we=Y(L("path"),1),lr=Y(L("url"),1);function Ye(t={}){let{env:e=process.env,platform:n=process.platform}=t;return n!=="win32"?"PATH":Object.keys(e).reverse().find(r=>r.toUpperCase()==="PATH")||"Path"}function Es(t={}){let{cwd:e=Oe.default.cwd(),path:n=Oe.default.env[Ye()],execPath:r=Oe.default.execPath}=t,i,s=e instanceof URL?lr.default.fileURLToPath(e):e,o=we.default.resolve(s),a=[];for(;i!==o;)a.push(we.default.join(o,"node_modules/.bin")),i=o,o=we.default.resolve(o,"..");return a.push(we.default.resolve(s,r,"..")),[...a,n].join(we.default.delimiter)}function ur({env:t=Oe.default.env,...e}={}){t={...t};let n=Ye({env:t});return e.path=t[n],t[n]=Es(e),t}var Ts=(t,e,n,r)=>{if(n==="length"||n==="prototype"||n==="arguments"||n==="caller")return;let i=Object.getOwnPropertyDescriptor(t,n),s=Object.getOwnPropertyDescriptor(e,n);!Ls(i,s)&&r||Object.defineProperty(t,n,s)},Ls=function(t,e){return t===void 0||t.configurable||t.writable===e.writable&&t.enumerable===e.enumerable&&t.configurable===e.configurable&&(t.writable||t.value===e.value)},Rs=(t,e)=>{let n=Object.getPrototypeOf(e);n!==Object.getPrototypeOf(t)&&Object.setPrototypeOf(t,n)},Fs=(t,e)=>`/* Wrapped ${t}*/
${e}`,vs=Object.getOwnPropertyDescriptor(Function.prototype,"toString"),Ns=Object.getOwnPropertyDescriptor(Function.prototype.toString,"name"),xs=(t,e,n)=>{let r=n===""?"":`with ${n.trim()}() `,i=Fs.bind(null,r,e.toString());Object.defineProperty(i,"name",Ns),Object.defineProperty(t,"toString",{...vs,value:i})};function Nt(t,e,{ignoreNonConfigurable:n=!1}={}){let{name:r}=t;for(let i of Reflect.ownKeys(e))Ts(t,e,i,n);return Rs(t,e),xs(t,e,r),t}var Ke=new WeakMap,fr=(t,e={})=>{if(typeof t!="function")throw new TypeError("Expected a function");let n,r=0,i=t.displayName||t.name||"<anonymous>",s=function(...o){if(Ke.set(s,++r),r===1)n=t.apply(this,o),t=null;else if(e.throw===!0)throw new Error(`Function \`${i}\` can only be called once`);return n};return Nt(s,t),Ke.set(s,r),s};fr.callCount=t=>{if(!Ke.has(t))throw new Error(`The given function \`${t.name}\` is not wrapped by the \`onetime\` package`);return Ke.get(t)};var mr=fr;var br=Y(L("process"),1);var gr=L("os");var dr=()=>{let t=pr-hr+1;return Array.from({length:t},Os)},Os=(t,e)=>({name:`SIGRT${e+1}`,number:hr+e,action:"terminate",description:"Application-specific signal (realtime)",standard:"posix"}),hr=34,pr=64;var yr=L("os");var Pr=[{name:"SIGHUP",number:1,action:"terminate",description:"Terminal closed",standard:"posix"},{name:"SIGINT",number:2,action:"terminate",description:"User interruption with CTRL-C",standard:"ansi"},{name:"SIGQUIT",number:3,action:"core",description:"User interruption with CTRL-\\",standard:"posix"},{name:"SIGILL",number:4,action:"core",description:"Invalid machine instruction",standard:"ansi"},{name:"SIGTRAP",number:5,action:"core",description:"Debugger breakpoint",standard:"posix"},{name:"SIGABRT",number:6,action:"core",description:"Aborted",standard:"ansi"},{name:"SIGIOT",number:6,action:"core",description:"Aborted",standard:"bsd"},{name:"SIGBUS",number:7,action:"core",description:"Bus error due to misaligned, non-existing address or paging error",standard:"bsd"},{name:"SIGEMT",number:7,action:"terminate",description:"Command should be emulated but is not implemented",standard:"other"},{name:"SIGFPE",number:8,action:"core",description:"Floating point arithmetic error",standard:"ansi"},{name:"SIGKILL",number:9,action:"terminate",description:"Forced termination",standard:"posix",forced:!0},{name:"SIGUSR1",number:10,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGSEGV",number:11,action:"core",description:"Segmentation fault",standard:"ansi"},{name:"SIGUSR2",number:12,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGPIPE",number:13,action:"terminate",description:"Broken pipe or socket",standard:"posix"},{name:"SIGALRM",number:14,action:"terminate",description:"Timeout or timer",standard:"posix"},{name:"SIGTERM",number:15,action:"terminate",description:"Termination",standard:"ansi"},{name:"SIGSTKFLT",number:16,action:"terminate",description:"Stack is empty or overflowed",standard:"other"},{name:"SIGCHLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"posix"},{name:"SIGCLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"other"},{name:"SIGCONT",number:18,action:"unpause",description:"Unpaused",standard:"posix",forced:!0},{name:"SIGSTOP",number:19,action:"pause",description:"Paused",standard:"posix",forced:!0},{name:"SIGTSTP",number:20,action:"pause",description:'Paused using CTRL-Z or "suspend"',standard:"posix"},{name:"SIGTTIN",number:21,action:"pause",description:"Background process cannot read terminal input",standard:"posix"},{name:"SIGBREAK",number:21,action:"terminate",description:"User interruption with CTRL-BREAK",standard:"other"},{name:"SIGTTOU",number:22,action:"pause",description:"Background process cannot write to terminal output",standard:"posix"},{name:"SIGURG",number:23,action:"ignore",description:"Socket received out-of-band data",standard:"bsd"},{name:"SIGXCPU",number:24,action:"core",description:"Process timed out",standard:"bsd"},{name:"SIGXFSZ",number:25,action:"core",description:"File too big",standard:"bsd"},{name:"SIGVTALRM",number:26,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGPROF",number:27,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGWINCH",number:28,action:"ignore",description:"Terminal window size changed",standard:"bsd"},{name:"SIGIO",number:29,action:"terminate",description:"I/O is available",standard:"other"},{name:"SIGPOLL",number:29,action:"terminate",description:"Watched event",standard:"other"},{name:"SIGINFO",number:29,action:"ignore",description:"Request for process information",standard:"other"},{name:"SIGPWR",number:30,action:"terminate",description:"Device running out of power",standard:"systemv"},{name:"SIGSYS",number:31,action:"core",description:"Invalid system call",standard:"other"},{name:"SIGUNUSED",number:31,action:"terminate",description:"Invalid system call",standard:"other"}];var xt=()=>{let t=dr();return[...Pr,...t].map(Is)},Is=({name:t,number:e,description:n,action:r,forced:i=!1,standard:s})=>{let{signals:{[t]:o}}=yr.constants,a=o!==void 0;return{name:t,number:a?o:e,description:n,supported:a,action:r,forced:i,standard:s}};var Ds=()=>{let t=xt();return Object.fromEntries(t.map(Us))},Us=({name:t,number:e,description:n,supported:r,action:i,forced:s,standard:o})=>[t,{name:t,number:e,description:n,supported:r,action:i,forced:s,standard:o}],Sr=Ds(),Cs=()=>{let t=xt(),e=65,n=Array.from({length:e},(r,i)=>As(i,t));return Object.assign({},...n)},As=(t,e)=>{let n=Bs(t,e);if(n===void 0)return{};let{name:r,description:i,supported:s,action:o,forced:a,standard:c}=n;return{[t]:{name:r,number:t,description:i,supported:s,action:o,forced:a,standard:c}}},Bs=(t,e)=>{let n=e.find(({name:r})=>gr.constants.signals[r]===t);return n!==void 0?n:e.find(r=>r.number===t)},lc=Cs();var Gs=({timedOut:t,timeout:e,errorCode:n,signal:r,signalDescription:i,exitCode:s,isCanceled:o})=>t?`timed out after ${e} milliseconds`:o?"was canceled":n!==void 0?`failed with ${n}`:r!==void 0?`was killed with ${r} (${i})`:s!==void 0?`failed with exit code ${s}`:"failed",Ie=({stdout:t,stderr:e,all:n,error:r,signal:i,exitCode:s,command:o,escapedCommand:a,timedOut:c,isCanceled:u,killed:P,parsed:{options:{timeout:l,cwd:g=br.default.cwd()}}})=>{s=s===null?void 0:s,i=i===null?void 0:i;let b=i===void 0?void 0:Sr[i].description,T=r&&r.code,F=`Command ${Gs({timedOut:c,timeout:l,errorCode:T,signal:i,signalDescription:b,exitCode:s,isCanceled:u})}: ${o}`,v=Object.prototype.toString.call(r)==="[object Error]",D=v?`${F}
${r.message}`:F,O=[D,e,t].filter(Boolean).join(`
`);return v?(r.originalMessage=r.message,r.message=O):r=new Error(O),r.shortMessage=D,r.command=o,r.escapedCommand=a,r.exitCode=s,r.signal=i,r.signalDescription=b,r.stdout=t,r.stderr=e,r.cwd=g,n!==void 0&&(r.all=n),"bufferedData"in r&&delete r.bufferedData,r.failed=!0,r.timedOut=!!c,r.isCanceled=u,r.killed=P&&!c,r};var Xe=["stdin","stdout","stderr"],Ms=t=>Xe.some(e=>t[e]!==void 0),kr=t=>{if(!t)return;let{stdio:e}=t;if(e===void 0)return Xe.map(r=>t[r]);if(Ms(t))throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${Xe.map(r=>`\`${r}\``).join(", ")}`);if(typeof e=="string")return e;if(!Array.isArray(e))throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof e}\``);let n=Math.max(e.length,Xe.length);return Array.from({length:n},(r,i)=>e[i])};var vr=Y(L("os"),1),Nr=Y(Fr(),1),zs=1e3*5,xr=(t,e="SIGTERM",n={})=>{let r=t(e);return Hs(t,e,n,r),r},Hs=(t,e,n,r)=>{if(!qs(e,n,r))return;let i=Js(n),s=setTimeout(()=>{t("SIGKILL")},i);s.unref&&s.unref()},qs=(t,{forceKillAfterTimeout:e},n)=>Ws(t)&&e!==!1&&n,Ws=t=>t===vr.default.constants.signals.SIGTERM||typeof t=="string"&&t.toUpperCase()==="SIGTERM",Js=({forceKillAfterTimeout:t=!0})=>{if(t===!0)return zs;if(!Number.isFinite(t)||t<0)throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${t}\` (${typeof t})`);return t},Or=(t,e)=>{t.kill()&&(e.isCanceled=!0)},Zs=(t,e,n)=>{t.kill(e),n(Object.assign(new Error("Timed out"),{timedOut:!0,signal:e}))},Ir=(t,{timeout:e,killSignal:n="SIGTERM"},r)=>{if(e===0||e===void 0)return r;let i,s=new Promise((a,c)=>{i=setTimeout(()=>{Zs(t,n,c)},e)}),o=r.finally(()=>{clearTimeout(i)});return Promise.race([s,o])},Dr=({timeout:t})=>{if(t!==void 0&&(!Number.isFinite(t)||t<0))throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${t}\` (${typeof t})`)},Ur=async(t,{cleanup:e,detached:n},r)=>{if(!e||n)return r;let i=(0,Nr.default)(()=>{t.kill()});return r.finally(()=>{i()})};var Cr=L("fs"),Ar=L("child_process");function et(t){return t!==null&&typeof t=="object"&&typeof t.pipe=="function"}function Dt(t){return et(t)&&t.writable!==!1&&typeof t._write=="function"&&typeof t._writableState=="object"}var js=t=>t instanceof Ar.ChildProcess&&typeof t.then=="function",Ut=(t,e,n)=>{if(typeof n=="string")return t[e].pipe((0,Cr.createWriteStream)(n)),t;if(Dt(n))return t[e].pipe(n),t;if(!js(n))throw new TypeError("The second argument must be a string, a stream or an Execa child process.");if(!Dt(n.stdin))throw new TypeError("The target child process's stdin must be available.");return t[e].pipe(n.stdin),n},Br=t=>{t.stdout!==null&&(t.pipeStdout=Ut.bind(void 0,t,"stdout")),t.stderr!==null&&(t.pipeStderr=Ut.bind(void 0,t,"stderr")),t.all!==void 0&&(t.pipeAll=Ut.bind(void 0,t,"all"))};var nt=L("fs");var Gt=Y(zr(),1),Wr=Y(qr(),1),Jr=t=>{if(t!==void 0)throw new TypeError("The `input` and `inputFile` options cannot be both set.")},eo=({input:t,inputFile:e})=>typeof e!="string"?t:(Jr(t),(0,nt.readFileSync)(e)),Zr=t=>{let e=eo(t);if(et(e))throw new TypeError("The `input` option cannot be a stream in sync mode");return e},to=({input:t,inputFile:e})=>typeof e!="string"?t:(Jr(t),(0,nt.createReadStream)(e)),jr=(t,e)=>{let n=to(e);n!==void 0&&(et(n)?n.pipe(t.stdin):t.stdin.end(n))},Yr=(t,{all:e})=>{if(!e||!t.stdout&&!t.stderr)return;let n=(0,Wr.default)();return t.stdout&&n.add(t.stdout),t.stderr&&n.add(t.stderr),n},At=async(t,e)=>{if(!(!t||e===void 0)){t.destroy();try{return await e}catch(n){return n.bufferedData}}},Bt=(t,{encoding:e,buffer:n,maxBuffer:r})=>{if(!(!t||!n))return e?(0,Gt.default)(t,{encoding:e,maxBuffer:r}):Gt.default.buffer(t,{maxBuffer:r})},Kr=async({stdout:t,stderr:e,all:n},{encoding:r,buffer:i,maxBuffer:s},o)=>{let a=Bt(t,{encoding:r,buffer:i,maxBuffer:s}),c=Bt(e,{encoding:r,buffer:i,maxBuffer:s}),u=Bt(n,{encoding:r,buffer:i,maxBuffer:s*2});try{return await Promise.all([o,a,c,u])}catch(P){return Promise.all([{error:P,signal:P.signal,timedOut:P.timedOut},At(t,a),At(e,c),At(n,u)])}};var no=(async()=>{})().constructor.prototype,ro=["then","catch","finally"].map(t=>[t,Reflect.getOwnPropertyDescriptor(no,t)]),Mt=(t,e)=>{for(let[n,r]of ro){let i=typeof e=="function"?(...s)=>Reflect.apply(r.value,e(),s):r.value.bind(e);Reflect.defineProperty(t,n,{...r,value:i})}},Xr=t=>new Promise((e,n)=>{t.on("exit",(r,i)=>{e({exitCode:r,signal:i})}),t.on("error",r=>{n(r)}),t.stdin&&t.stdin.on("error",r=>{n(r)})});var _r=L("buffer"),$r=L("child_process"),ei=(t,e=[])=>Array.isArray(e)?[t,...e]:[t],io=/^[\w.-]+$/,so=/"/g,oo=t=>typeof t!="string"||io.test(t)?t:`"${t.replace(so,'\\"')}"`,zt=(t,e)=>ei(t,e).join(" "),Ht=(t,e)=>ei(t,e).map(n=>oo(n)).join(" "),ao=/ +/g;var Vr=t=>{let e=typeof t;if(e==="string")return t;if(e==="number")return String(t);if(e==="object"&&t!==null&&!(t instanceof $r.ChildProcess)&&"stdout"in t){let n=typeof t.stdout;if(n==="string")return t.stdout;if(_r.Buffer.isBuffer(t.stdout))return t.stdout.toString();throw new TypeError(`Unexpected "${n}" stdout in template expression`)}throw new TypeError(`Unexpected "${e}" in template expression`)},Qr=(t,e,n)=>n||t.length===0||e.length===0?[...t,...e]:[...t.slice(0,-1),`${t[t.length-1]}${e[0]}`,...e.slice(1)],co=({templates:t,expressions:e,tokens:n,index:r,template:i})=>{let s=i??t.raw[r],o=s.split(ao).filter(Boolean),a=Qr(n,o,s.startsWith(" "));if(r===e.length)return a;let c=e[r],u=Array.isArray(c)?c.map(P=>Vr(P)):[Vr(c)];return Qr(a,u,s.endsWith(" "))},qt=(t,e)=>{let n=[];for(let[r,i]of t.entries())n=co({templates:t,expressions:e,tokens:n,index:r,template:i});return n};var ti=L("util"),ni=Y(L("process"),1),ri=(0,ti.debuglog)("execa").enabled,rt=(t,e)=>String(t).padStart(e,"0"),lo=()=>{let t=new Date;return`${rt(t.getHours(),2)}:${rt(t.getMinutes(),2)}:${rt(t.getSeconds(),2)}.${rt(t.getMilliseconds(),3)}`},Wt=(t,{verbose:e})=>{e&&ni.default.stderr.write(`[${lo()}] ${t}
`)};var uo=1e3*1e3*100,fo=({env:t,extendEnv:e,preferLocal:n,localDir:r,execPath:i})=>{let s=e?{...Ce.default.env,...t}:t;return n?ur({env:s,cwd:r,execPath:i}):s},ci=(t,e,n={})=>{let r=ai.default._parse(t,e,n);return t=r.command,e=r.args,n=r.options,n={maxBuffer:uo,buffer:!0,stripFinalNewline:!0,extendEnv:!0,preferLocal:!1,localDir:n.cwd||Ce.default.cwd(),execPath:Ce.default.execPath,encoding:"utf8",reject:!0,cleanup:!0,all:!1,windowsHide:!0,verbose:ri,...n},n.env=fo(n),n.stdio=kr(n),Ce.default.platform==="win32"&&oi.default.basename(t,".exe")==="cmd"&&e.unshift("/q"),{file:t,args:e,options:n,parsed:r}},Ae=(t,e,n)=>typeof e!="string"&&!si.Buffer.isBuffer(e)?n===void 0?void 0:"":t.stripFinalNewline?vt(e):e;function Jt(t,e,n){let r=ci(t,e,n),i=zt(t,e),s=Ht(t,e);Wt(s,r.options),Dr(r.options);let o;try{o=it.default.spawn(r.file,r.args,r.options)}catch(b){let T=new it.default.ChildProcess,f=Promise.reject(Ie({error:b,stdout:"",stderr:"",all:"",command:i,escapedCommand:s,parsed:r,timedOut:!1,isCanceled:!1,killed:!1}));return Mt(T,f),T}let a=Xr(o),c=Ir(o,r.options,a),u=Ur(o,r.options,c),P={isCanceled:!1};o.kill=xr.bind(null,o.kill.bind(o)),o.cancel=Or.bind(null,o,P);let g=mr(async()=>{let[{error:b,exitCode:T,signal:f,timedOut:F},v,D,O]=await Kr(o,r.options,u),C=Ae(r.options,v),H=Ae(r.options,D),K=Ae(r.options,O);if(b||T!==0||f!==null){let _=Ie({error:b,exitCode:T,signal:f,stdout:C,stderr:H,all:K,command:i,escapedCommand:s,parsed:r,timedOut:F,isCanceled:P.isCanceled||(r.options.signal?r.options.signal.aborted:!1),killed:o.killed});if(!r.options.reject)return _;throw _}return{command:i,escapedCommand:s,exitCode:0,stdout:C,stderr:H,all:K,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}});return jr(o,r.options),o.all=Yr(o,r.options),Br(o),Mt(o,g),o}function Zt(t,e,n){let r=ci(t,e,n),i=zt(t,e),s=Ht(t,e);Wt(s,r.options);let o=Zr(r.options),a;try{a=it.default.spawnSync(r.file,r.args,{...r.options,input:o})}catch(P){throw Ie({error:P,stdout:"",stderr:"",all:"",command:i,escapedCommand:s,parsed:r,timedOut:!1,isCanceled:!1,killed:!1})}let c=Ae(r.options,a.stdout,a.error),u=Ae(r.options,a.stderr,a.error);if(a.error||a.status!==0||a.signal!==null){let P=Ie({stdout:c,stderr:u,error:a.error,signal:a.signal,exitCode:a.status,command:i,escapedCommand:s,parsed:r,timedOut:a.error&&a.error.code==="ETIMEDOUT",isCanceled:!1,killed:a.signal!==null});if(!r.options.reject)return P;throw P}return{command:i,escapedCommand:s,exitCode:0,stdout:c,stderr:u,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}}var mo=({input:t,inputFile:e,stdio:n})=>t===void 0&&e===void 0&&n===void 0?{stdin:"inherit"}:{},ii=(t={})=>({preferLocal:!0,...mo(t),...t});function li(t){function e(n,...r){if(!Array.isArray(n))return li({...t,...n});let[i,...s]=qt(n,r);return Jt(i,s,ii(t))}return e.sync=(n,...r)=>{if(!Array.isArray(n))throw new TypeError("Please use $(options).sync`command` instead of $.sync(options)`command`.");let[i,...s]=qt(n,r);return Zt(i,s,ii(t))},e}var Hc=li();var w=L("@yarnpkg/core"),Pe=L("@yarnpkg/cli"),I=L("@yarnpkg/fslib"),yn=L("@yarnpkg/libzip"),qi=L("@yarnpkg/plugin-file"),J=L("clipanion"),Z=Y(L("typanion")),Fa=ui(),ie=L("fs"),re=L("path"),{PassThrough:Hi}=L("stream"),{spawnSync:Yc}=L("child_process"),{generateInlinedScript:va}=Mi(),un;function Na(t,e){for(let[n,r]of t.entries())if(r===e)return n}function xa(){if(un)return un;let t=JSON.parse(Zt("nix",["eval","--impure","--json","--expr","builtins.currentSystem"]).stdout);return un=t,t}async function Oa(t){try{let e=["eval","--json","--impure","--expr",Fa+`

        getPackages (import ${t})
      `],{stdout:n}=await Jt("nix",e,{stderr:"ignore"});return JSON.parse(n)}catch{return null}}var{toPortablePath:He}=I.npath,pt=(...t)=>{process.env.YARNNIX_DEBUG&&console.log(...t)};function zi(t){let e=t.indexOf("/");return e!==-1?t.slice(e+1):t}var fn=class extends Pe.BaseCommand{constructor(){super(...arguments);this.locator=J.Option.String({validator:Z.default.isString()});this.outDirectory=J.Option.String({validator:Z.default.isString()})}static{this.paths=[["nix","fetch-by-locator"]]}async execute(){let n=await w.Configuration.find(I.ppath.cwd(),this.context.plugins),{project:r,workspace:i}=await w.Project.find(n,I.ppath.cwd()),s=n.makeFetcher(),o=await w.StreamReport.start({configuration:n,stdout:this.context.stdout,includeLogs:!this.context.quiet},async a=>{n.values.set("enableMirror",!1);let c={...JSON.parse(this.locator),locatorHash:"",identHash:""};w.structUtils.isVirtualLocator(c)&&(c=w.structUtils.devirtualizeLocator(c));let u={checksums:new Map,project:r,cache:new w.Cache(He(this.outDirectory),{check:!1,configuration:n,immutable:!1}),fetcher:s,report:a},P=await s.fetch(c,u);ie.renameSync(P.packageFs.target,re.join(this.outDirectory,"output.zip"))})}},mn=class extends Pe.BaseCommand{constructor(){super(...arguments);this.packageRegistryDataPath=J.Option.String({validator:Z.default.isString()})}static{this.paths=[["nix","create-lockfile"]]}async execute(){let n=await w.Configuration.find(I.ppath.cwd(),this.context.plugins),r=new w.Project(I.ppath.cwd(),{configuration:n});await r.setupResolutions();let i=JSON.parse(ie.readFileSync(this.packageRegistryDataPath,"utf8")),s=Object.values(i).filter(o=>!!o?.manifest);for(let o of s){let a=Object.assign({},o.manifest,{name:o.name,reference:o.reference}),c=new Map,u=new Map(Object.entries(a.bin??{})),P=w.structUtils.makeIdent(a.scope,a.flatName),l=w.structUtils.makeLocator(P,a.reference),g=w.structUtils.makeDescriptor(P,a.descriptorRange);a.locatorHash=l.locatorHash,a.descriptorHash=g.descriptorHash,o.manifest.locatorHash=l.locatorHash,o.manifest.descriptorHash=g.descriptorHash;let b={...l,languageName:a.languageName,linkType:a.linkType,conditions:null,dependencies:c,bin:u};r.originalPackages.set(a.locatorHash,b),r.storedResolutions.set(a.descriptorHash,a.locatorHash),a.checksum!=null&&r.storedChecksums.set(a.locatorHash,a.checksum),r.storedDescriptors.set(a.descriptorHash,g)}for(let o of s){let a=r.originalPackages.get(o.manifest.locatorHash);if(!a)continue;let c=o.packageDependencies??{};for(let u of Object.keys(c)){let[P,l]=c[u],g=s.find(b=>b?.name===P&&b?.reference===l);if(g?.manifest?.descriptorHash!=null){let b=r.storedDescriptors.get(g.manifest.descriptorHash);b!=null&&a.dependencies.set(g.manifest.descriptorHash,b)}}}r.storedPackages=r.originalPackages,await r.persistLockfile()}},dn=class extends Pe.BaseCommand{constructor(){super(...arguments);this.locator=J.Option.String({validator:Z.default.isString()});this.tgzPath=J.Option.String({validator:Z.default.isString()});this.outPath=J.Option.String({validator:Z.default.isString()})}static{this.paths=[["nix","convert-to-zip"]]}async execute(){let n=await w.Configuration.find(I.ppath.cwd(),this.context.plugins),{project:r,workspace:i}=await w.Project.find(n,I.ppath.cwd()),s={...JSON.parse(this.locator),locatorHash:"",identHash:""},o=await w.tgzUtils.convertToZip(ie.readFileSync(this.tgzPath),{compressionLevel:r.configuration.get("compressionLevel"),prefixPath:w.structUtils.getIdentVendorPath(s),stripComponents:1});ie.copyFileSync(o.getRealPath(),this.outPath)}},hn=class extends Pe.BaseCommand{constructor(){super(...arguments);this.outDirectory=J.Option.String({validator:Z.default.isString()});this.packageRegistryDataPath=J.Option.String({validator:Z.default.isString()});this.topLevelPackageLocator=J.Option.String({validator:Z.default.isString()})}static{this.paths=[["nix","generate-pnp-file"]]}async execute(){let n=await w.Configuration.find(I.ppath.cwd(),this.context.plugins),{project:r,workspace:i}=await w.Project.find(n,I.ppath.cwd()),s=I.ppath.join(He(this.outDirectory),I.Filename.pnpCjs),o=r.configuration.get("pnpFallbackMode"),a=[],c=o!=="none",u=new Map,P=w.miscUtils.buildIgnorePattern([".yarn/sdks/**",...r.configuration.get("pnpIgnorePatterns")]),l=r.configuration.get("pnpShebang"),g=new Map,b=JSON.parse(ie.readFileSync(this.packageRegistryDataPath,"utf8")),T=null,f=ie.realpathSync(this.outDirectory);for(let D of Object.keys(b)){let O=b[D];if(!O)continue;let C=w.structUtils.makeIdent(O.manifest.scope,O.manifest.flatName),H=w.structUtils.makeLocator(C,O.reference),K=w.structUtils.isVirtualLocator(O),_=new Map,ee=new Set;for(let X of O.manifest?.packagePeers??[])_.set(X,null),ee.add(X);if(O.packageDependencies!=null)for(let X of Object.keys(O.packageDependencies))_.set(X,O.packageDependencies[X]);let ve=O.packageLocation??O.drvPath+"/node_modules/"+O.name,se=re.relative(f,ve),oe=(se.startsWith("../")?se:"./"+se)+"/";K&&(oe="./"+I.VirtualFS.makeVirtualPath(He("./.yarn/__virtual__"),w.structUtils.slugifyLocator(H),se)+"/");let ae={packageLocation:oe,packageDependencies:_,packagePeers:ee,linkType:O.linkType};w.miscUtils.getMapWithDefault(g,O.name).set(O.reference,ae),H.reference.startsWith("workspace:")&&a.push({name:w.structUtils.stringifyIdent(H),reference:H.reference}),`${O.name}@${O.reference}`===this.topLevelPackageLocator&&(T=ae)}if(T!=null)w.miscUtils.getMapWithDefault(g,null).set(null,T);else throw new Error("Could not determine topLevelPackage, this is NEEDED for the .pnp.cjs to be correctly generated");let v=va({dependencyTreeRoots:a,enableTopLevelFallback:c,fallbackExclusionList:o==="dependencies-only"?a:[],fallbackPool:u,ignorePattern:P,packageRegistry:g,shebang:l});await I.xfs.changeFilePromise(s,v,{automaticNewlines:!0,mode:493})}},pn=class extends Pe.BaseCommand{constructor(){super(...arguments);this.binWrappersOutDirectory=J.Option.String({validator:Z.default.isString()});this.pnpOutDirectory=J.Option.String({validator:Z.default.isString()});this.packageRegistryDataPath=J.Option.String({validator:Z.default.isString()});this.topLevelPackageLocator=J.Option.String({validator:Z.default.isString()})}static{this.paths=[["nix","make-path-wrappers"]]}async execute(){let n=JSON.parse(ie.readFileSync(this.packageRegistryDataPath,"utf8")),r=ie.realpathSync(this.pnpOutDirectory);for(let i of Object.keys(n)){let s=n[i];if(!s)continue;let o=w.structUtils.makeIdent(s.manifest.scope,s.manifest.flatName),a=w.structUtils.makeLocator(o,s.reference),c=w.structUtils.isVirtualLocator(s),u=s.packageLocation??s.drvPath+"/node_modules/"+s.name,P=re.relative(r,u),l=u;if(`${s.name}@${s.reference}`!==this.topLevelPackageLocator){c&&(l=re.join(r,I.VirtualFS.makeVirtualPath(He("./.yarn/__virtual__"),w.structUtils.slugifyLocator(a),P)));for(let b of Object.keys(s?.manifest?.bin??{})){let T=re.join(l,s.manifest.bin[b]);await I.xfs.writeFilePromise(re.join(this.binWrappersOutDirectory,b),`node ${T} "$@"`,{mode:493})}}}}},Pn=class extends Pe.BaseCommand{constructor(){super(...arguments);this.locator=J.Option.String({validator:Z.default.isString()});this.pnpRootDirectory=J.Option.String({validator:Z.default.isString()});this.packageDirectory=J.Option.String({validator:Z.default.isString()})}static{this.paths=[["nix","run-build-scripts"]]}async execute(){let n=await w.Configuration.find(I.ppath.cwd(),this.context.plugins),{project:r,workspace:i}=await w.Project.find(n,I.ppath.cwd()),s=JSON.parse(this.locator),o=w.structUtils.makeIdent(s.scope,s.name),a=w.structUtils.makeLocator(o,s.reference),c=r.originalPackages.get(a.locatorHash);r.cwd=this.pnpRootDirectory,r.storedPackages=r.originalPackages;let u=await yn.ZipOpenFS.openPromise(async P=>{let l=r.configuration.getLinkers(),g={project:r,report:new w.StreamReport({stdout:new Hi,configuration:n})},b=l.find(v=>v.supportsPackage(c,g));if(!b)throw new Error(`The package ${w.structUtils.prettyLocator(r.configuration,c)} isn't supported by any of the available linkers`);let T=await b.findPackageLocation(c,g),f=new I.CwdFS(T,{baseFs:P});return await w.Manifest.find(I.PortablePath.dot,{baseFs:f})});for(let P of["preinstall","install","postinstall"]){if(!u.scripts.has(P))continue;let l=await w.scriptUtils.executePackageScript(c,P,[],{cwd:He(this.packageDirectory),project:r,stdin:process.stdin,stdout:process.stdout,stderr:process.stderr});if(l>0)return l}}},Ia={hooks:{afterAllInstalled:async(t,e)=>{let n=t.configuration.getLinkers(),r={project:t,report:null},i=new Map(n.map(T=>{let f=T.makeInstaller(r),F=T.getCustomDataKey(),v=t.linkersCustomData.get(F);return typeof v<"u"&&f.attachCustomData(v),[T,f]})),s=await w.Cache.find(t.configuration),o=t.configuration.makeFetcher(),a={checksums:new Map,project:t,cache:null,fetcher:o,report:null},c=t.configuration.makeResolver(),u={project:t,report:e.report,resolver:c},P={};for(let[T,f]of t.storedPackages){let F=w.structUtils.isVirtualLocator(f),v=F?t.storedPackages.get(w.structUtils.devirtualizeLocator(f).locatorHash):f,D=n.find(m=>m.supportsPackage(v,r)),O=i.get(D),C=o.getLocalPath(v,a);if(!C){let m=qi.fileUtils.parseSpec(v.reference);if(m?.parentLocator!=null&&m?.path!=null){let y=o.getLocalPath(m.parentLocator,a),E=re.resolve(y,m.path);E!=null&&(C=E)}}let H=C!=null?"./"+re.relative(t.cwd,C):null,K=f.reference.startsWith("workspace:")?`./${f.reference.substring(10)}`:H??null,_=f.bin!=null?Object.fromEntries(f.bin):null,ee=K!=null?!0:O?.shouldBeUnplugged!=null?O.customData.store.get(f.locatorHash)!=null?O.shouldBeUnplugged(f,O.customData.store.get(f.locatorHash),t.getDependencyMeta(w.structUtils.isVirtualLocator(f)?w.structUtils.devirtualizeLocator(f):f,f.version)):!1:!0,ve=!K&&!ee,se=K!=null&&f.reference.startsWith("patch:"),oe=null;if(f.conditions!=null){let m=f.conditions.split("&").map(E=>E.trim().split("=")),y=[];for(let E of m){let R=E[0],S=E[1];if(R==="os")S==="linux"?y.push("stdenv.isLinux"):S==="darwin"?y.push("stdenv.isDarwin"):y.push("false");else if(R==="cpu"){let A={ia32:"stdenv.isi686",x64:"stdenv.isx86_64",arm:"stdenv.isAarch32",arm64:"stdenv.isAarch64"};A[S]!=null?y.push(A[S]):y.push("false")}else R==="libc"&&S!=="glibc"&&y.push("false")}y.length>0&&(oe=`stdenv: ${y.map(E=>`(${E})`).join(" && ")}`)}let ae=f.dependencies,X=new Map;if(v.reference.startsWith("workspace:")){let m=await yn.ZipOpenFS.openPromise(async y=>{let E=t.configuration.getLinkers(),R={project:t,report:new w.StreamReport({stdout:new Hi,configuration:t.configuration})},S=E.find(W=>W.supportsPackage(v,R));if(!S)throw new Error(`The package ${w.structUtils.prettyLocator(t.configuration,f)} isn't supported by any of the available linkers`);let A=await S.findPackageLocation(v,R),x=new I.CwdFS(A,{baseFs:y});return await w.Manifest.find(I.PortablePath.dot,{baseFs:x})});m!=null&&(ae=new Map,X=new Map,m.devDependencies&&(Array.from(m.devDependencies).map(([y,E])=>X.set(y,f.dependencies.get(y))),Array.from(f.dependencies).map(([y,E])=>X.has(y)?null:ae.set(y,E))))}let qe=m=>Promise.all(Array.from(m).map(async([y,E])=>{if(!E)return pt(`failed to resolve pkg ${y}`,E),null;let R=t.storedResolutions.get(E.descriptorHash),S=R!=null?t.storedPackages.get(R):null;return S?{key:y,name:w.structUtils.stringifyIdent(E),packageManifestId:w.structUtils.stringifyIdent(S)+"@"+S.reference}:(pt(`failed to resolve pkg ${y}`,E),null)})).then(y=>y.filter(E=>!!E)),We=await qe(ae),Pt=await qe(X),ge=[];for(let m of f.peerDependencies.values())ge.push(w.structUtils.stringifyIdent(m));let yt=w.structUtils.stringifyIdent(f)+"@"+f.reference,te=null,ue=null;await async function(){if(K!=null&&!se){te=null,ue=null;return}else if(ve){te=zi(t.storedChecksums.get(f.locatorHash)??""),ue=null;return}else if(ee){if(te=zi(t.storedChecksums.get(f.locatorHash)??""),!te){pt("got package unplugged package with no hash",f);try{let m=s.getLocatorPath(f,null);te=await w.hashUtils.checksumFile(m)}catch(m){pt("error getting outputHash",m.message)}}ue=null;return}else{te=null,ue=null;return}}();let p=Na(t.storedResolutions,f.locatorHash),h=t.storedDescriptors.get(p),k=t.storedChecksums.get(f.locatorHash);P[yt]={isVirtual:F,canonicalPackage:v,name:w.structUtils.stringifyIdent(f),reference:f.reference,linkType:f.linkType,outputName:[w.structUtils.stringifyIdent(f),f.version,f.locatorHash.substring(0,10)].filter(m=>!!m).join("-").replace(/@/g,"").replace(/[\/]/g,"-"),outputHash:te,outputHashByPlatform:ue,src:K,shouldBeUnplugged:ee,installCondition:oe,bin:_,flatName:f.name,descriptor:h,languageName:f.languageName,scope:f.scope,checksum:k,dependencies:We,devDependencies:Pt,packagePeers:ge}}let l=[];l.push('# This file is generated by running "yarn install" inside your project.'),l.push("# It is essentially a version of yarn.lock that Nix can better understand"),l.push("# Manual changes WILL be lost - proceed with caution!"),l.push("let"),l.push("  packages = {");function g(T,f){if(f.length>0){l.push(`      ${T} = {`);for(let F of f)l.push(`        ${JSON.stringify(F.name)} = packages.${JSON.stringify(F.packageManifestId)};`);l.push("      };")}}let b=Object.keys(P).sort((T,f)=>T.localeCompare(f));for(let T of b){let f=P[T];if(l.push(`    "${T}" = {`),l.push(`      name = ${JSON.stringify(f.name)};`),l.push(`      reference = ${JSON.stringify(f.reference)};`),f.isVirtual&&f.canonicalPackage!=null&&l.push(`      canonicalPackage = packages.${JSON.stringify(`${w.structUtils.stringifyIdent(f.canonicalPackage)}@${f.canonicalPackage.reference}`)};`),!f.isVirtual){if(l.push(`      linkType = ${JSON.stringify(f.linkType)};`),l.push(`      outputName = ${JSON.stringify(f.outputName)};`),f.outputHash!=null&&l.push(`      outputHash = ${JSON.stringify(f.outputHash)};`),f.outputHashByPlatform&&Object.keys(f.outputHashByPlatform).length>0){l.push("      outputHashByPlatform = {");for(let F of Object.keys(f.outputHashByPlatform))l.push(`        ${JSON.stringify(F)} = ${JSON.stringify(f.outputHashByPlatform[F])};`);l.push("      };")}if(f.src&&l.push(`      src = ${f.src};`),f.shouldBeUnplugged&&l.push(`      shouldBeUnplugged = ${f.shouldBeUnplugged};`),f.installCondition&&l.push(`      installCondition = ${f.installCondition};`),l.push(`      flatName = ${JSON.stringify(f.flatName)};`),l.push(`      languageName = ${JSON.stringify(f.languageName)};`),l.push(`      scope = ${JSON.stringify(f.scope)};`),l.push(`      descriptorRange = ${JSON.stringify(f.descriptor.range)};`),f.checksum&&l.push(`      checksum = ${JSON.stringify(f.checksum)};`),f.bin&&Object.keys(f.bin).length>0){l.push("      bin = {");for(let F of Object.keys(f.bin))l.push(`        ${JSON.stringify(F)} = ${JSON.stringify(f.bin[F])};`);l.push("      };")}}if(g("dependencies",f.dependencies),g("devDependencies",f.devDependencies),!f.isVirtual&&f.packagePeers&&f.packagePeers.length>0){l.push("      packagePeers = [");for(let F of f.packagePeers)l.push(`        ${JSON.stringify(F)}`);l.push("      ];")}l.push("    };")}l.push("  };"),l.push("in"),l.push("packages"),l.push(""),ie.writeFileSync(re.join(t.cwd,"yarn-manifest.nix"),l.join(`
`),"utf8")},populateYarnPaths:async t=>{let e=process.env.YARNNIX_PACKAGE_REGISTRY_DATA_PATH;if(e){let n=JSON.parse(ie.readFileSync(e,"utf8")),r=Object.values(n).filter(i=>!!i?.manifest);for(let i of r)if(i.canonicalReference.startsWith("workspace:")&&i.drvPath!==process.env.out){let s=i.packageLocation??re.join(i.drvPath,"node_modules",i.name),o=new w.Workspace(s,{project:t});await o.setup(),t.addWorkspace(o)}}}},commands:[mn,fn,dn,hn,pn,Pn]};return Vi(Da);})();
/*! Bundled license information:

@yarnpkg/pnp/lib/index.js:
  (**
    @license
    Copyright Node.js contributors. All rights reserved.
  
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
  
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
  
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.
  *)
  (**
    @license
    The MIT License (MIT)
  
    Copyright (c) 2014 Blake Embrey (hello@blakeembrey.com)
  
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
  
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
  
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
  *)
*/
return plugin;
}
};
