/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-yarnpnp2nix",
factory: function (require) {
var plugin=(()=>{var bs=Object.create;var Qe=Object.defineProperty;var vs=Object.getOwnPropertyDescriptor;var Ts=Object.getOwnPropertyNames;var Es=Object.getPrototypeOf,Fs=Object.prototype.hasOwnProperty;var x=(n=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(n,{get:(e,t)=>(typeof require<"u"?require:e)[t]}):n)(function(n){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+n+'" is not supported')});var A=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),xs=(n,e)=>{for(var t in e)Qe(n,t,{get:e[t],enumerable:!0})},hn=(n,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of Ts(e))!Fs.call(n,s)&&s!==t&&Qe(n,s,{get:()=>e[s],enumerable:!(r=vs(e,s))||r.enumerable});return n};var J=(n,e,t)=>(t=n!=null?bs(Es(n)):{},hn(e||!n||!n.__esModule?Qe(t,"default",{value:n,enumerable:!0}):t,n)),Is=n=>hn(Qe({},"__esModule",{value:!0}),n);var gn=A((io,yn)=>{yn.exports=pn;pn.sync=Ns;var dn=x("fs");function Rs(n,e){var t=e.pathExt!==void 0?e.pathExt:process.env.PATHEXT;if(!t||(t=t.split(";"),t.indexOf("")!==-1))return!0;for(var r=0;r<t.length;r++){var s=t[r].toLowerCase();if(s&&n.substr(-s.length).toLowerCase()===s)return!0}return!1}function mn(n,e,t){return!n.isSymbolicLink()&&!n.isFile()?!1:Rs(e,t)}function pn(n,e,t){dn.stat(n,function(r,s){t(r,r?!1:mn(s,n,e))})}function Ns(n,e){return mn(dn.statSync(n),n,e)}});var bn=A((ao,kn)=>{kn.exports=Sn;Sn.sync=Os;var Pn=x("fs");function Sn(n,e,t){Pn.stat(n,function(r,s){t(r,r?!1:wn(s,e))})}function Os(n,e){return wn(Pn.statSync(n),e)}function wn(n,e){return n.isFile()&&Ls(n,e)}function Ls(n,e){var t=n.mode,r=n.uid,s=n.gid,i=e.uid!==void 0?e.uid:process.getuid&&process.getuid(),a=e.gid!==void 0?e.gid:process.getgid&&process.getgid(),o=parseInt("100",8),c=parseInt("010",8),f=parseInt("001",8),y=o|c,l=t&f||t&c&&s===a||t&o&&r===i||t&y&&i===0;return l}});var Tn=A((co,vn)=>{var oo=x("fs"),Xe;process.platform==="win32"||global.TESTING_WINDOWS?Xe=gn():Xe=bn();vn.exports=wt;wt.sync=Ds;function wt(n,e,t){if(typeof e=="function"&&(t=e,e={}),!t){if(typeof Promise!="function")throw new TypeError("callback not provided");return new Promise(function(r,s){wt(n,e||{},function(i,a){i?s(i):r(a)})})}Xe(n,e||{},function(r,s){r&&(r.code==="EACCES"||e&&e.ignoreErrors)&&(r=null,s=!1),t(r,s)})}function Ds(n,e){try{return Xe.sync(n,e||{})}catch(t){if(e&&e.ignoreErrors||t.code==="EACCES")return!1;throw t}}});var On=A((lo,Nn)=>{var we=process.platform==="win32"||process.env.OSTYPE==="cygwin"||process.env.OSTYPE==="msys",En=x("path"),js=we?";":":",Fn=Tn(),xn=n=>Object.assign(new Error(`not found: ${n}`),{code:"ENOENT"}),In=(n,e)=>{let t=e.colon||js,r=n.match(/\//)||we&&n.match(/\\/)?[""]:[...we?[process.cwd()]:[],...(e.path||process.env.PATH||"").split(t)],s=we?e.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",i=we?s.split(t):[""];return we&&n.indexOf(".")!==-1&&i[0]!==""&&i.unshift(""),{pathEnv:r,pathExt:i,pathExtExe:s}},Rn=(n,e,t)=>{typeof e=="function"&&(t=e,e={}),e||(e={});let{pathEnv:r,pathExt:s,pathExtExe:i}=In(n,e),a=[],o=f=>new Promise((y,l)=>{if(f===r.length)return e.all&&a.length?y(a):l(xn(n));let S=r[f],k=/^".*"$/.test(S)?S.slice(1,-1):S,w=En.join(k,n),u=!k&&/^\.[\\\/]/.test(n)?n.slice(0,2)+w:w;y(c(u,f,0))}),c=(f,y,l)=>new Promise((S,k)=>{if(l===s.length)return S(o(y+1));let w=s[l];Fn(f+w,{pathExt:i},(u,I)=>{if(!u&&I)if(e.all)a.push(f+w);else return S(f+w);return S(c(f,y,l+1))})});return t?o(0).then(f=>t(null,f),t):o(0)},Cs=(n,e)=>{e=e||{};let{pathEnv:t,pathExt:r,pathExtExe:s}=In(n,e),i=[];for(let a=0;a<t.length;a++){let o=t[a],c=/^".*"$/.test(o)?o.slice(1,-1):o,f=En.join(c,n),y=!c&&/^\.[\\\/]/.test(n)?n.slice(0,2)+f:f;for(let l=0;l<r.length;l++){let S=y+r[l];try{if(Fn.sync(S,{pathExt:s}))if(e.all)i.push(S);else return S}catch{}}}if(e.all&&i.length)return i;if(e.nothrow)return null;throw xn(n)};Nn.exports=Rn;Rn.sync=Cs});var Dn=A((uo,kt)=>{"use strict";var Ln=(n={})=>{let e=n.env||process.env;return(n.platform||process.platform)!=="win32"?"PATH":Object.keys(e).reverse().find(r=>r.toUpperCase()==="PATH")||"Path"};kt.exports=Ln;kt.exports.default=Ln});var Un=A((fo,An)=>{"use strict";var jn=x("path"),As=On(),Us=Dn();function Cn(n,e){let t=n.options.env||process.env,r=process.cwd(),s=n.options.cwd!=null,i=s&&process.chdir!==void 0&&!process.chdir.disabled;if(i)try{process.chdir(n.options.cwd)}catch{}let a;try{a=As.sync(n.command,{path:t[Us({env:t})],pathExt:e?jn.delimiter:void 0})}catch{}finally{i&&process.chdir(r)}return a&&(a=jn.resolve(s?n.options.cwd:"",a)),a}function Ms(n){return Cn(n)||Cn(n,!0)}An.exports=Ms});var Mn=A((ho,vt)=>{"use strict";var bt=/([()\][%!^"`<>&|;, *?])/g;function Hs(n){return n=n.replace(bt,"^$1"),n}function Ws(n,e){return n=`${n}`,n=n.replace(/(\\*)"/g,'$1$1\\"'),n=n.replace(/(\\*)$/,"$1$1"),n=`"${n}"`,n=n.replace(bt,"^$1"),e&&(n=n.replace(bt,"^$1")),n}vt.exports.command=Hs;vt.exports.argument=Ws});var Wn=A((mo,Hn)=>{"use strict";Hn.exports=/^#!(.*)/});var Bn=A((po,Gn)=>{"use strict";var Gs=Wn();Gn.exports=(n="")=>{let e=n.match(Gs);if(!e)return null;let[t,r]=e[0].replace(/#! ?/,"").split(" "),s=t.split("/").pop();return s==="env"?r:r?`${s} ${r}`:s}});var Vn=A((yo,Zn)=>{"use strict";var Tt=x("fs"),Bs=Bn();function Zs(n){let t=Buffer.alloc(150),r;try{r=Tt.openSync(n,"r"),Tt.readSync(r,t,0,150,0),Tt.closeSync(r)}catch{}return Bs(t.toString())}Zn.exports=Zs});var zn=A((go,Kn)=>{"use strict";var Vs=x("path"),Qn=Un(),Xn=Mn(),Qs=Vn(),Xs=process.platform==="win32",Ks=/\.(?:com|exe)$/i,zs=/node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;function Ys(n){n.file=Qn(n);let e=n.file&&Qs(n.file);return e?(n.args.unshift(n.file),n.command=e,Qn(n)):n.file}function qs(n){if(!Xs)return n;let e=Ys(n),t=!Ks.test(e);if(n.options.forceShell||t){let r=zs.test(e);n.command=Vs.normalize(n.command),n.command=Xn.command(n.command),n.args=n.args.map(i=>Xn.argument(i,r));let s=[n.command].concat(n.args).join(" ");n.args=["/d","/s","/c",`"${s}"`],n.command=process.env.comspec||"cmd.exe",n.options.windowsVerbatimArguments=!0}return n}function Js(n,e,t){e&&!Array.isArray(e)&&(t=e,e=null),e=e?e.slice(0):[],t=Object.assign({},t);let r={command:n,args:e,options:t,file:void 0,original:{command:n,args:e}};return t.shell?r:qs(r)}Kn.exports=Js});var Jn=A((Po,qn)=>{"use strict";var Et=process.platform==="win32";function Ft(n,e){return Object.assign(new Error(`${e} ${n.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${e} ${n.command}`,path:n.command,spawnargs:n.args})}function _s(n,e){if(!Et)return;let t=n.emit;n.emit=function(r,s){if(r==="exit"){let i=Yn(s,e,"spawn");if(i)return t.call(n,"error",i)}return t.apply(n,arguments)}}function Yn(n,e){return Et&&n===1&&!e.file?Ft(e.original,"spawn"):null}function $s(n,e){return Et&&n===1&&!e.file?Ft(e.original,"spawnSync"):null}qn.exports={hookChildProcess:_s,verifyENOENT:Yn,verifyENOENTSync:$s,notFoundError:Ft}});var er=A((So,ke)=>{"use strict";var _n=x("child_process"),xt=zn(),It=Jn();function $n(n,e,t){let r=xt(n,e,t),s=_n.spawn(r.command,r.args,r.options);return It.hookChildProcess(s,r),s}function ei(n,e,t){let r=xt(n,e,t),s=_n.spawnSync(r.command,r.args,r.options);return s.error=s.error||It.verifyENOENTSync(s.status,r),s}ke.exports=$n;ke.exports.spawn=$n;ke.exports.sync=ei;ke.exports._parse=xt;ke.exports._enoent=It});var hr=A((Ho,qe)=>{qe.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"];process.platform!=="win32"&&qe.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT");process.platform==="linux"&&qe.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")});var gr=A((Wo,Ee)=>{var j=global.process,de=function(n){return n&&typeof n=="object"&&typeof n.removeListener=="function"&&typeof n.emit=="function"&&typeof n.reallyExit=="function"&&typeof n.listeners=="function"&&typeof n.kill=="function"&&typeof n.pid=="number"&&typeof n.on=="function"};de(j)?(dr=x("assert"),ve=hr(),mr=/^win/i.test(j.platform),je=x("events"),typeof je!="function"&&(je=je.EventEmitter),j.__signal_exit_emitter__?H=j.__signal_exit_emitter__:(H=j.__signal_exit_emitter__=new je,H.count=0,H.emitted={}),H.infinite||(H.setMaxListeners(1/0),H.infinite=!0),Ee.exports=function(n,e){if(!de(global.process))return function(){};dr.equal(typeof n,"function","a callback must be provided for exit handler"),Te===!1&&Dt();var t="exit";e&&e.alwaysLast&&(t="afterexit");var r=function(){H.removeListener(t,n),H.listeners("exit").length===0&&H.listeners("afterexit").length===0&&Je()};return H.on(t,n),r},Je=function(){!Te||!de(global.process)||(Te=!1,ve.forEach(function(e){try{j.removeListener(e,_e[e])}catch{}}),j.emit=$e,j.reallyExit=jt,H.count-=1)},Ee.exports.unload=Je,me=function(e,t,r){H.emitted[e]||(H.emitted[e]=!0,H.emit(e,t,r))},_e={},ve.forEach(function(n){_e[n]=function(){if(!!de(global.process)){var t=j.listeners(n);t.length===H.count&&(Je(),me("exit",null,n),me("afterexit",null,n),mr&&n==="SIGHUP"&&(n="SIGINT"),j.kill(j.pid,n))}}}),Ee.exports.signals=function(){return ve},Te=!1,Dt=function(){Te||!de(global.process)||(Te=!0,H.count+=1,ve=ve.filter(function(e){try{return j.on(e,_e[e]),!0}catch{return!1}}),j.emit=yr,j.reallyExit=pr)},Ee.exports.load=Dt,jt=j.reallyExit,pr=function(e){!de(global.process)||(j.exitCode=e||0,me("exit",j.exitCode,null),me("afterexit",j.exitCode,null),jt.call(j,j.exitCode))},$e=j.emit,yr=function(e,t){if(e==="exit"&&de(global.process)){t!==void 0&&(j.exitCode=t);var r=$e.apply(this,arguments);return me("exit",j.exitCode,null),me("afterexit",j.exitCode,null),r}else return $e.apply(this,arguments)}):Ee.exports=function(){return function(){}};var dr,ve,mr,je,H,Je,me,_e,Te,Dt,jt,pr,$e,yr});var Fr=A((Zo,Er)=>{"use strict";var{PassThrough:Ti}=x("stream");Er.exports=n=>{n={...n};let{array:e}=n,{encoding:t}=n,r=t==="buffer",s=!1;e?s=!(t||r):t=t||"utf8",r&&(t=null);let i=new Ti({objectMode:s});t&&i.setEncoding(t);let a=0,o=[];return i.on("data",c=>{o.push(c),s?a=o.length:a+=c.length}),i.getBufferedValue=()=>e?o:r?Buffer.concat(o,a):o.join(""),i.getBufferedLength=()=>a,i}});var xr=A((Vo,Ce)=>{"use strict";var{constants:Ei}=x("buffer"),Fi=x("stream"),{promisify:xi}=x("util"),Ii=Fr(),Ri=xi(Fi.pipeline),et=class extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}};async function At(n,e){if(!n)throw new Error("Expected a stream");e={maxBuffer:1/0,...e};let{maxBuffer:t}=e,r=Ii(e);return await new Promise((s,i)=>{let a=o=>{o&&r.getBufferedLength()<=Ei.MAX_LENGTH&&(o.bufferedData=r.getBufferedValue()),i(o)};(async()=>{try{await Ri(n,r),s()}catch(o){a(o)}})(),r.on("data",()=>{r.getBufferedLength()>t&&a(new et)})}),r.getBufferedValue()}Ce.exports=At;Ce.exports.buffer=(n,e)=>At(n,{...e,encoding:"buffer"});Ce.exports.array=(n,e)=>At(n,{...e,array:!0});Ce.exports.MaxBufferError=et});var Rr=A((Qo,Ir)=>{"use strict";var{PassThrough:Ni}=x("stream");Ir.exports=function(){var n=[],e=new Ni({objectMode:!0});return e.setMaxListeners(0),e.add=t,e.isEmpty=r,e.on("unpipe",s),Array.prototype.slice.call(arguments).forEach(t),e;function t(i){return Array.isArray(i)?(i.forEach(t),this):(n.push(i),i.once("end",s.bind(null,i)),i.once("error",e.emit.bind(e,"error")),i.pipe(e,{end:!1}),this)}function r(){return n.length==0}function s(i){n=n.filter(function(a){return a!==i}),!n.length&&e.readable&&e.end()}}});var Zr=A((cc,Mi)=>{Mi.exports=`# This file can't import anything as we include the contents of this file
# directly in nix eval --apply arguments (see how this file is included in runner/src/common.ts)

with builtins;

let
  nameValuePair = name: value: { inherit name value; };

  filterAttrs = pred: set:
    listToAttrs (concatMap (name: let v = set.\${name}; in if pred name v then [(nameValuePair name v)] else []) (attrNames set));

  ##

  getPackages = manifest:
    mapAttrs (name: pkg:
      filterAttrs (key: b: (builtins.elem key [
        "name"
        "outputHash"
        "outputHashByPlatform"
      ])) pkg
    ) manifest;
in
`});var gs=A($=>{"use strict";Object.defineProperty($,"__esModule",{value:!0});var Hi=x("zlib"),$r=x("path"),Me=x("module"),C=x("url"),Vr=x("util"),Wi=x("assert"),Gi=x("fs"),Bi=x("crypto"),Zi=x("os"),ot=n=>n&&typeof n=="object"&&"default"in n?n:{default:n},es=ot(Hi),rt=ot($r),Vi=ot(Wi),Qi=ot(Gi),ts=(n=>(n.HARD="HARD",n.SOFT="SOFT",n))(ts||{}),Xi=456789e3,Yt={root:"/",dot:".",parent:".."},st={home:"~",nodeModules:"node_modules",manifest:"package.json",lockfile:"yarn.lock",virtual:"__virtual__",pnpJs:".pnp.js",pnpCjs:".pnp.cjs",pnpData:".pnp.data.json",pnpEsmLoader:".pnp.loader.mjs",rc:".yarnrc.yml"},m=Object.create(rt.default),R=Object.create(rt.default.posix);m.cwd=()=>process.cwd();R.cwd=()=>rn(process.cwd());R.resolve=(...n)=>n.length>0&&R.isAbsolute(n[0])?rt.default.posix.resolve(...n):rt.default.posix.resolve(R.cwd(),...n);var ns=function(n,e,t){return e=n.normalize(e),t=n.normalize(t),e===t?".":(e.endsWith(n.sep)||(e=e+n.sep),t.startsWith(e)?t.slice(e.length):null)};m.fromPortablePath=rs;m.toPortablePath=rn;m.contains=(n,e)=>ns(m,n,e);R.contains=(n,e)=>ns(R,n,e);var Ki=/^([a-zA-Z]:.*)$/,zi=/^\/\/(\.\/)?(.*)$/,Yi=/^\/([a-zA-Z]:.*)$/,qi=/^\/unc\/(\.dot\/)?(.*)$/;function rs(n){if(process.platform!=="win32")return n;let e,t;if(e=n.match(Yi))n=e[1];else if(t=n.match(qi))n=`\\\\${t[1]?".\\":""}${t[2]}`;else return n;return n.replace(/\//g,"\\")}function rn(n){if(process.platform!=="win32")return n;n=n.replace(/\\/g,"/");let e,t;return(e=n.match(Ki))?n=`/${e[1]}`:(t=n.match(zi))&&(n=`/unc/${t[1]?".dot/":""}${t[2]}`),n}function ss(n,e){return n===m?rs(e):rn(e)}var ye=new Date(Xi*1e3),Ji=ye.getTime();async function _i(n,e,t,r,s){let i=n.pathUtils.normalize(e),a=t.pathUtils.normalize(r),o=[],c=[],{atime:f,mtime:y}=s.stableTime?{atime:ye,mtime:ye}:await t.lstatPromise(a);await n.mkdirpPromise(n.pathUtils.dirname(e),{utimes:[f,y]}),await qt(o,c,n,i,t,a,{...s,didParentExist:!0});for(let l of o)await l();await Promise.all(c.map(l=>l()))}async function qt(n,e,t,r,s,i,a){var o,c,f;let y=a.didParentExist?await is(t,r):null,l=await s.lstatPromise(i),{atime:S,mtime:k}=a.stableTime?{atime:ye,mtime:ye}:l,w;switch(!0){case l.isDirectory():w=await $i(n,e,t,r,y,s,i,l,a);break;case l.isFile():w=await na(n,e,t,r,y,s,i,l,a);break;case l.isSymbolicLink():w=await ra(n,e,t,r,y,s,i,l,a);break;default:throw new Error(`Unsupported file type (${l.mode})`)}return(((o=a.linkStrategy)==null?void 0:o.type)!=="HardlinkFromIndex"||!l.isFile())&&((w||((c=y==null?void 0:y.mtime)==null?void 0:c.getTime())!==k.getTime()||((f=y==null?void 0:y.atime)==null?void 0:f.getTime())!==S.getTime())&&(e.push(()=>t.lutimesPromise(r,S,k)),w=!0),(y===null||(y.mode&511)!==(l.mode&511))&&(e.push(()=>t.chmodPromise(r,l.mode&511)),w=!0)),w}async function is(n,e){try{return await n.lstatPromise(e)}catch{return null}}async function $i(n,e,t,r,s,i,a,o,c){if(s!==null&&!s.isDirectory())if(c.overwrite)n.push(async()=>t.removePromise(r)),s=null;else return!1;let f=!1;s===null&&(n.push(async()=>{try{await t.mkdirPromise(r,{mode:o.mode})}catch(S){if(S.code!=="EEXIST")throw S}}),f=!0);let y=await i.readdirPromise(a),l=c.didParentExist&&!s?{...c,didParentExist:!1}:c;if(c.stableSort)for(let S of y.sort())await qt(n,e,t,t.pathUtils.join(r,S),i,i.pathUtils.join(a,S),l)&&(f=!0);else(await Promise.all(y.map(async k=>{await qt(n,e,t,t.pathUtils.join(r,k),i,i.pathUtils.join(a,k),l)}))).some(k=>k)&&(f=!0);return f}async function ea(n,e,t,r,s,i,a,o,c,f){let y=await i.checksumFilePromise(a,{algorithm:"sha1"}),l=t.pathUtils.join(f.indexPath,y.slice(0,2),`${y}.dat`),S;(F=>{F[F.Lock=0]="Lock",F[F.Rename=1]="Rename"})(S||(S={}));let k=1,w=await is(t,l);if(s){let F=w&&s.dev===w.dev&&s.ino===w.ino,L=(w==null?void 0:w.mtimeMs)!==Ji;if(F&&L&&f.autoRepair&&(k=0,w=null),!F)if(c.overwrite)n.push(async()=>t.removePromise(r)),s=null;else return!1}let u=!w&&k===1?`${l}.${Math.floor(Math.random()*4294967296).toString(16).padStart(8,"0")}`:null,I=!1;return n.push(async()=>{if(!w&&(k===0&&await t.lockPromise(l,async()=>{let F=await i.readFilePromise(a);await t.writeFilePromise(l,F)}),k===1&&u)){let F=await i.readFilePromise(a);await t.writeFilePromise(u,F);try{await t.linkPromise(u,l)}catch(L){if(L.code==="EEXIST")I=!0,await t.unlinkPromise(u);else throw L}}s||await t.linkPromise(l,r)}),e.push(async()=>{w||await t.lutimesPromise(l,ye,ye),u&&!I&&await t.unlinkPromise(u)}),!1}async function ta(n,e,t,r,s,i,a,o,c){if(s!==null)if(c.overwrite)n.push(async()=>t.removePromise(r)),s=null;else return!1;return n.push(async()=>{let f=await i.readFilePromise(a);await t.writeFilePromise(r,f)}),!0}async function na(n,e,t,r,s,i,a,o,c){var f;return((f=c.linkStrategy)==null?void 0:f.type)==="HardlinkFromIndex"?ea(n,e,t,r,s,i,a,o,c,c.linkStrategy):ta(n,e,t,r,s,i,a,o,c)}async function ra(n,e,t,r,s,i,a,o,c){if(s!==null)if(c.overwrite)n.push(async()=>t.removePromise(r)),s=null;else return!1;return n.push(async()=>{await t.symlinkPromise(ss(t.pathUtils,await i.readlinkPromise(a)),r)}),!0}var it=class{constructor(e){this.pathUtils=e}async*genTraversePromise(e,{stableSort:t=!1}={}){let r=[e];for(;r.length>0;){let s=r.shift();if((await this.lstatPromise(s)).isDirectory()){let a=await this.readdirPromise(s);if(t)for(let o of a.sort())r.push(this.pathUtils.join(s,o));else throw new Error("Not supported")}else yield s}}async checksumFilePromise(e,{algorithm:t="sha512"}={}){let r=await this.openPromise(e,"r");try{let i=Buffer.allocUnsafeSlow(65536),a=Bi.createHash(t),o=0;for(;(o=await this.readPromise(r,i,0,65536))!==0;)a.update(o===65536?i:i.slice(0,o));return a.digest("hex")}finally{await this.closePromise(r)}}async removePromise(e,{recursive:t=!0,maxRetries:r=5}={}){let s;try{s=await this.lstatPromise(e)}catch(i){if(i.code==="ENOENT")return;throw i}if(s.isDirectory()){if(t){let i=await this.readdirPromise(e);await Promise.all(i.map(a=>this.removePromise(this.pathUtils.resolve(e,a))))}for(let i=0;i<=r;i++)try{await this.rmdirPromise(e);break}catch(a){if(a.code!=="EBUSY"&&a.code!=="ENOTEMPTY")throw a;i<r&&await new Promise(o=>setTimeout(o,i*100))}}else await this.unlinkPromise(e)}removeSync(e,{recursive:t=!0}={}){let r;try{r=this.lstatSync(e)}catch(s){if(s.code==="ENOENT")return;throw s}if(r.isDirectory()){if(t)for(let s of this.readdirSync(e))this.removeSync(this.pathUtils.resolve(e,s));this.rmdirSync(e)}else this.unlinkSync(e)}async mkdirpPromise(e,{chmod:t,utimes:r}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let s=e.split(this.pathUtils.sep),i;for(let a=2;a<=s.length;++a){let o=s.slice(0,a).join(this.pathUtils.sep);if(!this.existsSync(o)){try{await this.mkdirPromise(o)}catch(c){if(c.code==="EEXIST")continue;throw c}if(i??(i=o),t!=null&&await this.chmodPromise(o,t),r!=null)await this.utimesPromise(o,r[0],r[1]);else{let c=await this.statPromise(this.pathUtils.dirname(o));await this.utimesPromise(o,c.atime,c.mtime)}}}return i}mkdirpSync(e,{chmod:t,utimes:r}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let s=e.split(this.pathUtils.sep),i;for(let a=2;a<=s.length;++a){let o=s.slice(0,a).join(this.pathUtils.sep);if(!this.existsSync(o)){try{this.mkdirSync(o)}catch(c){if(c.code==="EEXIST")continue;throw c}if(i??(i=o),t!=null&&this.chmodSync(o,t),r!=null)this.utimesSync(o,r[0],r[1]);else{let c=this.statSync(this.pathUtils.dirname(o));this.utimesSync(o,c.atime,c.mtime)}}}return i}async copyPromise(e,t,{baseFs:r=this,overwrite:s=!0,stableSort:i=!1,stableTime:a=!1,linkStrategy:o=null}={}){return await _i(this,e,r,t,{overwrite:s,stableSort:i,stableTime:a,linkStrategy:o})}copySync(e,t,{baseFs:r=this,overwrite:s=!0}={}){let i=r.lstatSync(t),a=this.existsSync(e);if(i.isDirectory()){this.mkdirpSync(e);let c=r.readdirSync(t);for(let f of c)this.copySync(this.pathUtils.join(e,f),r.pathUtils.join(t,f),{baseFs:r,overwrite:s})}else if(i.isFile()){if(!a||s){a&&this.removeSync(e);let c=r.readFileSync(t);this.writeFileSync(e,c)}}else if(i.isSymbolicLink()){if(!a||s){a&&this.removeSync(e);let c=r.readlinkSync(t);this.symlinkSync(ss(this.pathUtils,c),e)}}else throw new Error(`Unsupported file type (file: ${t}, mode: 0o${i.mode.toString(8).padStart(6,"0")})`);let o=i.mode&511;this.chmodSync(e,o)}async changeFilePromise(e,t,r={}){return Buffer.isBuffer(t)?this.changeFileBufferPromise(e,t,r):this.changeFileTextPromise(e,t,r)}async changeFileBufferPromise(e,t,{mode:r}={}){let s=Buffer.alloc(0);try{s=await this.readFilePromise(e)}catch{}Buffer.compare(s,t)!==0&&await this.writeFilePromise(e,t,{mode:r})}async changeFileTextPromise(e,t,{automaticNewlines:r,mode:s}={}){let i="";try{i=await this.readFilePromise(e,"utf8")}catch{}let a=r?Qr(i,t):t;i!==a&&await this.writeFilePromise(e,a,{mode:s})}changeFileSync(e,t,r={}){return Buffer.isBuffer(t)?this.changeFileBufferSync(e,t,r):this.changeFileTextSync(e,t,r)}changeFileBufferSync(e,t,{mode:r}={}){let s=Buffer.alloc(0);try{s=this.readFileSync(e)}catch{}Buffer.compare(s,t)!==0&&this.writeFileSync(e,t,{mode:r})}changeFileTextSync(e,t,{automaticNewlines:r=!1,mode:s}={}){let i="";try{i=this.readFileSync(e,"utf8")}catch{}let a=r?Qr(i,t):t;i!==a&&this.writeFileSync(e,a,{mode:s})}async movePromise(e,t){try{await this.renamePromise(e,t)}catch(r){if(r.code==="EXDEV")await this.copyPromise(t,e),await this.removePromise(e);else throw r}}moveSync(e,t){try{this.renameSync(e,t)}catch(r){if(r.code==="EXDEV")this.copySync(t,e),this.removeSync(e);else throw r}}async lockPromise(e,t){let r=`${e}.flock`,s=1e3/60,i=Date.now(),a=null,o=async()=>{let c;try{[c]=await this.readJsonPromise(r)}catch{return Date.now()-i<500}try{return process.kill(c,0),!0}catch{return!1}};for(;a===null;)try{a=await this.openPromise(r,"wx")}catch(c){if(c.code==="EEXIST"){if(!await o())try{await this.unlinkPromise(r);continue}catch{}if(Date.now()-i<60*1e3)await new Promise(f=>setTimeout(f,s));else throw new Error(`Couldn't acquire a lock in a reasonable time (via ${r})`)}else throw c}await this.writePromise(a,JSON.stringify([process.pid]));try{return await t()}finally{try{await this.closePromise(a),await this.unlinkPromise(r)}catch{}}}async readJsonPromise(e){let t=await this.readFilePromise(e,"utf8");try{return JSON.parse(t)}catch(r){throw r.message+=` (in ${e})`,r}}readJsonSync(e){let t=this.readFileSync(e,"utf8");try{return JSON.parse(t)}catch(r){throw r.message+=` (in ${e})`,r}}async writeJsonPromise(e,t){return await this.writeFilePromise(e,`${JSON.stringify(t,null,2)}
`)}writeJsonSync(e,t){return this.writeFileSync(e,`${JSON.stringify(t,null,2)}
`)}async preserveTimePromise(e,t){let r=await this.lstatPromise(e),s=await t();typeof s<"u"&&(e=s),await this.lutimesPromise(e,r.atime,r.mtime)}async preserveTimeSync(e,t){let r=this.lstatSync(e),s=t();typeof s<"u"&&(e=s),this.lutimesSync(e,r.atime,r.mtime)}},Jt=class extends it{constructor(){super(R)}};function sa(n){let e=n.match(/\r?\n/g);if(e===null)return Zi.EOL;let t=e.filter(s=>s===`\r
`).length,r=e.length-t;return t>r?`\r
`:`
`}function Qr(n,e){return e.replace(/\r?\n/g,sa(n))}var _t=class extends it{getExtractHint(e){return this.baseFs.getExtractHint(e)}resolve(e){return this.mapFromBase(this.baseFs.resolve(this.mapToBase(e)))}getRealPath(){return this.mapFromBase(this.baseFs.getRealPath())}async openPromise(e,t,r){return this.baseFs.openPromise(this.mapToBase(e),t,r)}openSync(e,t,r){return this.baseFs.openSync(this.mapToBase(e),t,r)}async opendirPromise(e,t){return Object.assign(await this.baseFs.opendirPromise(this.mapToBase(e),t),{path:e})}opendirSync(e,t){return Object.assign(this.baseFs.opendirSync(this.mapToBase(e),t),{path:e})}async readPromise(e,t,r,s,i){return await this.baseFs.readPromise(e,t,r,s,i)}readSync(e,t,r,s,i){return this.baseFs.readSync(e,t,r,s,i)}async writePromise(e,t,r,s,i){return typeof t=="string"?await this.baseFs.writePromise(e,t,r):await this.baseFs.writePromise(e,t,r,s,i)}writeSync(e,t,r,s,i){return typeof t=="string"?this.baseFs.writeSync(e,t,r):this.baseFs.writeSync(e,t,r,s,i)}async closePromise(e){return this.baseFs.closePromise(e)}closeSync(e){this.baseFs.closeSync(e)}createReadStream(e,t){return this.baseFs.createReadStream(e!==null?this.mapToBase(e):e,t)}createWriteStream(e,t){return this.baseFs.createWriteStream(e!==null?this.mapToBase(e):e,t)}async realpathPromise(e){return this.mapFromBase(await this.baseFs.realpathPromise(this.mapToBase(e)))}realpathSync(e){return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(e)))}async existsPromise(e){return this.baseFs.existsPromise(this.mapToBase(e))}existsSync(e){return this.baseFs.existsSync(this.mapToBase(e))}accessSync(e,t){return this.baseFs.accessSync(this.mapToBase(e),t)}async accessPromise(e,t){return this.baseFs.accessPromise(this.mapToBase(e),t)}async statPromise(e,t){return this.baseFs.statPromise(this.mapToBase(e),t)}statSync(e,t){return this.baseFs.statSync(this.mapToBase(e),t)}async fstatPromise(e,t){return this.baseFs.fstatPromise(e,t)}fstatSync(e,t){return this.baseFs.fstatSync(e,t)}lstatPromise(e,t){return this.baseFs.lstatPromise(this.mapToBase(e),t)}lstatSync(e,t){return this.baseFs.lstatSync(this.mapToBase(e),t)}async fchmodPromise(e,t){return this.baseFs.fchmodPromise(e,t)}fchmodSync(e,t){return this.baseFs.fchmodSync(e,t)}async chmodPromise(e,t){return this.baseFs.chmodPromise(this.mapToBase(e),t)}chmodSync(e,t){return this.baseFs.chmodSync(this.mapToBase(e),t)}async fchownPromise(e,t,r){return this.baseFs.fchownPromise(e,t,r)}fchownSync(e,t,r){return this.baseFs.fchownSync(e,t,r)}async chownPromise(e,t,r){return this.baseFs.chownPromise(this.mapToBase(e),t,r)}chownSync(e,t,r){return this.baseFs.chownSync(this.mapToBase(e),t,r)}async renamePromise(e,t){return this.baseFs.renamePromise(this.mapToBase(e),this.mapToBase(t))}renameSync(e,t){return this.baseFs.renameSync(this.mapToBase(e),this.mapToBase(t))}async copyFilePromise(e,t,r=0){return this.baseFs.copyFilePromise(this.mapToBase(e),this.mapToBase(t),r)}copyFileSync(e,t,r=0){return this.baseFs.copyFileSync(this.mapToBase(e),this.mapToBase(t),r)}async appendFilePromise(e,t,r){return this.baseFs.appendFilePromise(this.fsMapToBase(e),t,r)}appendFileSync(e,t,r){return this.baseFs.appendFileSync(this.fsMapToBase(e),t,r)}async writeFilePromise(e,t,r){return this.baseFs.writeFilePromise(this.fsMapToBase(e),t,r)}writeFileSync(e,t,r){return this.baseFs.writeFileSync(this.fsMapToBase(e),t,r)}async unlinkPromise(e){return this.baseFs.unlinkPromise(this.mapToBase(e))}unlinkSync(e){return this.baseFs.unlinkSync(this.mapToBase(e))}async utimesPromise(e,t,r){return this.baseFs.utimesPromise(this.mapToBase(e),t,r)}utimesSync(e,t,r){return this.baseFs.utimesSync(this.mapToBase(e),t,r)}async lutimesPromise(e,t,r){return this.baseFs.lutimesPromise(this.mapToBase(e),t,r)}lutimesSync(e,t,r){return this.baseFs.lutimesSync(this.mapToBase(e),t,r)}async mkdirPromise(e,t){return this.baseFs.mkdirPromise(this.mapToBase(e),t)}mkdirSync(e,t){return this.baseFs.mkdirSync(this.mapToBase(e),t)}async rmdirPromise(e,t){return this.baseFs.rmdirPromise(this.mapToBase(e),t)}rmdirSync(e,t){return this.baseFs.rmdirSync(this.mapToBase(e),t)}async linkPromise(e,t){return this.baseFs.linkPromise(this.mapToBase(e),this.mapToBase(t))}linkSync(e,t){return this.baseFs.linkSync(this.mapToBase(e),this.mapToBase(t))}async symlinkPromise(e,t,r){let s=this.mapToBase(t);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkPromise(this.mapToBase(e),s,r);let i=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(t),e)),a=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(s),i);return this.baseFs.symlinkPromise(a,s,r)}symlinkSync(e,t,r){let s=this.mapToBase(t);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkSync(this.mapToBase(e),s,r);let i=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(t),e)),a=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(s),i);return this.baseFs.symlinkSync(a,s,r)}async readFilePromise(e,t){return this.baseFs.readFilePromise(this.fsMapToBase(e),t)}readFileSync(e,t){return this.baseFs.readFileSync(this.fsMapToBase(e),t)}async readdirPromise(e,t){return this.baseFs.readdirPromise(this.mapToBase(e),t)}readdirSync(e,t){return this.baseFs.readdirSync(this.mapToBase(e),t)}async readlinkPromise(e){return this.mapFromBase(await this.baseFs.readlinkPromise(this.mapToBase(e)))}readlinkSync(e){return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(e)))}async truncatePromise(e,t){return this.baseFs.truncatePromise(this.mapToBase(e),t)}truncateSync(e,t){return this.baseFs.truncateSync(this.mapToBase(e),t)}async ftruncatePromise(e,t){return this.baseFs.ftruncatePromise(e,t)}ftruncateSync(e,t){return this.baseFs.ftruncateSync(e,t)}watch(e,t,r){return this.baseFs.watch(this.mapToBase(e),t,r)}watchFile(e,t,r){return this.baseFs.watchFile(this.mapToBase(e),t,r)}unwatchFile(e,t){return this.baseFs.unwatchFile(this.mapToBase(e),t)}fsMapToBase(e){return typeof e=="number"?e:this.mapToBase(e)}},$t=class extends Jt{constructor(e=Qi.default){super(),this.realFs=e}getExtractHint(){return!1}getRealPath(){return Yt.root}resolve(e){return R.resolve(e)}async openPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.open(m.fromPortablePath(e),t,r,this.makeCallback(s,i))})}openSync(e,t,r){return this.realFs.openSync(m.fromPortablePath(e),t,r)}async opendirPromise(e,t){return await new Promise((r,s)=>{typeof t<"u"?this.realFs.opendir(m.fromPortablePath(e),t,this.makeCallback(r,s)):this.realFs.opendir(m.fromPortablePath(e),this.makeCallback(r,s))}).then(r=>Object.defineProperty(r,"path",{value:e,configurable:!0,writable:!0}))}opendirSync(e,t){let r=typeof t<"u"?this.realFs.opendirSync(m.fromPortablePath(e),t):this.realFs.opendirSync(m.fromPortablePath(e));return Object.defineProperty(r,"path",{value:e,configurable:!0,writable:!0})}async readPromise(e,t,r=0,s=0,i=-1){return await new Promise((a,o)=>{this.realFs.read(e,t,r,s,i,(c,f)=>{c?o(c):a(f)})})}readSync(e,t,r,s,i){return this.realFs.readSync(e,t,r,s,i)}async writePromise(e,t,r,s,i){return await new Promise((a,o)=>typeof t=="string"?this.realFs.write(e,t,r,this.makeCallback(a,o)):this.realFs.write(e,t,r,s,i,this.makeCallback(a,o)))}writeSync(e,t,r,s,i){return typeof t=="string"?this.realFs.writeSync(e,t,r):this.realFs.writeSync(e,t,r,s,i)}async closePromise(e){await new Promise((t,r)=>{this.realFs.close(e,this.makeCallback(t,r))})}closeSync(e){this.realFs.closeSync(e)}createReadStream(e,t){let r=e!==null?m.fromPortablePath(e):e;return this.realFs.createReadStream(r,t)}createWriteStream(e,t){let r=e!==null?m.fromPortablePath(e):e;return this.realFs.createWriteStream(r,t)}async realpathPromise(e){return await new Promise((t,r)=>{this.realFs.realpath(m.fromPortablePath(e),{},this.makeCallback(t,r))}).then(t=>m.toPortablePath(t))}realpathSync(e){return m.toPortablePath(this.realFs.realpathSync(m.fromPortablePath(e),{}))}async existsPromise(e){return await new Promise(t=>{this.realFs.exists(m.fromPortablePath(e),t)})}accessSync(e,t){return this.realFs.accessSync(m.fromPortablePath(e),t)}async accessPromise(e,t){return await new Promise((r,s)=>{this.realFs.access(m.fromPortablePath(e),t,this.makeCallback(r,s))})}existsSync(e){return this.realFs.existsSync(m.fromPortablePath(e))}async statPromise(e,t){return await new Promise((r,s)=>{t?this.realFs.stat(m.fromPortablePath(e),t,this.makeCallback(r,s)):this.realFs.stat(m.fromPortablePath(e),this.makeCallback(r,s))})}statSync(e,t){return t?this.realFs.statSync(m.fromPortablePath(e),t):this.realFs.statSync(m.fromPortablePath(e))}async fstatPromise(e,t){return await new Promise((r,s)=>{t?this.realFs.fstat(e,t,this.makeCallback(r,s)):this.realFs.fstat(e,this.makeCallback(r,s))})}fstatSync(e,t){return t?this.realFs.fstatSync(e,t):this.realFs.fstatSync(e)}async lstatPromise(e,t){return await new Promise((r,s)=>{t?this.realFs.lstat(m.fromPortablePath(e),t,this.makeCallback(r,s)):this.realFs.lstat(m.fromPortablePath(e),this.makeCallback(r,s))})}lstatSync(e,t){return t?this.realFs.lstatSync(m.fromPortablePath(e),t):this.realFs.lstatSync(m.fromPortablePath(e))}async fchmodPromise(e,t){return await new Promise((r,s)=>{this.realFs.fchmod(e,t,this.makeCallback(r,s))})}fchmodSync(e,t){return this.realFs.fchmodSync(e,t)}async chmodPromise(e,t){return await new Promise((r,s)=>{this.realFs.chmod(m.fromPortablePath(e),t,this.makeCallback(r,s))})}chmodSync(e,t){return this.realFs.chmodSync(m.fromPortablePath(e),t)}async fchownPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.fchown(e,t,r,this.makeCallback(s,i))})}fchownSync(e,t,r){return this.realFs.fchownSync(e,t,r)}async chownPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.chown(m.fromPortablePath(e),t,r,this.makeCallback(s,i))})}chownSync(e,t,r){return this.realFs.chownSync(m.fromPortablePath(e),t,r)}async renamePromise(e,t){return await new Promise((r,s)=>{this.realFs.rename(m.fromPortablePath(e),m.fromPortablePath(t),this.makeCallback(r,s))})}renameSync(e,t){return this.realFs.renameSync(m.fromPortablePath(e),m.fromPortablePath(t))}async copyFilePromise(e,t,r=0){return await new Promise((s,i)=>{this.realFs.copyFile(m.fromPortablePath(e),m.fromPortablePath(t),r,this.makeCallback(s,i))})}copyFileSync(e,t,r=0){return this.realFs.copyFileSync(m.fromPortablePath(e),m.fromPortablePath(t),r)}async appendFilePromise(e,t,r){return await new Promise((s,i)=>{let a=typeof e=="string"?m.fromPortablePath(e):e;r?this.realFs.appendFile(a,t,r,this.makeCallback(s,i)):this.realFs.appendFile(a,t,this.makeCallback(s,i))})}appendFileSync(e,t,r){let s=typeof e=="string"?m.fromPortablePath(e):e;r?this.realFs.appendFileSync(s,t,r):this.realFs.appendFileSync(s,t)}async writeFilePromise(e,t,r){return await new Promise((s,i)=>{let a=typeof e=="string"?m.fromPortablePath(e):e;r?this.realFs.writeFile(a,t,r,this.makeCallback(s,i)):this.realFs.writeFile(a,t,this.makeCallback(s,i))})}writeFileSync(e,t,r){let s=typeof e=="string"?m.fromPortablePath(e):e;r?this.realFs.writeFileSync(s,t,r):this.realFs.writeFileSync(s,t)}async unlinkPromise(e){return await new Promise((t,r)=>{this.realFs.unlink(m.fromPortablePath(e),this.makeCallback(t,r))})}unlinkSync(e){return this.realFs.unlinkSync(m.fromPortablePath(e))}async utimesPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.utimes(m.fromPortablePath(e),t,r,this.makeCallback(s,i))})}utimesSync(e,t,r){this.realFs.utimesSync(m.fromPortablePath(e),t,r)}async lutimesPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.lutimes(m.fromPortablePath(e),t,r,this.makeCallback(s,i))})}lutimesSync(e,t,r){this.realFs.lutimesSync(m.fromPortablePath(e),t,r)}async mkdirPromise(e,t){return await new Promise((r,s)=>{this.realFs.mkdir(m.fromPortablePath(e),t,this.makeCallback(r,s))})}mkdirSync(e,t){return this.realFs.mkdirSync(m.fromPortablePath(e),t)}async rmdirPromise(e,t){return await new Promise((r,s)=>{t?this.realFs.rmdir(m.fromPortablePath(e),t,this.makeCallback(r,s)):this.realFs.rmdir(m.fromPortablePath(e),this.makeCallback(r,s))})}rmdirSync(e,t){return this.realFs.rmdirSync(m.fromPortablePath(e),t)}async linkPromise(e,t){return await new Promise((r,s)=>{this.realFs.link(m.fromPortablePath(e),m.fromPortablePath(t),this.makeCallback(r,s))})}linkSync(e,t){return this.realFs.linkSync(m.fromPortablePath(e),m.fromPortablePath(t))}async symlinkPromise(e,t,r){return await new Promise((s,i)=>{this.realFs.symlink(m.fromPortablePath(e.replace(/\/+$/,"")),m.fromPortablePath(t),r,this.makeCallback(s,i))})}symlinkSync(e,t,r){return this.realFs.symlinkSync(m.fromPortablePath(e.replace(/\/+$/,"")),m.fromPortablePath(t),r)}async readFilePromise(e,t){return await new Promise((r,s)=>{let i=typeof e=="string"?m.fromPortablePath(e):e;this.realFs.readFile(i,t,this.makeCallback(r,s))})}readFileSync(e,t){let r=typeof e=="string"?m.fromPortablePath(e):e;return this.realFs.readFileSync(r,t)}async readdirPromise(e,t){return await new Promise((r,s)=>{t!=null&&t.withFileTypes?this.realFs.readdir(m.fromPortablePath(e),{withFileTypes:!0},this.makeCallback(r,s)):this.realFs.readdir(m.fromPortablePath(e),this.makeCallback(i=>r(i),s))})}readdirSync(e,t){return t!=null&&t.withFileTypes?this.realFs.readdirSync(m.fromPortablePath(e),{withFileTypes:!0}):this.realFs.readdirSync(m.fromPortablePath(e))}async readlinkPromise(e){return await new Promise((t,r)=>{this.realFs.readlink(m.fromPortablePath(e),this.makeCallback(t,r))}).then(t=>m.toPortablePath(t))}readlinkSync(e){return m.toPortablePath(this.realFs.readlinkSync(m.fromPortablePath(e)))}async truncatePromise(e,t){return await new Promise((r,s)=>{this.realFs.truncate(m.fromPortablePath(e),t,this.makeCallback(r,s))})}truncateSync(e,t){return this.realFs.truncateSync(m.fromPortablePath(e),t)}async ftruncatePromise(e,t){return await new Promise((r,s)=>{this.realFs.ftruncate(e,t,this.makeCallback(r,s))})}ftruncateSync(e,t){return this.realFs.ftruncateSync(e,t)}watch(e,t,r){return this.realFs.watch(m.fromPortablePath(e),t,r)}watchFile(e,t,r){return this.realFs.watchFile(m.fromPortablePath(e),t,r)}unwatchFile(e,t){return this.realFs.unwatchFile(m.fromPortablePath(e),t)}makeCallback(e,t){return(r,s)=>{r?t(r):e(s)}}},ia=/^[0-9]+$/,Zt=/^(\/(?:[^/]+\/)*?(?:\$\$virtual|__virtual__))((?:\/((?:[^/]+-)?[a-f0-9]+)(?:\/([^/]+))?)?((?:\/.*)?))$/,aa=/^([^/]+-)?[a-f0-9]+$/,_=class extends _t{constructor({baseFs:e=new $t}={}){super(R),this.baseFs=e}static makeVirtualPath(e,t,r){if(R.basename(e)!=="__virtual__")throw new Error('Assertion failed: Virtual folders must be named "__virtual__"');if(!R.basename(t).match(aa))throw new Error("Assertion failed: Virtual components must be ended by an hexadecimal hash");let i=R.relative(R.dirname(e),r).split("/"),a=0;for(;a<i.length&&i[a]==="..";)a+=1;let o=i.slice(a);return R.join(e,t,String(a),...o)}static resolveVirtual(e){let t=e.match(Zt);if(!t||!t[3]&&t[5])return e;let r=R.dirname(t[1]);if(!t[3]||!t[4])return r;if(!ia.test(t[4]))return e;let i=Number(t[4]),a="../".repeat(i),o=t[5]||".";return _.resolveVirtual(R.join(r,a,o))}getExtractHint(e){return this.baseFs.getExtractHint(e)}getRealPath(){return this.baseFs.getRealPath()}realpathSync(e){let t=e.match(Zt);if(!t)return this.baseFs.realpathSync(e);if(!t[5])return e;let r=this.baseFs.realpathSync(this.mapToBase(e));return _.makeVirtualPath(t[1],t[3],r)}async realpathPromise(e){let t=e.match(Zt);if(!t)return await this.baseFs.realpathPromise(e);if(!t[5])return e;let r=await this.baseFs.realpathPromise(this.mapToBase(e));return _.makeVirtualPath(t[1],t[3],r)}mapToBase(e){if(e==="")return e;if(this.pathUtils.isAbsolute(e))return _.resolveVirtual(e);let t=_.resolveVirtual(this.baseFs.resolve(Yt.dot)),r=_.resolveVirtual(this.baseFs.resolve(e));return R.relative(t,r)||Yt.dot}mapFromBase(e){return e}},as={DEFAULT:{collapsed:!1,next:{["*"]:"DEFAULT"}},TOP_LEVEL:{collapsed:!1,next:{fallbackExclusionList:"FALLBACK_EXCLUSION_LIST",packageRegistryData:"PACKAGE_REGISTRY_DATA",["*"]:"DEFAULT"}},FALLBACK_EXCLUSION_LIST:{collapsed:!1,next:{["*"]:"FALLBACK_EXCLUSION_ENTRIES"}},FALLBACK_EXCLUSION_ENTRIES:{collapsed:!0,next:{["*"]:"FALLBACK_EXCLUSION_DATA"}},FALLBACK_EXCLUSION_DATA:{collapsed:!0,next:{["*"]:"DEFAULT"}},PACKAGE_REGISTRY_DATA:{collapsed:!1,next:{["*"]:"PACKAGE_REGISTRY_ENTRIES"}},PACKAGE_REGISTRY_ENTRIES:{collapsed:!0,next:{["*"]:"PACKAGE_STORE_DATA"}},PACKAGE_STORE_DATA:{collapsed:!1,next:{["*"]:"PACKAGE_STORE_ENTRIES"}},PACKAGE_STORE_ENTRIES:{collapsed:!0,next:{["*"]:"PACKAGE_INFORMATION_DATA"}},PACKAGE_INFORMATION_DATA:{collapsed:!1,next:{packageDependencies:"PACKAGE_DEPENDENCIES",["*"]:"DEFAULT"}},PACKAGE_DEPENDENCIES:{collapsed:!1,next:{["*"]:"PACKAGE_DEPENDENCY"}},PACKAGE_DEPENDENCY:{collapsed:!0,next:{["*"]:"DEFAULT"}}};function oa(n,e,t){let r="";r+="[";for(let s=0,i=n.length;s<i;++s)r+=ct(String(s),n[s],e,t).replace(/^ +/g,""),s+1<i&&(r+=", ");return r+="]",r}function ca(n,e,t){let r=`${t}  `,s="";s+=t,s+=`[
`;for(let i=0,a=n.length;i<a;++i)s+=r+ct(String(i),n[i],e,r).replace(/^ +/,""),i+1<a&&(s+=","),s+=`
`;return s+=t,s+="]",s}function la(n,e,t){let r=Object.keys(n),s="";s+="{";for(let i=0,a=r.length,o=0;i<a;++i){let c=r[i],f=n[c];typeof f>"u"||(o!==0&&(s+=", "),s+=JSON.stringify(c),s+=": ",s+=ct(c,f,e,t).replace(/^ +/g,""),o+=1)}return s+="}",s}function ua(n,e,t){let r=Object.keys(n),s=`${t}  `,i="";i+=t,i+=`{
`;let a=0;for(let o=0,c=r.length;o<c;++o){let f=r[o],y=n[f];typeof y>"u"||(a!==0&&(i+=",",i+=`
`),i+=s,i+=JSON.stringify(f),i+=": ",i+=ct(f,y,e,s).replace(/^ +/g,""),a+=1)}return a!==0&&(i+=`
`),i+=t,i+="}",i}function ct(n,e,t,r){let{next:s}=as[t],i=s[n]||s["*"];return os(e,i,r)}function os(n,e,t){let{collapsed:r}=as[e];return Array.isArray(n)?r?oa(n,e,t):ca(n,e,t):typeof n=="object"&&n!==null?r?la(n,e,t):ua(n,e,t):JSON.stringify(n)}function cs(n){return os(n,"TOP_LEVEL","")}function We(n,e){let t=Array.from(n);Array.isArray(e)||(e=[e]);let r=[];for(let i of e)r.push(t.map(a=>i(a)));let s=t.map((i,a)=>a);return s.sort((i,a)=>{for(let o of r){let c=o[i]<o[a]?-1:o[i]>o[a]?1:0;if(c!==0)return c}return 0}),s.map(i=>t[i])}function fa(n){let e=new Map,t=We(n.fallbackExclusionList||[],[({name:r,reference:s})=>r,({name:r,reference:s})=>s]);for(let{name:r,reference:s}of t){let i=e.get(r);typeof i>"u"&&e.set(r,i=new Set),i.add(s)}return Array.from(e).map(([r,s])=>[r,Array.from(s)])}function ha(n){return We(n.fallbackPool||[],([e])=>e)}function da(n){let e=[];for(let[t,r]of We(n.packageRegistry,([s])=>s===null?"0":`1${s}`)){let s=[];e.push([t,s]);for(let[i,{packageLocation:a,packageDependencies:o,packagePeers:c,linkType:f,discardFromLookup:y}]of We(r,([l])=>l===null?"0":`1${l}`)){let l=[];t!==null&&i!==null&&!o.has(t)&&l.push([t,i]);for(let[w,u]of We(o.entries(),([I])=>I))l.push([w,u]);let S=c&&c.size>0?Array.from(c):void 0,k=y||void 0;s.push([i,{packageLocation:a,packageDependencies:l,packagePeers:S,linkType:f,discardFromLookup:k}])}}return e}function sn(n){return{__info:["This file is automatically generated. Do not touch it, or risk","your modifications being lost."],dependencyTreeRoots:n.dependencyTreeRoots,enableTopLevelFallback:n.enableTopLevelFallback||!1,ignorePatternData:n.ignorePattern||null,fallbackExclusionList:fa(n),fallbackPool:ha(n),packageRegistryData:da(n)}}var Vt,ma=()=>(typeof Vt>"u"&&(Vt=es.default.brotliDecompressSync(Buffer.from("","base64")).toString()),Vt);function an(n,e){return[n?`${n}
`:"",`/* eslint-disable */
`,`"use strict";
`,`
`,e,`
`,ma()].join("")}function pa(n){return JSON.stringify(n,null,2)}function ya(n){return`'${n.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/\n/g,`\\
`)}'`}function ga(n){return[`const RAW_RUNTIME_STATE =
`,`${ya(cs(n))};

`,`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(JSON.parse(RAW_RUNTIME_STATE), {basePath: basePath || __dirname});
`,`}
`].join("")}function Pa(){return[`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(require(${JSON.stringify(`./${st.pnpData}`)}), {basePath: basePath || __dirname});
`,`}
`].join("")}function Sa(n){let e=sn(n),t=ga(e);return an(n.shebang,t)}function wa(n){let e=sn(n),t=Pa(),r=an(n.shebang,t);return{dataFile:pa(e),loaderFile:r}}function ls(n,{basePath:e}){let t=m.toPortablePath(e),r=R.resolve(t),s=n.ignorePatternData!==null?new RegExp(n.ignorePatternData):null,i=new Map,a=new Map(n.packageRegistryData.map(([l,S])=>[l,new Map(S.map(([k,w])=>{if(l===null!=(k===null))throw new Error("Assertion failed: The name and reference should be null, or neither should");let u=w.discardFromLookup??!1,I={name:l,reference:k},F=i.get(w.packageLocation);F?(F.discardFromLookup=F.discardFromLookup&&u,u||(F.locator=I)):i.set(w.packageLocation,{locator:I,discardFromLookup:u});let L=null;return[k,{packageDependencies:new Map(w.packageDependencies),packagePeers:new Set(w.packagePeers),linkType:w.linkType,discardFromLookup:u,get packageLocation(){return L||(L=R.join(r,w.packageLocation))}}]}))])),o=new Map(n.fallbackExclusionList.map(([l,S])=>[l,new Set(S)])),c=new Map(n.fallbackPool),f=n.dependencyTreeRoots,y=n.enableTopLevelFallback;return{basePath:t,dependencyTreeRoots:f,enableTopLevelFallback:y,fallbackExclusionList:o,fallbackPool:c,ignorePattern:s,packageLocatorsByLocations:i,packageRegistry:a}}var us=Array.isArray,en=JSON.stringify,lt=Object.getOwnPropertyNames,ut=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),Xr=(n,e)=>RegExp.prototype.exec.call(n,e),Kr=(n,...e)=>RegExp.prototype[Symbol.replace].apply(n,e),Fe=(n,...e)=>String.prototype.endsWith.apply(n,e),fs=(n,...e)=>String.prototype.includes.apply(n,e),hs=(n,...e)=>String.prototype.lastIndexOf.apply(n,e),at=(n,...e)=>String.prototype.indexOf.apply(n,e),ka=(n,...e)=>String.prototype.replace.apply(n,e),pe=(n,...e)=>String.prototype.slice.apply(n,e),fe=(n,...e)=>String.prototype.startsWith.apply(n,e),ba=Map,va=JSON.parse;function Be(n,e,t){return class extends t{constructor(...r){super(e(...r)),this.code=n,this.name=`${t.name} [${n}]`}}}var Ta=Be("ERR_PACKAGE_IMPORT_NOT_DEFINED",(n,e,t)=>`Package import specifier "${n}" is not defined${e?` in package ${e}package.json`:""} imported from ${t}`,TypeError),ds=Be("ERR_INVALID_MODULE_SPECIFIER",(n,e,t=void 0)=>`Invalid module "${n}" ${e}${t?` imported from ${t}`:""}`,TypeError),Ea=Be("ERR_INVALID_PACKAGE_TARGET",(n,e,t,r=!1,s=void 0)=>{let i=typeof t=="string"&&!r&&t.length&&!fe(t,"./");return e==="."?(Vi.default(r===!1),`Invalid "exports" main target ${en(t)} defined in the package config ${n}package.json${s?` imported from ${s}`:""}${i?'; targets must start with "./"':""}`):`Invalid "${r?"imports":"exports"}" target ${en(t)} defined for '${e}' in the package config ${n}package.json${s?` imported from ${s}`:""}${i?'; targets must start with "./"':""}`},Error),on=Be("ERR_INVALID_PACKAGE_CONFIG",(n,e,t)=>`Invalid package config ${n}${e?` while importing ${e}`:""}${t?`. ${t}`:""}`,Error),Fa=Be("ERR_PACKAGE_PATH_NOT_EXPORTED",(n,e,t=void 0)=>e==="."?`No "exports" main defined in ${n}package.json${t?` imported from ${t}`:""}`:`Package subpath '${e}' is not defined by "exports" in ${n}package.json${t?` imported from ${t}`:""}`,Error);function xa(n,e){let t=Object.create(null);for(let r=0;r<e.length;r++){let s=e[r];ut(n,s)&&(t[s]=n[s])}return t}var nt=new ba;function Ia(n,e,t,r){let s=nt.get(n);if(s!==void 0)return s;let i=r(n);if(i===void 0){let k={pjsonPath:n,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return nt.set(n,k),k}let a;try{a=va(i)}catch(k){throw new on(n,(t?`"${e}" from `:"")+C.fileURLToPath(t||e),k.message)}let{imports:o,main:c,name:f,type:y}=xa(a,["imports","main","name","type"]),l=ut(a,"exports")?a.exports:void 0;(typeof o!="object"||o===null)&&(o=void 0),typeof c!="string"&&(c=void 0),typeof f!="string"&&(f=void 0),y!=="module"&&y!=="commonjs"&&(y="none");let S={pjsonPath:n,exists:!0,main:c,name:f,type:y,exports:l,imports:o};return nt.set(n,S),S}function Ra(n,e){let t=new URL("./package.json",n);for(;;){let i=t.pathname;if(Fe(i,"node_modules/package.json"))break;let a=Ia(C.fileURLToPath(t),n,void 0,e);if(a.exists)return a;let o=t;if(t=new URL("../package.json",t),t.pathname===o.pathname)break}let r=C.fileURLToPath(t),s={pjsonPath:r,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return nt.set(r,s),s}function Na(n,e,t){throw new Ta(n,e&&C.fileURLToPath(new URL(".",e)),C.fileURLToPath(t))}function Oa(n,e,t,r){let s=`request is not a valid subpath for the "${t?"imports":"exports"}" resolution of ${C.fileURLToPath(e)}`;throw new ds(n,s,r&&C.fileURLToPath(r))}function He(n,e,t,r,s){throw typeof e=="object"&&e!==null?e=en(e,null,""):e=`${e}`,new Ea(C.fileURLToPath(new URL(".",t)),n,e,r,s&&C.fileURLToPath(s))}var zr=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,Yr=/\*/g;function La(n,e,t,r,s,i,a,o){if(e!==""&&!i&&n[n.length-1]!=="/"&&He(t,n,r,a,s),!fe(n,"./")){if(a&&!fe(n,"../")&&!fe(n,"/")){let l=!1;try{new URL(n),l=!0}catch{}if(!l)return i?Kr(Yr,n,()=>e):n+e}He(t,n,r,a,s)}Xr(zr,pe(n,2))!==null&&He(t,n,r,a,s);let c=new URL(n,r),f=c.pathname,y=new URL(".",r).pathname;if(fe(f,y)||He(t,n,r,a,s),e==="")return c;if(Xr(zr,e)!==null){let l=i?ka(t,"*",()=>e):t+e;Oa(l,r,a,s)}return i?new URL(Kr(Yr,c.href,()=>e)):new URL(e,c)}function Da(n){let e=+n;return`${e}`!==n?!1:e>=0&&e<4294967295}function xe(n,e,t,r,s,i,a,o){if(typeof e=="string")return La(e,t,r,n,s,i,a);if(us(e)){if(e.length===0)return null;let c;for(let f=0;f<e.length;f++){let y=e[f],l;try{l=xe(n,y,t,r,s,i,a,o)}catch(S){if(c=S,S.code==="ERR_INVALID_PACKAGE_TARGET")continue;throw S}if(l!==void 0){if(l===null){c=null;continue}return l}}if(c==null)return c;throw c}else if(typeof e=="object"&&e!==null){let c=lt(e);for(let f=0;f<c.length;f++){let y=c[f];if(Da(y))throw new on(C.fileURLToPath(n),s,'"exports" cannot contain numeric property keys.')}for(let f=0;f<c.length;f++){let y=c[f];if(y==="default"||o.has(y)){let l=e[y],S=xe(n,l,t,r,s,i,a,o);if(S===void 0)continue;return S}}return}else if(e===null)return null;He(r,e,n,a,s)}function ms(n,e){let t=at(n,"*"),r=at(e,"*"),s=t===-1?n.length:t+1,i=r===-1?e.length:r+1;return s>i?-1:i>s||t===-1?1:r===-1||n.length>e.length?-1:e.length>n.length?1:0}function ja(n,e,t){if(typeof n=="string"||us(n))return!0;if(typeof n!="object"||n===null)return!1;let r=lt(n),s=!1,i=0;for(let a=0;a<r.length;a++){let o=r[a],c=o===""||o[0]!==".";if(i++===0)s=c;else if(s!==c)throw new on(C.fileURLToPath(e),t,`"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`)}return s}function Qt(n,e,t){throw new Fa(C.fileURLToPath(new URL(".",e)),n,t&&C.fileURLToPath(t))}var qr=new Set;function Ca(n,e,t){let r=C.fileURLToPath(e);qr.has(r+"|"+n)||(qr.add(r+"|"+n),process.emitWarning(`Use of deprecated trailing slash pattern mapping "${n}" in the "exports" field module resolution of the package at ${r}${t?` imported from ${C.fileURLToPath(t)}`:""}. Mapping specifiers ending in "/" is no longer supported.`,"DeprecationWarning","DEP0155"))}function Aa({packageJSONUrl:n,packageSubpath:e,exports:t,base:r,conditions:s}){if(ja(t,n,r)&&(t={".":t}),ut(t,e)&&!fs(e,"*")&&!Fe(e,"/")){let c=t[e],f=xe(n,c,"",e,r,!1,!1,s);return f==null&&Qt(e,n,r),f}let i="",a,o=lt(t);for(let c=0;c<o.length;c++){let f=o[c],y=at(f,"*");if(y!==-1&&fe(e,pe(f,0,y))){Fe(e,"/")&&Ca(e,n,r);let l=pe(f,y+1);e.length>=f.length&&Fe(e,l)&&ms(i,f)===1&&hs(f,"*")===y&&(i=f,a=pe(e,y,e.length-l.length))}}if(i){let c=t[i],f=xe(n,c,a,i,r,!0,!1,s);return f==null&&Qt(e,n,r),f}Qt(e,n,r)}function Ua({name:n,base:e,conditions:t,readFileSyncFn:r}){if(n==="#"||fe(n,"#/")||Fe(n,"/")){let a="is not a valid internal imports specifier name";throw new ds(n,a,C.fileURLToPath(e))}let s,i=Ra(e,r);if(i.exists){s=C.pathToFileURL(i.pjsonPath);let a=i.imports;if(a)if(ut(a,n)&&!fs(n,"*")){let o=xe(s,a[n],"",n,e,!1,!0,t);if(o!=null)return o}else{let o="",c,f=lt(a);for(let y=0;y<f.length;y++){let l=f[y],S=at(l,"*");if(S!==-1&&fe(n,pe(l,0,S))){let k=pe(l,S+1);n.length>=l.length&&Fe(n,k)&&ms(o,l)===1&&hs(l,"*")===S&&(o=l,c=pe(n,S,n.length-k.length))}}if(o){let y=a[o],l=xe(s,y,c,o,e,!0,!0,t);if(l!=null)return l}}}Na(n,s,e)}var U=(n=>(n.API_ERROR="API_ERROR",n.BUILTIN_NODE_RESOLUTION_FAILED="BUILTIN_NODE_RESOLUTION_FAILED",n.EXPORTS_RESOLUTION_FAILED="EXPORTS_RESOLUTION_FAILED",n.MISSING_DEPENDENCY="MISSING_DEPENDENCY",n.MISSING_PEER_DEPENDENCY="MISSING_PEER_DEPENDENCY",n.QUALIFIED_PATH_RESOLUTION_FAILED="QUALIFIED_PATH_RESOLUTION_FAILED",n.INTERNAL="INTERNAL",n.UNDECLARED_DEPENDENCY="UNDECLARED_DEPENDENCY",n.UNSUPPORTED="UNSUPPORTED",n))(U||{}),Ma=new Set(["BUILTIN_NODE_RESOLUTION_FAILED","MISSING_DEPENDENCY","MISSING_PEER_DEPENDENCY","QUALIFIED_PATH_RESOLUTION_FAILED","UNDECLARED_DEPENDENCY"]);function M(n,e,t={},r){r??(r=Ma.has(n)?"MODULE_NOT_FOUND":n);let s={configurable:!0,writable:!0,enumerable:!1};return Object.defineProperties(new Error(e),{code:{...s,value:r},pnpCode:{...s,value:n},data:{...s,value:t}})}function ne(n){return m.normalize(m.fromPortablePath(n))}var tn=Symbol("arg flag"),X=class extends Error{constructor(e,t){super(e),this.name="ArgError",this.code=t,Object.setPrototypeOf(this,X.prototype)}};function Ge(n,{argv:e=process.argv.slice(2),permissive:t=!1,stopAtPositional:r=!1}={}){if(!n)throw new X("argument specification object is required","ARG_CONFIG_NO_SPEC");let s={_:[]},i={},a={};for(let o of Object.keys(n)){if(!o)throw new X("argument key cannot be an empty string","ARG_CONFIG_EMPTY_KEY");if(o[0]!=="-")throw new X(`argument key must start with '-' but found: '${o}'`,"ARG_CONFIG_NONOPT_KEY");if(o.length===1)throw new X(`argument key must have a name; singular '-' keys are not allowed: ${o}`,"ARG_CONFIG_NONAME_KEY");if(typeof n[o]=="string"){i[o]=n[o];continue}let c=n[o],f=!1;if(Array.isArray(c)&&c.length===1&&typeof c[0]=="function"){let[y]=c;c=(l,S,k=[])=>(k.push(y(l,S,k[k.length-1])),k),f=y===Boolean||y[tn]===!0}else if(typeof c=="function")f=c===Boolean||c[tn]===!0;else throw new X(`type missing or not a function or valid array type: ${o}`,"ARG_CONFIG_VAD_TYPE");if(o[1]!=="-"&&o.length>2)throw new X(`short argument keys (with a single hyphen) must have only one character: ${o}`,"ARG_CONFIG_SHORTOPT_TOOLONG");a[o]=[c,f]}for(let o=0,c=e.length;o<c;o++){let f=e[o];if(r&&s._.length>0){s._=s._.concat(e.slice(o));break}if(f==="--"){s._=s._.concat(e.slice(o+1));break}if(f.length>1&&f[0]==="-"){let y=f[1]==="-"||f.length===2?[f]:f.slice(1).split("").map(l=>`-${l}`);for(let l=0;l<y.length;l++){let S=y[l],[k,w]=S[1]==="-"?S.split(/=(.*)/,2):[S,void 0],u=k;for(;u in i;)u=i[u];if(!(u in a))if(t){s._.push(S);continue}else throw new X(`unknown or unexpected option: ${k}`,"ARG_UNKNOWN_OPTION");let[I,F]=a[u];if(!F&&l+1<y.length)throw new X(`option requires argument (but was followed by another short argument): ${k}`,"ARG_MISSING_REQUIRED_SHORTARG");if(F)s[u]=I(!0,u,s[u]);else if(w===void 0){if(e.length<o+2||e[o+1].length>1&&e[o+1][0]==="-"&&!(e[o+1].match(/^-?\d*(\.(?=\d))?\d*$/)&&(I===Number||typeof BigInt<"u"&&I===BigInt))){let L=k===u?"":` (alias for ${u})`;throw new X(`option requires argument: ${k}${L}`,"ARG_MISSING_REQUIRED_LONGARG")}s[u]=I(e[o+1],u,s[u]),++o}else s[u]=I(w,u,s[u])}}else s._.push(f)}return s}Ge.flag=n=>(n[tn]=!0,n);Ge.COUNT=Ge.flag((n,e,t)=>(t||0)+1);Ge.ArgError=X;var Ha=Ge;function Wa(n){return Ga(),nn[n]}var nn;function Ga(){nn||(nn={"--conditions":[],...Jr(Ba()),...Jr(process.execArgv)})}function Jr(n){return Ha({"--conditions":[String],"-C":"--conditions"},{argv:n,permissive:!0})}function Ba(){let n=[],e=Za(process.env.NODE_OPTIONS||"",n);return n.length,e}function Za(n,e){let t=[],r=!1,s=!0;for(let i=0;i<n.length;++i){let a=n[i];if(a==="\\"&&r){if(i+1===n.length)return e.push(`invalid value for NODE_OPTIONS (invalid escape)
`),t;a=n[++i]}else if(a===" "&&!r){s=!0;continue}else if(a==='"'){r=!r;continue}s?(t.push(a),s=!1):t[t.length-1]+=a}return r&&e.push(`invalid value for NODE_OPTIONS (unterminated string)
`),t}var[Xt,_r]=process.versions.node.split(".").map(n=>parseInt(n,10)),Va=Xt>19||Xt===19&&_r>=2||Xt===18&&_r>=13,Qa=new Set(Me.Module.builtinModules||Object.keys(process.binding("natives"))),Kt=n=>n.startsWith("node:")||Qa.has(n);function Xa(n){if(process.env.WATCH_REPORT_DEPENDENCIES&&process.send)if(n=n.map(e=>m.fromPortablePath(_.resolveVirtual(m.toPortablePath(e)))),Va)process.send({"watch:require":n});else for(let e of n)process.send({"watch:require":e})}function ps(n,e){let t=Number(process.env.PNP_ALWAYS_WARN_ON_FALLBACK)>0,r=Number(process.env.PNP_DEBUG_LEVEL),s=/^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:node:)?(?:@[^/]+\/)?[^/]+)\/*(.*|)$/,i=/^(\/|\.{1,2}(\/|$))/,a=/\/$/,o=/^\.{0,2}\//,c={name:null,reference:null},f=[],y=new Set;if(n.enableTopLevelFallback===!0&&f.push(c),e.compatibilityMode!==!1)for(let p of["react-scripts","gatsby"]){let d=n.packageRegistry.get(p);if(d)for(let P of d.keys()){if(P===null)throw new Error("Assertion failed: This reference shouldn't be null");f.push({name:p,reference:P})}}let{ignorePattern:l,packageRegistry:S,packageLocatorsByLocations:k}=n;function w(p,d){return{fn:p,args:d,error:null,result:null}}function u(p){var d,P,h,g;let E=((P=(d=process.stderr)==null?void 0:d.hasColors)==null?void 0:P.call(d))??process.stdout.isTTY,T=(N,he)=>`\x1B[${N}m${he}\x1B[0m`,b=p.error;console.error(b?T("31;1",`\u2716 ${(h=p.error)==null?void 0:h.message.replace(/\n.*/s,"")}`):T("33;1","\u203C Resolution")),p.args.length>0&&console.error();for(let N of p.args)console.error(`  ${T("37;1","In \u2190")} ${Vr.inspect(N,{colors:E,compact:!0})}`);p.result&&(console.error(),console.error(`  ${T("37;1","Out \u2192")} ${Vr.inspect(p.result,{colors:E,compact:!0})}`));let D=((g=new Error().stack.match(/(?<=^ +)at.*/gm))==null?void 0:g.slice(2))??[];if(D.length>0){console.error();for(let N of D)console.error(`  ${T("38;5;244",N)}`)}console.error()}function I(p,d){if(e.allowDebug===!1)return d;if(Number.isFinite(r)){if(r>=2)return(...P)=>{let h=w(p,P);try{return h.result=d(...P)}catch(g){throw h.error=g}finally{u(h)}};if(r>=1)return(...P)=>{try{return d(...P)}catch(h){let g=w(p,P);throw g.error=h,u(g),h}}}return d}function F(p){let d=te(p);if(!d)throw M(U.INTERNAL,"Couldn't find a matching entry in the dependency tree for the specified parent (this is probably an internal error)");return d}function L(p){if(p.name===null)return!0;for(let d of n.dependencyTreeRoots)if(d.name===p.name&&d.reference===p.reference)return!0;return!1}let Q=new Set(["node","require",...Wa("--conditions")]);function O(p,d=Q,P){let h=K(R.join(p,"internal.js"),{resolveIgnored:!0,includeDiscardFromLookup:!0});if(h===null)throw M(U.INTERNAL,`The locator that owns the "${p}" path can't be found inside the dependency tree (this is probably an internal error)`);let{packageLocation:g}=F(h),E=R.join(g,st.manifest);if(!e.fakeFs.existsSync(E))return null;let T=JSON.parse(e.fakeFs.readFileSync(E,"utf8"));if(T.exports==null)return null;let b=R.contains(g,p);if(b===null)throw M(U.INTERNAL,"unqualifiedPath doesn't contain the packageLocation (this is probably an internal error)");b!=="."&&!o.test(b)&&(b=`./${b}`);try{let D=Aa({packageJSONUrl:C.pathToFileURL(m.fromPortablePath(E)),packageSubpath:b,exports:T.exports,base:P?C.pathToFileURL(m.fromPortablePath(P)):null,conditions:d});return m.toPortablePath(C.fileURLToPath(D))}catch(D){throw M(U.EXPORTS_RESOLUTION_FAILED,D.message,{unqualifiedPath:ne(p),locator:h,pkgJson:T,subpath:ne(b),conditions:d},D.code)}}function ee(p,d,{extensions:P}){let h;try{d.push(p),h=e.fakeFs.statSync(p)}catch{}if(h&&!h.isDirectory())return e.fakeFs.realpathSync(p);if(h&&h.isDirectory()){let g;try{g=JSON.parse(e.fakeFs.readFileSync(R.join(p,st.manifest),"utf8"))}catch{}let E;if(g&&g.main&&(E=R.resolve(p,g.main)),E&&E!==p){let T=ee(E,d,{extensions:P});if(T!==null)return T}}for(let g=0,E=P.length;g<E;g++){let T=`${p}${P[g]}`;if(d.push(T),e.fakeFs.existsSync(T))return T}if(h&&h.isDirectory())for(let g=0,E=P.length;g<E;g++){let T=R.format({dir:p,name:"index",ext:P[g]});if(d.push(T),e.fakeFs.existsSync(T))return T}return null}function B(p){let d=new Me.Module(p,null);return d.filename=p,d.paths=Me.Module._nodeModulePaths(p),d}function ie(p,d){return d.endsWith("/")&&(d=R.join(d,"internal.js")),Me.Module._resolveFilename(m.fromPortablePath(p),B(m.fromPortablePath(d)),!1,{plugnplay:!1})}function q(p){if(l===null)return!1;let d=R.contains(n.basePath,p);return d===null?!1:!!l.test(d.replace(/\/$/,""))}let Pe={std:3,resolveVirtual:1,getAllLocators:1},Ie=c;function te({name:p,reference:d}){let P=S.get(p);if(!P)return null;let h=P.get(d);return h||null}function ce({name:p,reference:d}){let P=[];for(let[h,g]of S)if(h!==null)for(let[E,T]of g)E===null||T.packageDependencies.get(p)!==d||h===p&&E===d||P.push({name:h,reference:E});return P}function ae(p,d){let P=new Map,h=new Set,g=T=>{let b=JSON.stringify(T.name);if(h.has(b))return;h.add(b);let D=ce(T);for(let N of D)if(F(N).packagePeers.has(p))g(N);else{let Z=P.get(N.name);typeof Z>"u"&&P.set(N.name,Z=new Set),Z.add(N.reference)}};g(d);let E=[];for(let T of[...P.keys()].sort())for(let b of[...P.get(T)].sort())E.push({name:T,reference:b});return E}function K(p,{resolveIgnored:d=!1,includeDiscardFromLookup:P=!1}={}){if(q(p)&&!d)return null;let h=R.relative(n.basePath,p);h.match(i)||(h=`./${h}`),h.endsWith("/")||(h=`${h}/`);do{let g=k.get(h);if(typeof g>"u"||g.discardFromLookup&&!P){h=h.substring(0,h.lastIndexOf("/",h.length-2)+1);continue}return g.locator}while(h!=="");return null}function gt(p){try{return e.fakeFs.readFileSync(m.toPortablePath(p),"utf8")}catch(d){if(d.code==="ENOENT")return;throw d}}function Ze(p,d,{considerBuiltins:P=!0}={}){if(p.startsWith("#"))throw new Error("resolveToUnqualified can not handle private import mappings");if(p==="pnpapi")return m.toPortablePath(e.pnpapiResolution);if(P&&Kt(p))return null;let h=ne(p),g=d&&ne(d);if(d&&q(d)&&(!R.isAbsolute(p)||K(p)===null)){let b=ie(p,d);if(b===!1)throw M(U.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer was explicitely ignored by the regexp)

Require request: "${h}"
Required by: ${g}
`,{request:h,issuer:g});return m.toPortablePath(b)}let E,T=p.match(s);if(T){if(!d)throw M(U.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:h,issuer:g});let[,b,D]=T,N=K(d);if(!N){let V=ie(p,d);if(V===!1)throw M(U.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer doesn't seem to be part of the Yarn-managed dependency tree).

Require path: "${h}"
Required by: ${g}
`,{request:h,issuer:g});return m.toPortablePath(V)}let Z=F(N).packageDependencies.get(b),Ne=null;if(Z==null&&N.name!==null){let V=n.fallbackExclusionList.get(N.name);if(!V||!V.has(N.reference)){for(let Se=0,ks=f.length;Se<ks;++Se){let St=F(f[Se]).packageDependencies.get(b);if(St!=null){t?Ne=St:Z=St;break}}if(n.enableTopLevelFallback&&Z==null&&Ne===null){let Se=n.fallbackPool.get(b);Se!=null&&(Ne=Se)}}}let z=null;if(Z===null)if(L(N))z=M(U.MISSING_PEER_DEPENDENCY,`Your application tried to access ${b} (a peer dependency); this isn't allowed as there is no ancestor to satisfy the requirement. Use a devDependency if needed.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${g}
`,{request:h,issuer:g,dependencyName:b});else{let V=ae(b,N);V.every(ue=>L(ue))?z=M(U.MISSING_PEER_DEPENDENCY,`${N.name} tried to access ${b} (a peer dependency) but it isn't provided by your application; this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${N.name}@${N.reference} (via ${g})
${V.map(ue=>`Ancestor breaking the chain: ${ue.name}@${ue.reference}
`).join("")}
`,{request:h,issuer:g,issuerLocator:Object.assign({},N),dependencyName:b,brokenAncestors:V}):z=M(U.MISSING_PEER_DEPENDENCY,`${N.name} tried to access ${b} (a peer dependency) but it isn't provided by its ancestors; this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${N.name}@${N.reference} (via ${g})

${V.map(ue=>`Ancestor breaking the chain: ${ue.name}@${ue.reference}
`).join("")}
`,{request:h,issuer:g,issuerLocator:Object.assign({},N),dependencyName:b,brokenAncestors:V})}else Z===void 0&&(!P&&Kt(p)?L(N)?z=M(U.UNDECLARED_DEPENDENCY,`Your application tried to access ${b}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${b} isn't otherwise declared in your dependencies, this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${g}
`,{request:h,issuer:g,dependencyName:b}):z=M(U.UNDECLARED_DEPENDENCY,`${N.name} tried to access ${b}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${b} isn't otherwise declared in ${N.name}'s dependencies, this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${g}
`,{request:h,issuer:g,issuerLocator:Object.assign({},N),dependencyName:b}):L(N)?z=M(U.UNDECLARED_DEPENDENCY,`Your application tried to access ${b}, but it isn't declared in your dependencies; this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${g}
`,{request:h,issuer:g,dependencyName:b}):z=M(U.UNDECLARED_DEPENDENCY,`${N.name} tried to access ${b}, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${N.name}@${N.reference} (via ${g})
`,{request:h,issuer:g,issuerLocator:Object.assign({},N),dependencyName:b}));if(Z==null){if(Ne===null||z===null)throw z||new Error("Assertion failed: Expected an error to have been set");Z=Ne;let V=z.message.replace(/\n.*/g,"");z.message=V,!y.has(V)&&r!==0&&(y.add(V),process.emitWarning(z))}let Oe=Array.isArray(Z)?{name:Z[0],reference:Z[1]}:{name:b,reference:Z},un=F(Oe);if(!un.packageLocation)throw M(U.MISSING_DEPENDENCY,`A dependency seems valid but didn't get installed for some reason. This might be caused by a partial install, such as dev vs prod.

Required package: ${Oe.name}@${Oe.reference}${Oe.name!==h?` (via "${h}")`:""}
Required by: ${N.name}@${N.reference} (via ${g})
`,{request:h,issuer:g,dependencyLocator:Object.assign({},Oe)});let fn=un.packageLocation;D?E=R.join(fn,D):E=fn}else if(R.isAbsolute(p))E=R.normalize(p);else{if(!d)throw M(U.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:h,issuer:g});let b=R.resolve(d);d.match(a)?E=R.normalize(R.join(b,p)):E=R.normalize(R.join(R.dirname(b),p))}return R.normalize(E)}function Ve(p,d,P=Q,h){if(i.test(p))return d;let g=O(d,P,h);return g?R.normalize(g):d}function Re(p,{extensions:d=Object.keys(Me.Module._extensions)}={}){let P=[],h=ee(p,P,{extensions:d});if(h)return R.normalize(h);{Xa(P.map(T=>m.fromPortablePath(T)));let g=ne(p),E=K(p);if(E){let{packageLocation:T}=F(E),b=!0;try{e.fakeFs.accessSync(T)}catch(D){if((D==null?void 0:D.code)==="ENOENT")b=!1;else{let N=((D==null?void 0:D.message)??D??"empty exception thrown").replace(/^[A-Z]/,he=>he.toLowerCase());throw M(U.QUALIFIED_PATH_RESOLUTION_FAILED,`Required package exists but could not be accessed (${N}).

Missing package: ${E.name}@${E.reference}
Expected package location: ${ne(T)}
`,{unqualifiedPath:g,extensions:d})}}if(!b){let D=T.includes("/unplugged/")?"Required unplugged package missing from disk. This may happen when switching branches without running installs (unplugged packages must be fully materialized on disk to work).":"Required package missing from disk. If you keep your packages inside your repository then restarting the Node process may be enough. Otherwise, try to run an install first.";throw M(U.QUALIFIED_PATH_RESOLUTION_FAILED,`${D}

Missing package: ${E.name}@${E.reference}
Expected package location: ${ne(T)}
`,{unqualifiedPath:g,extensions:d})}}throw M(U.QUALIFIED_PATH_RESOLUTION_FAILED,`Qualified path resolution failed: we looked for the following paths, but none could be accessed.

Source path: ${g}
${P.map(T=>`Not found: ${ne(T)}
`).join("")}`,{unqualifiedPath:g,extensions:d})}}function oe(p,d,P){if(!d)throw new Error("Assertion failed: An issuer is required to resolve private import mappings");let h=Ua({name:p,base:C.pathToFileURL(m.fromPortablePath(d)),conditions:P.conditions??Q,readFileSyncFn:gt});if(h instanceof URL)return Re(m.toPortablePath(C.fileURLToPath(h)),{extensions:P.extensions});if(h.startsWith("#"))throw new Error("Mapping from one private import to another isn't allowed");return le(h,d,P)}function le(p,d,P={}){try{if(p.startsWith("#"))return oe(p,d,P);let{considerBuiltins:h,extensions:g,conditions:E}=P,T=Ze(p,d,{considerBuiltins:h});if(p==="pnpapi")return T;if(T===null)return null;let b=()=>d!==null?q(d):!1,D=(!h||!Kt(p))&&!b()?Ve(p,T,E,d):T;return Re(D,{extensions:g})}catch(h){throw Object.prototype.hasOwnProperty.call(h,"pnpCode")&&Object.assign(h.data,{request:ne(p),issuer:d&&ne(d)}),h}}function Pt(p){let d=R.normalize(p),P=_.resolveVirtual(d);return P!==d?P:null}return{VERSIONS:Pe,topLevel:Ie,getLocator:(p,d)=>Array.isArray(d)?{name:d[0],reference:d[1]}:{name:p,reference:d},getDependencyTreeRoots:()=>[...n.dependencyTreeRoots],getAllLocators(){let p=[];for(let[d,P]of S)for(let h of P.keys())d!==null&&h!==null&&p.push({name:d,reference:h});return p},getPackageInformation:p=>{let d=te(p);if(d===null)return null;let P=m.fromPortablePath(d.packageLocation);return{...d,packageLocation:P}},findPackageLocator:p=>K(m.toPortablePath(p)),resolveToUnqualified:I("resolveToUnqualified",(p,d,P)=>{let h=d!==null?m.toPortablePath(d):null,g=Ze(m.toPortablePath(p),h,P);return g===null?null:m.fromPortablePath(g)}),resolveUnqualified:I("resolveUnqualified",(p,d)=>m.fromPortablePath(Re(m.toPortablePath(p),d))),resolveRequest:I("resolveRequest",(p,d,P)=>{let h=d!==null?m.toPortablePath(d):null,g=le(m.toPortablePath(p),h,P);return g===null?null:m.fromPortablePath(g)}),resolveVirtual:I("resolveVirtual",p=>{let d=Pt(m.toPortablePath(p));return d!==null?m.fromPortablePath(d):null})}}async function Ka(n,{fakeFs:e,pnpapiResolution:t}){let r=await e.readFilePromise(n,"utf8");return ys(r,{basePath:$r.dirname(n),fakeFs:e,pnpapiResolution:t})}function ys(n,{basePath:e,fakeFs:t,pnpapiResolution:r}){let s=JSON.parse(n),i=ls(s,{basePath:e});return ps(i,{compatibilityMode:!0,fakeFs:t,pnpapiResolution:r})}var za=(n,e,t)=>{let r=sn(n),s=ls(r,{basePath:e}),i=m.join(e,st.pnpCjs);return ps(s,{fakeFs:t,pnpapiResolution:i})},zt,Ya=()=>(typeof zt>"u"&&(zt=es.default.brotliDecompressSync(Buffer.from("","base64")).toString()),zt);$.LinkType=ts;$.generateInlinedScript=Sa;$.generateLoader=an;$.generatePrettyJson=cs;$.generateSplitScript=wa;$.getESMLoaderTemplate=Ya;$.hydratePnpFile=Ka;$.hydratePnpSource=ys;$.makeRuntimeApi=za});var no={};xs(no,{default:()=>to,getExistingYarnManifest:()=>eo,nixCurrentSystem:()=>$a});var Ur=x("buffer"),Mr=J(x("path"),1),tt=J(x("child_process"),1),Ae=J(x("process"),1),Hr=J(er(),1);function Rt(n){let e=typeof n=="string"?`
`:`
`.charCodeAt(),t=typeof n=="string"?"\r":"\r".charCodeAt();return n[n.length-1]===e&&(n=n.slice(0,-1)),n[n.length-1]===t&&(n=n.slice(0,-1)),n}var Le=J(x("process"),1),be=J(x("path"),1),tr=J(x("url"),1);function Ke(n={}){let{env:e=process.env,platform:t=process.platform}=n;return t!=="win32"?"PATH":Object.keys(e).reverse().find(r=>r.toUpperCase()==="PATH")||"Path"}function ti(n={}){let{cwd:e=Le.default.cwd(),path:t=Le.default.env[Ke()],execPath:r=Le.default.execPath}=n,s,i=e instanceof URL?tr.default.fileURLToPath(e):e,a=be.default.resolve(i),o=[];for(;s!==a;)o.push(be.default.join(a,"node_modules/.bin")),s=a,a=be.default.resolve(a,"..");return o.push(be.default.resolve(i,r,"..")),[...o,t].join(be.default.delimiter)}function nr({env:n=Le.default.env,...e}={}){n={...n};let t=Ke({env:n});return e.path=n[t],n[t]=ti(e),n}var ni=(n,e,t,r)=>{if(t==="length"||t==="prototype"||t==="arguments"||t==="caller")return;let s=Object.getOwnPropertyDescriptor(n,t),i=Object.getOwnPropertyDescriptor(e,t);!ri(s,i)&&r||Object.defineProperty(n,t,i)},ri=function(n,e){return n===void 0||n.configurable||n.writable===e.writable&&n.enumerable===e.enumerable&&n.configurable===e.configurable&&(n.writable||n.value===e.value)},si=(n,e)=>{let t=Object.getPrototypeOf(e);t!==Object.getPrototypeOf(n)&&Object.setPrototypeOf(n,t)},ii=(n,e)=>`/* Wrapped ${n}*/
${e}`,ai=Object.getOwnPropertyDescriptor(Function.prototype,"toString"),oi=Object.getOwnPropertyDescriptor(Function.prototype.toString,"name"),ci=(n,e,t)=>{let r=t===""?"":`with ${t.trim()}() `,s=ii.bind(null,r,e.toString());Object.defineProperty(s,"name",oi),Object.defineProperty(n,"toString",{...ai,value:s})};function Nt(n,e,{ignoreNonConfigurable:t=!1}={}){let{name:r}=n;for(let s of Reflect.ownKeys(e))ni(n,e,s,t);return si(n,e),ci(n,e,r),n}var ze=new WeakMap,rr=(n,e={})=>{if(typeof n!="function")throw new TypeError("Expected a function");let t,r=0,s=n.displayName||n.name||"<anonymous>",i=function(...a){if(ze.set(i,++r),r===1)t=n.apply(this,a),n=null;else if(e.throw===!0)throw new Error(`Function \`${s}\` can only be called once`);return t};return Nt(i,n),ze.set(i,r),i};rr.callCount=n=>{if(!ze.has(n))throw new Error(`The given function \`${n.name}\` is not wrapped by the \`onetime\` package`);return ze.get(n)};var sr=rr;var lr=x("os");var ir=function(){let n=Ot-ar+1;return Array.from({length:n},li)},li=function(n,e){return{name:`SIGRT${e+1}`,number:ar+e,action:"terminate",description:"Application-specific signal (realtime)",standard:"posix"}},ar=34,Ot=64;var cr=x("os");var or=[{name:"SIGHUP",number:1,action:"terminate",description:"Terminal closed",standard:"posix"},{name:"SIGINT",number:2,action:"terminate",description:"User interruption with CTRL-C",standard:"ansi"},{name:"SIGQUIT",number:3,action:"core",description:"User interruption with CTRL-\\",standard:"posix"},{name:"SIGILL",number:4,action:"core",description:"Invalid machine instruction",standard:"ansi"},{name:"SIGTRAP",number:5,action:"core",description:"Debugger breakpoint",standard:"posix"},{name:"SIGABRT",number:6,action:"core",description:"Aborted",standard:"ansi"},{name:"SIGIOT",number:6,action:"core",description:"Aborted",standard:"bsd"},{name:"SIGBUS",number:7,action:"core",description:"Bus error due to misaligned, non-existing address or paging error",standard:"bsd"},{name:"SIGEMT",number:7,action:"terminate",description:"Command should be emulated but is not implemented",standard:"other"},{name:"SIGFPE",number:8,action:"core",description:"Floating point arithmetic error",standard:"ansi"},{name:"SIGKILL",number:9,action:"terminate",description:"Forced termination",standard:"posix",forced:!0},{name:"SIGUSR1",number:10,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGSEGV",number:11,action:"core",description:"Segmentation fault",standard:"ansi"},{name:"SIGUSR2",number:12,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGPIPE",number:13,action:"terminate",description:"Broken pipe or socket",standard:"posix"},{name:"SIGALRM",number:14,action:"terminate",description:"Timeout or timer",standard:"posix"},{name:"SIGTERM",number:15,action:"terminate",description:"Termination",standard:"ansi"},{name:"SIGSTKFLT",number:16,action:"terminate",description:"Stack is empty or overflowed",standard:"other"},{name:"SIGCHLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"posix"},{name:"SIGCLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"other"},{name:"SIGCONT",number:18,action:"unpause",description:"Unpaused",standard:"posix",forced:!0},{name:"SIGSTOP",number:19,action:"pause",description:"Paused",standard:"posix",forced:!0},{name:"SIGTSTP",number:20,action:"pause",description:'Paused using CTRL-Z or "suspend"',standard:"posix"},{name:"SIGTTIN",number:21,action:"pause",description:"Background process cannot read terminal input",standard:"posix"},{name:"SIGBREAK",number:21,action:"terminate",description:"User interruption with CTRL-BREAK",standard:"other"},{name:"SIGTTOU",number:22,action:"pause",description:"Background process cannot write to terminal output",standard:"posix"},{name:"SIGURG",number:23,action:"ignore",description:"Socket received out-of-band data",standard:"bsd"},{name:"SIGXCPU",number:24,action:"core",description:"Process timed out",standard:"bsd"},{name:"SIGXFSZ",number:25,action:"core",description:"File too big",standard:"bsd"},{name:"SIGVTALRM",number:26,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGPROF",number:27,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGWINCH",number:28,action:"ignore",description:"Terminal window size changed",standard:"bsd"},{name:"SIGIO",number:29,action:"terminate",description:"I/O is available",standard:"other"},{name:"SIGPOLL",number:29,action:"terminate",description:"Watched event",standard:"other"},{name:"SIGINFO",number:29,action:"ignore",description:"Request for process information",standard:"other"},{name:"SIGPWR",number:30,action:"terminate",description:"Device running out of power",standard:"systemv"},{name:"SIGSYS",number:31,action:"core",description:"Invalid system call",standard:"other"},{name:"SIGUNUSED",number:31,action:"terminate",description:"Invalid system call",standard:"other"}];var Lt=function(){let n=ir();return[...or,...n].map(ui)},ui=function({name:n,number:e,description:t,action:r,forced:s=!1,standard:i}){let{signals:{[n]:a}}=cr.constants,o=a!==void 0;return{name:n,number:o?a:e,description:t,supported:o,action:r,forced:s,standard:i}};var fi=function(){return Lt().reduce(hi,{})},hi=function(n,{name:e,number:t,description:r,supported:s,action:i,forced:a,standard:o}){return{...n,[e]:{name:e,number:t,description:r,supported:s,action:i,forced:a,standard:o}}},ur=fi(),di=function(){let n=Lt(),e=64+1,t=Array.from({length:e},(r,s)=>mi(s,n));return Object.assign({},...t)},mi=function(n,e){let t=pi(n,e);if(t===void 0)return{};let{name:r,description:s,supported:i,action:a,forced:o,standard:c}=t;return{[n]:{name:r,number:n,description:s,supported:i,action:a,forced:o,standard:c}}},pi=function(n,e){let t=e.find(({name:r})=>lr.constants.signals[r]===n);return t!==void 0?t:e.find(r=>r.number===n)},jo=di();var yi=({timedOut:n,timeout:e,errorCode:t,signal:r,signalDescription:s,exitCode:i,isCanceled:a})=>n?`timed out after ${e} milliseconds`:a?"was canceled":t!==void 0?`failed with ${t}`:r!==void 0?`was killed with ${r} (${s})`:i!==void 0?`failed with exit code ${i}`:"failed",De=({stdout:n,stderr:e,all:t,error:r,signal:s,exitCode:i,command:a,escapedCommand:o,timedOut:c,isCanceled:f,killed:y,parsed:{options:{timeout:l}}})=>{i=i===null?void 0:i,s=s===null?void 0:s;let S=s===void 0?void 0:ur[s].description,k=r&&r.code,u=`Command ${yi({timedOut:c,timeout:l,errorCode:k,signal:s,signalDescription:S,exitCode:i,isCanceled:f})}: ${a}`,I=Object.prototype.toString.call(r)==="[object Error]",F=I?`${u}
${r.message}`:u,L=[F,e,n].filter(Boolean).join(`
`);return I?(r.originalMessage=r.message,r.message=L):r=new Error(L),r.shortMessage=F,r.command=a,r.escapedCommand=o,r.exitCode=i,r.signal=s,r.signalDescription=S,r.stdout=n,r.stderr=e,t!==void 0&&(r.all=t),"bufferedData"in r&&delete r.bufferedData,r.failed=!0,r.timedOut=Boolean(c),r.isCanceled=f,r.killed=y&&!c,r};var Ye=["stdin","stdout","stderr"],gi=n=>Ye.some(e=>n[e]!==void 0),fr=n=>{if(!n)return;let{stdio:e}=n;if(e===void 0)return Ye.map(r=>n[r]);if(gi(n))throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${Ye.map(r=>`\`${r}\``).join(", ")}`);if(typeof e=="string")return e;if(!Array.isArray(e))throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof e}\``);let t=Math.max(e.length,Ye.length);return Array.from({length:t},(r,s)=>e[s])};var Pr=J(x("os"),1),Sr=J(gr(),1),Pi=1e3*5,wr=(n,e="SIGTERM",t={})=>{let r=n(e);return Si(n,e,t,r),r},Si=(n,e,t,r)=>{if(!wi(e,t,r))return;let s=bi(t),i=setTimeout(()=>{n("SIGKILL")},s);i.unref&&i.unref()},wi=(n,{forceKillAfterTimeout:e},t)=>ki(n)&&e!==!1&&t,ki=n=>n===Pr.default.constants.signals.SIGTERM||typeof n=="string"&&n.toUpperCase()==="SIGTERM",bi=({forceKillAfterTimeout:n=!0})=>{if(n===!0)return Pi;if(!Number.isFinite(n)||n<0)throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${n}\` (${typeof n})`);return n},kr=(n,e)=>{n.kill()&&(e.isCanceled=!0)},vi=(n,e,t)=>{n.kill(e),t(Object.assign(new Error("Timed out"),{timedOut:!0,signal:e}))},br=(n,{timeout:e,killSignal:t="SIGTERM"},r)=>{if(e===0||e===void 0)return r;let s,i=new Promise((o,c)=>{s=setTimeout(()=>{vi(n,t,c)},e)}),a=r.finally(()=>{clearTimeout(s)});return Promise.race([i,a])},vr=({timeout:n})=>{if(n!==void 0&&(!Number.isFinite(n)||n<0))throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${n}\` (${typeof n})`)},Tr=async(n,{cleanup:e,detached:t},r)=>{if(!e||t)return r;let s=(0,Sr.default)(()=>{n.kill()});return r.finally(()=>{s()})};function Ct(n){return n!==null&&typeof n=="object"&&typeof n.pipe=="function"}var Ht=J(xr(),1),Nr=J(Rr(),1),Or=(n,e)=>{e===void 0||n.stdin===void 0||(Ct(e)?e.pipe(n.stdin):n.stdin.end(e))},Lr=(n,{all:e})=>{if(!e||!n.stdout&&!n.stderr)return;let t=(0,Nr.default)();return n.stdout&&t.add(n.stdout),n.stderr&&t.add(n.stderr),t},Ut=async(n,e)=>{if(!!n){n.destroy();try{return await e}catch(t){return t.bufferedData}}},Mt=(n,{encoding:e,buffer:t,maxBuffer:r})=>{if(!(!n||!t))return e?(0,Ht.default)(n,{encoding:e,maxBuffer:r}):Ht.default.buffer(n,{maxBuffer:r})},Dr=async({stdout:n,stderr:e,all:t},{encoding:r,buffer:s,maxBuffer:i},a)=>{let o=Mt(n,{encoding:r,buffer:s,maxBuffer:i}),c=Mt(e,{encoding:r,buffer:s,maxBuffer:i}),f=Mt(t,{encoding:r,buffer:s,maxBuffer:i*2});try{return await Promise.all([a,o,c,f])}catch(y){return Promise.all([{error:y,signal:y.signal,timedOut:y.timedOut},Ut(n,o),Ut(e,c),Ut(t,f)])}},jr=({input:n})=>{if(Ct(n))throw new TypeError("The `input` option cannot be a stream in sync mode")};var Oi=(async()=>{})().constructor.prototype,Li=["then","catch","finally"].map(n=>[n,Reflect.getOwnPropertyDescriptor(Oi,n)]),Wt=(n,e)=>{for(let[t,r]of Li){let s=typeof e=="function"?(...i)=>Reflect.apply(r.value,e(),i):r.value.bind(e);Reflect.defineProperty(n,t,{...r,value:s})}return n},Cr=n=>new Promise((e,t)=>{n.on("exit",(r,s)=>{e({exitCode:r,signal:s})}),n.on("error",r=>{t(r)}),n.stdin&&n.stdin.on("error",r=>{t(r)})});var Ar=(n,e=[])=>Array.isArray(e)?[n,...e]:[n],Di=/^[\w.-]+$/,ji=/"/g,Ci=n=>typeof n!="string"||Di.test(n)?n:`"${n.replace(ji,'\\"')}"`,Gt=(n,e)=>Ar(n,e).join(" "),Bt=(n,e)=>Ar(n,e).map(t=>Ci(t)).join(" ");var Ai=1e3*1e3*100,Ui=({env:n,extendEnv:e,preferLocal:t,localDir:r,execPath:s})=>{let i=e?{...Ae.default.env,...n}:n;return t?nr({env:i,cwd:r,execPath:s}):i},Wr=(n,e,t={})=>{let r=Hr.default._parse(n,e,t);return n=r.command,e=r.args,t=r.options,t={maxBuffer:Ai,buffer:!0,stripFinalNewline:!0,extendEnv:!0,preferLocal:!1,localDir:t.cwd||Ae.default.cwd(),execPath:Ae.default.execPath,encoding:"utf8",reject:!0,cleanup:!0,all:!1,windowsHide:!0,...t},t.env=Ui(t),t.stdio=fr(t),Ae.default.platform==="win32"&&Mr.default.basename(n,".exe")==="cmd"&&e.unshift("/q"),{file:n,args:e,options:t,parsed:r}},Ue=(n,e,t)=>typeof e!="string"&&!Ur.Buffer.isBuffer(e)?t===void 0?void 0:"":n.stripFinalNewline?Rt(e):e;function Gr(n,e,t){let r=Wr(n,e,t),s=Gt(n,e),i=Bt(n,e);vr(r.options);let a;try{a=tt.default.spawn(r.file,r.args,r.options)}catch(k){let w=new tt.default.ChildProcess,u=Promise.reject(De({error:k,stdout:"",stderr:"",all:"",command:s,escapedCommand:i,parsed:r,timedOut:!1,isCanceled:!1,killed:!1}));return Wt(w,u)}let o=Cr(a),c=br(a,r.options,o),f=Tr(a,r.options,c),y={isCanceled:!1};a.kill=wr.bind(null,a.kill.bind(a)),a.cancel=kr.bind(null,a,y);let S=sr(async()=>{let[{error:k,exitCode:w,signal:u,timedOut:I},F,L,Q]=await Dr(a,r.options,f),O=Ue(r.options,F),ee=Ue(r.options,L),B=Ue(r.options,Q);if(k||w!==0||u!==null){let ie=De({error:k,exitCode:w,signal:u,stdout:O,stderr:ee,all:B,command:s,escapedCommand:i,parsed:r,timedOut:I,isCanceled:y.isCanceled||(r.options.signal?r.options.signal.aborted:!1),killed:a.killed});if(!r.options.reject)return ie;throw ie}return{command:s,escapedCommand:i,exitCode:0,stdout:O,stderr:ee,all:B,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}});return Or(a,r.options.input),a.all=Lr(a,r.options),Wt(a,S)}function Br(n,e,t){let r=Wr(n,e,t),s=Gt(n,e),i=Bt(n,e);jr(r.options);let a;try{a=tt.default.spawnSync(r.file,r.args,r.options)}catch(f){throw De({error:f,stdout:"",stderr:"",all:"",command:s,escapedCommand:i,parsed:r,timedOut:!1,isCanceled:!1,killed:!1})}let o=Ue(r.options,a.stdout,a.error),c=Ue(r.options,a.stderr,a.error);if(a.error||a.status!==0||a.signal!==null){let f=De({stdout:o,stderr:c,error:a.error,signal:a.signal,exitCode:a.status,command:s,escapedCommand:i,parsed:r,timedOut:a.error&&a.error.code==="ETIMEDOUT",isCanceled:!1,killed:a.signal!==null});if(!r.options.reject)return f;throw f}return{command:s,escapedCommand:i,exitCode:0,stdout:o,stderr:c,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}}var v=x("@yarnpkg/core"),ge=x("@yarnpkg/cli"),Y=x("@yarnpkg/fslib"),ln=x("@yarnpkg/libzip"),Ss=x("@yarnpkg/plugin-pnp"),ws=x("@yarnpkg/plugin-file"),W=x("clipanion"),qa=Zr(),se=x("fs"),re=x("path"),{PassThrough:Ps}=x("stream"),{spawnSync:hc}=x("child_process"),{generateInlinedScript:Ja}=gs(),cn;function _a(n,e){for(let[t,r]of n.entries())if(r===e)return t}function $a(){if(cn)return cn;let n=JSON.parse(Br("nix",["eval","--impure","--json","--expr","builtins.currentSystem"]).stdout);return cn=n,n}async function eo(n){try{let e=["eval","--json","--impure","--expr",qa+`

        getPackages (import ${n})
      `],{stdout:t}=await Gr("nix",e,{stderr:"ignore"});return JSON.parse(t)}catch{return null}}var G=x("typanion"),ft=class extends ge.BaseCommand{constructor(){super(...arguments);this.locator=W.Option.String({validator:G.isString()});this.outDirectory=W.Option.String({validator:G.isString()})}async execute(){let t=await v.Configuration.find(process.cwd(),this.context.plugins),{project:r,workspace:s}=await v.Project.find(t,process.cwd()),i=t.makeFetcher(),a=await v.StreamReport.start({configuration:t,stdout:this.context.stdout,includeLogs:!this.context.quiet},async o=>{t.values.set("enableMirror",!1);let c={...JSON.parse(this.locator),locatorHash:"",identHash:""};v.structUtils.isVirtualLocator(c)&&(c=v.structUtils.devirtualizeLocator(c));let f={checksums:new Map,project:r,cache:new v.Cache(this.outDirectory,{check:!1,configuration:t,immutable:!1}),fetcher:i,report:o},y=await i.fetch(c,f);se.renameSync(y.packageFs.target,re.join(this.outDirectory,"output.zip"))})}};ft.paths=[["nix","fetch-by-locator"]];var ht=class extends ge.BaseCommand{constructor(){super(...arguments);this.packageRegistryDataPath=W.Option.String({validator:G.isString()})}async execute(){var a;let t=await v.Configuration.find(process.cwd(),this.context.plugins),r=new v.Project(process.cwd(),{configuration:t});await r.setupResolutions();let s=JSON.parse(se.readFileSync(this.packageRegistryDataPath,"utf8")),i=Object.values(s).filter(o=>!!(o!=null&&o.manifest));for(let o of i){let c=Object.assign({},o.manifest,{name:o.name,reference:o.reference}),f=new Map,y=new Map(Object.entries(c.bin??{})),l=v.structUtils.makeIdent(c.scope,c.flatName),S=v.structUtils.makeLocator(l,c.reference),k=v.structUtils.makeDescriptor(l,c.descriptorRange);c.locatorHash=S.locatorHash,c.descriptorHash=k.descriptorHash,o.manifest.locatorHash=S.locatorHash,o.manifest.descriptorHash=k.descriptorHash;let w={...S,languageName:c.languageName,linkType:c.linkType,conditions:null,dependencies:f,bin:y};r.originalPackages.set(c.locatorHash,w),r.storedResolutions.set(c.descriptorHash,c.locatorHash),c.checksum!=null&&r.storedChecksums.set(c.locatorHash,c.checksum),r.storedDescriptors.set(c.descriptorHash,k)}for(let o of i){let c=r.originalPackages.get(o.manifest.locatorHash);if(!c)continue;let f=o.packageDependencies??{};for(let y of Object.keys(f)){let[l,S]=f[y],k=i.find(w=>(w==null?void 0:w.name)===l&&(w==null?void 0:w.reference)===S);if(((a=k==null?void 0:k.manifest)==null?void 0:a.descriptorHash)!=null){let w=r.storedDescriptors.get(k.manifest.descriptorHash);w!=null&&c.dependencies.set(k.manifest.descriptorHash,w)}}}r.storedPackages=r.originalPackages,await r.persistLockfile()}};ht.paths=[["nix","create-lockfile"]];var dt=class extends ge.BaseCommand{constructor(){super(...arguments);this.locator=W.Option.String({validator:G.isString()});this.tgzPath=W.Option.String({validator:G.isString()});this.outPath=W.Option.String({validator:G.isString()})}async execute(){let t=await v.Configuration.find(process.cwd(),this.context.plugins),{project:r,workspace:s}=await v.Project.find(t,process.cwd()),i={...JSON.parse(this.locator),locatorHash:"",identHash:""},{path:a}=await v.tgzUtils.convertToZip(se.readFileSync(this.tgzPath),{compressionLevel:r.configuration.get("compressionLevel"),prefixPath:v.structUtils.getIdentVendorPath(i),stripComponents:1});se.copyFileSync(a,this.outPath)}};dt.paths=[["nix","convert-to-zip"]];var mt=class extends ge.BaseCommand{constructor(){super(...arguments);this.outDirectory=W.Option.String({validator:G.isString()});this.packageRegistryDataPath=W.Option.String({validator:G.isString()});this.topLevelPackageLocator=W.Option.String({validator:G.isString()})}async execute(){var L;let t=await v.Configuration.find(process.cwd(),this.context.plugins),{project:r,workspace:s}=await v.Project.find(t,process.cwd()),i=(0,Ss.getPnpPath)({cwd:this.outDirectory}),a=r.configuration.get("pnpFallbackMode"),o=[],c=a!=="none",f=new Map,y=v.miscUtils.buildIgnorePattern([".yarn/sdks/**",...r.configuration.get("pnpIgnorePatterns")]),l=r.configuration.get("pnpShebang"),S=new Map,k=JSON.parse(se.readFileSync(this.packageRegistryDataPath,"utf8")),w=null,u=se.realpathSync(this.outDirectory);for(let Q of Object.keys(k)){let O=k[Q];if(!O)continue;let ee=v.structUtils.makeIdent(O.manifest.scope,O.manifest.flatName),B=v.structUtils.makeLocator(ee,O.reference),ie=v.structUtils.isVirtualLocator(O),q=new Map,Pe=new Set;for(let K of((L=O.manifest)==null?void 0:L.packagePeers)??[])q.set(K,null),Pe.add(K);if(O.packageDependencies!=null)for(let K of Object.keys(O.packageDependencies))q.set(K,O.packageDependencies[K]);let Ie=O.packageLocation??O.drvPath+"/node_modules/"+O.name,te=re.relative(u,Ie),ce=(te.startsWith("../")?te:"./"+te)+"/";ie&&(ce="./"+Y.VirtualFS.makeVirtualPath("./.yarn/__virtual__",v.structUtils.slugifyLocator(B),te)+"/");let ae={packageLocation:ce,packageDependencies:q,packagePeers:Pe,linkType:O.linkType};v.miscUtils.getMapWithDefault(S,O.name).set(O.reference,ae),B.reference.startsWith("workspace:")&&o.push({name:v.structUtils.stringifyIdent(B),reference:B.reference}),`${O.name}@${O.reference}`===this.topLevelPackageLocator&&(w=ae)}if(w!=null)v.miscUtils.getMapWithDefault(S,null).set(null,w);else throw new Error("Could not determine topLevelPackage, this is NEEDED for the .pnp.cjs to be correctly generated");let F=Ja({dependencyTreeRoots:o,enableTopLevelFallback:c,fallbackExclusionList:a==="dependencies-only"?o:[],fallbackPool:f,ignorePattern:y,packageRegistry:S,shebang:l});await Y.xfs.changeFilePromise(i.cjs,F,{automaticNewlines:!0,mode:493})}};mt.paths=[["nix","generate-pnp-file"]];var pt=class extends ge.BaseCommand{constructor(){super(...arguments);this.binWrappersOutDirectory=W.Option.String({validator:G.isString()});this.pnpOutDirectory=W.Option.String({validator:G.isString()});this.packageRegistryDataPath=W.Option.String({validator:G.isString()});this.topLevelPackageLocator=W.Option.String({validator:G.isString()})}async execute(){var s;let t=JSON.parse(se.readFileSync(this.packageRegistryDataPath,"utf8")),r=se.realpathSync(this.pnpOutDirectory);for(let i of Object.keys(t)){let a=t[i];if(!a)continue;let o=v.structUtils.makeIdent(a.manifest.scope,a.manifest.flatName),c=v.structUtils.makeLocator(o,a.reference),f=v.structUtils.isVirtualLocator(a),y=a.packageLocation??a.drvPath+"/node_modules/"+a.name,l=re.relative(r,y),S=y;if(`${a.name}@${a.reference}`!==this.topLevelPackageLocator){f&&(S=re.join(r,Y.VirtualFS.makeVirtualPath("./.yarn/__virtual__",v.structUtils.slugifyLocator(c),l)));for(let w of Object.keys(((s=a==null?void 0:a.manifest)==null?void 0:s.bin)??{})){let u=re.join(S,a.manifest.bin[w]);await Y.xfs.writeFilePromise(re.join(this.binWrappersOutDirectory,w),`node ${u} "$@"`,{mode:493})}}}}};pt.paths=[["nix","make-path-wrappers"]];var yt=class extends ge.BaseCommand{constructor(){super(...arguments);this.locator=W.Option.String({validator:G.isString()});this.pnpRootDirectory=W.Option.String({validator:G.isString()});this.packageDirectory=W.Option.String({validator:G.isString()})}async execute(){let t=await v.Configuration.find(process.cwd(),this.context.plugins),{project:r,workspace:s}=await v.Project.find(t,process.cwd()),i=JSON.parse(this.locator),a=v.structUtils.makeIdent(i.scope,i.name),o=v.structUtils.makeLocator(a,i.reference),c=r.originalPackages.get(o.locatorHash);r.cwd=this.pnpRootDirectory,r.storedPackages=r.originalPackages;let f=await ln.ZipOpenFS.openPromise(async y=>{let l=r.configuration.getLinkers(),S={project:r,report:new v.StreamReport({stdout:new Ps,configuration:t})},k=l.find(F=>F.supportsPackage(c,S));if(!k)throw new Error(`The package ${v.structUtils.prettyLocator(r.configuration,c)} isn't supported by any of the available linkers`);let w=await k.findPackageLocation(c,S),u=new Y.CwdFS(w,{baseFs:y});return await v.Manifest.find(Y.PortablePath.dot,{baseFs:u})});for(let y of["preinstall","install","postinstall"]){if(!f.scripts.has(y))continue;let l=await v.scriptUtils.executePackageScript(c,y,[],{cwd:this.packageDirectory,project:r,stdin:process.stdin,stdout:process.stdout,stderr:process.stderr});if(l>0)return l}}};yt.paths=[["nix","run-build-scripts"]];var to={hooks:{afterAllInstalled:async(n,e)=>{let t=n.configuration.getLinkers(),r={project:n,report:null},s=new Map(t.map(w=>{let u=w.makeInstaller(r),I=w.getCustomDataKey(),F=n.linkersCustomData.get(I);return typeof F<"u"&&u.attachCustomData(F),[w,u]})),i=await v.Cache.find(n.configuration),a=n.configuration.makeFetcher(),o={checksums:new Map,project:n,cache:null,fetcher:a,report:null},c=n.configuration.makeResolver(),f={project:n,report:e.report,resolver:c},y={};for(let[w,u]of n.storedPackages){let I=v.structUtils.isVirtualLocator(u),F=I?n.storedPackages.get(v.structUtils.devirtualizeLocator(u).locatorHash):u,L=t.find(P=>P.supportsPackage(F,r)),Q=s.get(L),O=a.getLocalPath(F,o);if(!O){let P=ws.fileUtils.parseSpec(F.reference);if((P==null?void 0:P.parentLocator)!=null&&(P==null?void 0:P.path)!=null){let h=a.getLocalPath(P.parentLocator,o),g=re.resolve(h,P.path);g!=null&&(O=g)}}let ee=O!=null?"./"+re.relative(n.cwd,O):null,B=u.reference.startsWith("workspace:")?`./${u.reference.substring(10)}`:ee??null,ie=u.bin!=null?Object.fromEntries(u.bin):null,q=B!=null?!0:(Q==null?void 0:Q.shouldBeUnplugged)!=null?Q.customData.store.get(u.locatorHash)!=null?Q.shouldBeUnplugged(u,Q.customData.store.get(u.locatorHash),n.getDependencyMeta(v.structUtils.isVirtualLocator(u)?v.structUtils.devirtualizeLocator(u):u,u.version)):!1:!0,Pe=!B&&!q,Ie=B!=null&&u.reference.startsWith("patch:"),te=null;if(u.conditions!=null){let P=u.conditions.split("&").map(g=>g.trim().split("=")),h=[];for(let g of P){let E=g[0],T=g[1];if(E==="os")T==="linux"?h.push("stdenv.isLinux"):T==="darwin"?h.push("stdenv.isDarwin"):h.push("false");else if(E==="cpu"){let b={ia32:"stdenv.isi686",x64:"stdenv.isx86_64",arm:"stdenv.isAarch32",arm64:"stdenv.isAarch64"};b[T]!=null?h.push(b[T]):h.push("false")}else E==="libc"&&T!=="glibc"&&h.push("false")}h.length>0&&(te=`stdenv: ${h.map(g=>`(${g})`).join(" && ")}`)}let ce=u.dependencies,ae=new Map;if(F.reference.startsWith("workspace:")){let P=await ln.ZipOpenFS.openPromise(async h=>{let g=n.configuration.getLinkers(),E={project:n,report:new v.StreamReport({stdout:new Ps,configuration:n.configuration})},T=g.find(he=>he.supportsPackage(F,E));if(!T)throw new Error(`The package ${v.structUtils.prettyLocator(n.configuration,u)} isn't supported by any of the available linkers`);let b=await T.findPackageLocation(F,E),D=new Y.CwdFS(b,{baseFs:h});return await v.Manifest.find(Y.PortablePath.dot,{baseFs:D})});P!=null&&(ce=new Map,ae=new Map,P.devDependencies&&(Array.from(P.devDependencies).map(([h,g])=>ae.set(h,u.dependencies.get(h))),Array.from(u.dependencies).map(([h,g])=>ae.has(h)?null:ce.set(h,g))))}let gt=(await Promise.all(Array.from(ce).map(async([P,h])=>{let g=n.storedResolutions.get(h.descriptorHash),E=g!=null?n.storedPackages.get(g):null;return E?{key:P,name:v.structUtils.stringifyIdent(h),packageManifestId:v.structUtils.stringifyIdent(E)+"@"+E.reference}:(console.log("failed to resolve",h),null)}))).filter(P=>!!P),Ze=(await Promise.all(Array.from(ae).map(async([P,h])=>{let g=n.storedResolutions.get(h.descriptorHash),E=g!=null?n.storedPackages.get(g):null;return E?{key:P,name:v.structUtils.stringifyIdent(h),packageManifestId:v.structUtils.stringifyIdent(E)+"@"+E.reference}:(console.log("failed to resolve",h),null)}))).filter(P=>!!P),Ve=[];for(let P of u.peerDependencies.values())Ve.push(v.structUtils.stringifyIdent(P));let Re=v.structUtils.stringifyIdent(u)+"@"+u.reference,oe=null,le=null;await async function(){var P,h;if(B!=null&&!Ie){oe=null,le=null;return}else if(Pe){oe=(P=n.storedChecksums.get(u.locatorHash))==null?void 0:P.substring(2),le=null;return}else if(q){if(oe=(h=n.storedChecksums.get(u.locatorHash))==null?void 0:h.substring(2),!oe){console.log("got package unplugged package with no hash",u);try{let g=i.getLocatorPath(u,null);oe=await v.hashUtils.checksumFile(g)}catch(g){console.log("error getting outputHash",g.message)}}le=null;return}else{oe=null,le=null;return}}();let Pt=_a(n.storedResolutions,u.locatorHash),p=n.storedDescriptors.get(Pt),d=n.storedChecksums.get(u.locatorHash);y[Re]={isVirtual:I,canonicalPackage:F,name:v.structUtils.stringifyIdent(u),reference:u.reference,linkType:u.linkType,outputName:[v.structUtils.stringifyIdent(u),u.version,u.locatorHash.substring(0,10)].filter(P=>!!P).join("-").replace(/@/g,"").replace(/[\/]/g,"-"),outputHash:oe,outputHashByPlatform:le,src:B,shouldBeUnplugged:q,installCondition:te,bin:ie,flatName:u.name,descriptor:p,languageName:u.languageName,scope:u.scope,checksum:d,dependencies:gt,devDependencies:Ze,packagePeers:Ve}}let l=[];l.push('# This file is generated by running "yarn install" inside your project.'),l.push("# It is essentially a version of yarn.lock that Nix can better understand"),l.push("# Manual changes WILL be lost - proceed with caution!"),l.push("let"),l.push("  packages = {");function S(w,u){if(u.length>0){l.push(`      ${w} = {`);for(let I of u)l.push(`        ${JSON.stringify(I.name)} = packages.${JSON.stringify(I.packageManifestId)};`);l.push("      };")}}let k=Object.keys(y).sort((w,u)=>w.localeCompare(u));for(let w of k){let u=y[w];if(l.push(`    "${w}" = {`),l.push(`      name = ${JSON.stringify(u.name)};`),l.push(`      reference = ${JSON.stringify(u.reference)};`),u.isVirtual&&u.canonicalPackage!=null&&l.push(`      canonicalPackage = packages.${JSON.stringify(`${v.structUtils.stringifyIdent(u.canonicalPackage)}@${u.canonicalPackage.reference}`)};`),!u.isVirtual){if(l.push(`      linkType = ${JSON.stringify(u.linkType)};`),l.push(`      outputName = ${JSON.stringify(u.outputName)};`),u.outputHash!=null&&l.push(`      outputHash = ${JSON.stringify(u.outputHash)};`),u.outputHashByPlatform&&Object.keys(u.outputHashByPlatform).length>0){l.push("      outputHashByPlatform = {");for(let I of Object.keys(u.outputHashByPlatform))l.push(`        ${JSON.stringify(I)} = ${JSON.stringify(u.outputHashByPlatform[I])};`);l.push("      };")}if(u.src&&l.push(`      src = ${u.src};`),u.shouldBeUnplugged&&l.push(`      shouldBeUnplugged = ${u.shouldBeUnplugged};`),u.installCondition&&l.push(`      installCondition = ${u.installCondition};`),l.push(`      flatName = ${JSON.stringify(u.flatName)};`),l.push(`      languageName = ${JSON.stringify(u.languageName)};`),l.push(`      scope = ${JSON.stringify(u.scope)};`),l.push(`      descriptorRange = ${JSON.stringify(u.descriptor.range)};`),u.checksum&&l.push(`      checksum = ${JSON.stringify(u.checksum)};`),u.bin&&Object.keys(u.bin).length>0){l.push("      bin = {");for(let I of Object.keys(u.bin))l.push(`        ${JSON.stringify(I)} = ${JSON.stringify(u.bin[I])};`);l.push("      };")}}if(S("dependencies",u.dependencies),S("devDependencies",u.devDependencies),!u.isVirtual&&u.packagePeers&&u.packagePeers.length>0){l.push("      packagePeers = [");for(let I of u.packagePeers)l.push(`        ${JSON.stringify(I)}`);l.push("      ];")}l.push("    };")}l.push("  };"),l.push("in"),l.push("packages"),l.push(""),se.writeFileSync(re.join(n.cwd,"yarn-manifest.nix"),l.join(`
`),"utf8")},populateYarnPaths:async n=>{let e=process.env.YARNNIX_PACKAGE_REGISTRY_DATA_PATH;if(e){let t=JSON.parse(se.readFileSync(e,"utf8")),r=Object.values(t).filter(s=>!!(s!=null&&s.manifest));for(let s of r)if(s.canonicalReference.startsWith("workspace:")&&s.drvPath!==process.env.out){let i=s.packageLocation??re.join(s.drvPath,"node_modules",s.name),a=new v.Workspace(i,{project:n});await a.setup(),n.addWorkspace(a)}}}},commands:[ht,ft,dt,mt,pt,yt]};return Is(no);})();
/**
  @license
  Copyright Node.js contributors. All rights reserved.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
*/
/**
  @license
  The MIT License (MIT)

  Copyright (c) 2014 Blake Embrey (hello@blakeembrey.com)

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
return plugin;
}
};
