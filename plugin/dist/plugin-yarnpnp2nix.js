/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-yarnpnp2nix",
factory: function (require) {
var plugin=(()=>{var Js=Object.create;var qe=Object.defineProperty;var zs=Object.getOwnPropertyDescriptor;var qs=Object.getOwnPropertyNames;var Ws=Object.getPrototypeOf,Vs=Object.prototype.hasOwnProperty;var v=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,n)=>(typeof require<"u"?require:e)[n]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var M=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Ys=(t,e)=>{for(var n in e)qe(t,n,{get:e[n],enumerable:!0})},Sn=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of qs(e))!Vs.call(t,s)&&s!==n&&qe(t,s,{get:()=>e[s],enumerable:!(r=zs(e,s))||r.enumerable});return t};var z=(t,e,n)=>(n=t!=null?Js(Ws(t)):{},Sn(e||!t||!t.__esModule?qe(n,"default",{value:t,enumerable:!0}):n,t)),Ks=t=>Sn(qe({},"__esModule",{value:!0}),t);var xn=M((Ua,vn)=>{vn.exports=Tn;Tn.sync=_s;var kn=v("fs");function Qs(t,e){var n=e.pathExt!==void 0?e.pathExt:process.env.PATHEXT;if(!n||(n=n.split(";"),n.indexOf("")!==-1))return!0;for(var r=0;r<n.length;r++){var s=n[r].toLowerCase();if(s&&t.substr(-s.length).toLowerCase()===s)return!0}return!1}function In(t,e,n){return!t.isSymbolicLink()&&!t.isFile()?!1:Qs(e,n)}function Tn(t,e,n){kn.stat(t,function(r,s){n(r,r?!1:In(s,t,e))})}function _s(t,e){return In(kn.statSync(t),t,e)}});var On=M((Ca,Nn)=>{Nn.exports=Ln;Ln.sync=$s;var En=v("fs");function Ln(t,e,n){En.stat(t,function(r,s){n(r,r?!1:Rn(s,e))})}function $s(t,e){return Rn(En.statSync(t),e)}function Rn(t,e){return t.isFile()&&ei(t,e)}function ei(t,e){var n=t.mode,r=t.uid,s=t.gid,i=e.uid!==void 0?e.uid:process.getuid&&process.getuid(),o=e.gid!==void 0?e.gid:process.getgid&&process.getgid(),a=parseInt("100",8),c=parseInt("010",8),f=parseInt("001",8),y=a|c,l=n&f||n&c&&s===o||n&a&&r===i||n&y&&i===0;return l}});var Dn=M((Ha,An)=>{var Ma=v("fs"),We;process.platform==="win32"||global.TESTING_WINDOWS?We=xn():We=On();An.exports=vt;vt.sync=ti;function vt(t,e,n){if(typeof e=="function"&&(n=e,e={}),!n){if(typeof Promise!="function")throw new TypeError("callback not provided");return new Promise(function(r,s){vt(t,e||{},function(i,o){i?s(i):r(o)})})}We(t,e||{},function(r,s){r&&(r.code==="EACCES"||e&&e.ignoreErrors)&&(r=null,s=!1),n(r,s)})}function ti(t,e){try{return We.sync(t,e||{})}catch(n){if(e&&e.ignoreErrors||n.code==="EACCES")return!1;throw n}}});var Bn=M((Ga,Gn)=>{var we=process.platform==="win32"||process.env.OSTYPE==="cygwin"||process.env.OSTYPE==="msys",Fn=v("path"),ni=we?";":":",Un=Dn(),Cn=t=>Object.assign(new Error(`not found: ${t}`),{code:"ENOENT"}),Mn=(t,e)=>{let n=e.colon||ni,r=t.match(/\//)||we&&t.match(/\\/)?[""]:[...we?[process.cwd()]:[],...(e.path||process.env.PATH||"").split(n)],s=we?e.pathExt||process.env.PATHEXT||".EXE;.CMD;.BAT;.COM":"",i=we?s.split(n):[""];return we&&t.indexOf(".")!==-1&&i[0]!==""&&i.unshift(""),{pathEnv:r,pathExt:i,pathExtExe:s}},Hn=(t,e,n)=>{typeof e=="function"&&(n=e,e={}),e||(e={});let{pathEnv:r,pathExt:s,pathExtExe:i}=Mn(t,e),o=[],a=f=>new Promise((y,l)=>{if(f===r.length)return e.all&&o.length?y(o):l(Cn(t));let P=r[f],w=/^".*"$/.test(P)?P.slice(1,-1):P,T=Fn.join(w,t),u=!w&&/^\.[\\\/]/.test(t)?t.slice(0,2)+T:T;y(c(u,f,0))}),c=(f,y,l)=>new Promise((P,w)=>{if(l===s.length)return P(a(y+1));let T=s[l];Un(f+T,{pathExt:i},(u,L)=>{if(!u&&L)if(e.all)o.push(f+T);else return P(f+T);return P(c(f,y,l+1))})});return n?a(0).then(f=>n(null,f),n):a(0)},ri=(t,e)=>{e=e||{};let{pathEnv:n,pathExt:r,pathExtExe:s}=Mn(t,e),i=[];for(let o=0;o<n.length;o++){let a=n[o],c=/^".*"$/.test(a)?a.slice(1,-1):a,f=Fn.join(c,t),y=!c&&/^\.[\\\/]/.test(t)?t.slice(0,2)+f:f;for(let l=0;l<r.length;l++){let P=y+r[l];try{if(Un.sync(P,{pathExt:s}))if(e.all)i.push(P);else return P}catch{}}}if(e.all&&i.length)return i;if(e.nothrow)return null;throw Cn(t)};Gn.exports=Hn;Hn.sync=ri});var Zn=M((Ba,xt)=>{"use strict";var jn=(t={})=>{let e=t.env||process.env;return(t.platform||process.platform)!=="win32"?"PATH":Object.keys(e).reverse().find(r=>r.toUpperCase()==="PATH")||"Path"};xt.exports=jn;xt.exports.default=jn});var qn=M((ja,zn)=>{"use strict";var Xn=v("path"),si=Bn(),ii=Zn();function Jn(t,e){let n=t.options.env||process.env,r=process.cwd(),s=t.options.cwd!=null,i=s&&process.chdir!==void 0&&!process.chdir.disabled;if(i)try{process.chdir(t.options.cwd)}catch{}let o;try{o=si.sync(t.command,{path:n[ii({env:n})],pathExt:e?Xn.delimiter:void 0})}catch{}finally{i&&process.chdir(r)}return o&&(o=Xn.resolve(s?t.options.cwd:"",o)),o}function oi(t){return Jn(t)||Jn(t,!0)}zn.exports=oi});var Wn=M((Za,Lt)=>{"use strict";var Et=/([()\][%!^"`<>&|;, *?])/g;function ai(t){return t=t.replace(Et,"^$1"),t}function ci(t,e){return t=`${t}`,t=t.replace(/(\\*)"/g,'$1$1\\"'),t=t.replace(/(\\*)$/,"$1$1"),t=`"${t}"`,t=t.replace(Et,"^$1"),e&&(t=t.replace(Et,"^$1")),t}Lt.exports.command=ai;Lt.exports.argument=ci});var Yn=M((Xa,Vn)=>{"use strict";Vn.exports=/^#!(.*)/});var Qn=M((Ja,Kn)=>{"use strict";var li=Yn();Kn.exports=(t="")=>{let e=t.match(li);if(!e)return null;let[n,r]=e[0].replace(/#! ?/,"").split(" "),s=n.split("/").pop();return s==="env"?r:r?`${s} ${r}`:s}});var $n=M((za,_n)=>{"use strict";var Rt=v("fs"),ui=Qn();function fi(t){let n=Buffer.alloc(150),r;try{r=Rt.openSync(t,"r"),Rt.readSync(r,n,0,150,0),Rt.closeSync(r)}catch{}return ui(n.toString())}_n.exports=fi});var rr=M((qa,nr)=>{"use strict";var hi=v("path"),er=qn(),tr=Wn(),pi=$n(),mi=process.platform==="win32",di=/\.(?:com|exe)$/i,yi=/node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;function gi(t){t.file=er(t);let e=t.file&&pi(t.file);return e?(t.args.unshift(t.file),t.command=e,er(t)):t.file}function Pi(t){if(!mi)return t;let e=gi(t),n=!di.test(e);if(t.options.forceShell||n){let r=yi.test(e);t.command=hi.normalize(t.command),t.command=tr.command(t.command),t.args=t.args.map(i=>tr.argument(i,r));let s=[t.command].concat(t.args).join(" ");t.args=["/d","/s","/c",`"${s}"`],t.command=process.env.comspec||"cmd.exe",t.options.windowsVerbatimArguments=!0}return t}function bi(t,e,n){e&&!Array.isArray(e)&&(n=e,e=null),e=e?e.slice(0):[],n=Object.assign({},n);let r={command:t,args:e,options:n,file:void 0,original:{command:t,args:e}};return n.shell?r:Pi(r)}nr.exports=bi});var or=M((Wa,ir)=>{"use strict";var Nt=process.platform==="win32";function Ot(t,e){return Object.assign(new Error(`${e} ${t.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${e} ${t.command}`,path:t.command,spawnargs:t.args})}function wi(t,e){if(!Nt)return;let n=t.emit;t.emit=function(r,s){if(r==="exit"){let i=sr(s,e,"spawn");if(i)return n.call(t,"error",i)}return n.apply(t,arguments)}}function sr(t,e){return Nt&&t===1&&!e.file?Ot(e.original,"spawn"):null}function Si(t,e){return Nt&&t===1&&!e.file?Ot(e.original,"spawnSync"):null}ir.exports={hookChildProcess:wi,verifyENOENT:sr,verifyENOENTSync:Si,notFoundError:Ot}});var lr=M((Va,Se)=>{"use strict";var ar=v("child_process"),At=rr(),Dt=or();function cr(t,e,n){let r=At(t,e,n),s=ar.spawn(r.command,r.args,r.options);return Dt.hookChildProcess(s,r),s}function ki(t,e,n){let r=At(t,e,n),s=ar.spawnSync(r.command,r.args,r.options);return s.error=s.error||Dt.verifyENOENTSync(s.status,r),s}Se.exports=cr;Se.exports.spawn=cr;Se.exports.sync=ki;Se.exports._parse=At;Se.exports._enoent=Dt});var Ir=M((pc,Qe)=>{Qe.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"];process.platform!=="win32"&&Qe.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT");process.platform==="linux"&&Qe.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")});var Lr=M((mc,ve)=>{var D=global.process,he=function(t){return t&&typeof t=="object"&&typeof t.removeListener=="function"&&typeof t.emit=="function"&&typeof t.reallyExit=="function"&&typeof t.listeners=="function"&&typeof t.kill=="function"&&typeof t.pid=="number"&&typeof t.on=="function"};he(D)?(Tr=v("assert"),Ie=Ir(),vr=/^win/i.test(D.platform),De=v("events"),typeof De!="function"&&(De=De.EventEmitter),D.__signal_exit_emitter__?B=D.__signal_exit_emitter__:(B=D.__signal_exit_emitter__=new De,B.count=0,B.emitted={}),B.infinite||(B.setMaxListeners(1/0),B.infinite=!0),ve.exports=function(t,e){if(!he(global.process))return function(){};Tr.equal(typeof t,"function","a callback must be provided for exit handler"),Te===!1&&Mt();var n="exit";e&&e.alwaysLast&&(n="afterexit");var r=function(){B.removeListener(n,t),B.listeners("exit").length===0&&B.listeners("afterexit").length===0&&_e()};return B.on(n,t),r},_e=function(){!Te||!he(global.process)||(Te=!1,Ie.forEach(function(e){try{D.removeListener(e,$e[e])}catch{}}),D.emit=et,D.reallyExit=Ht,B.count-=1)},ve.exports.unload=_e,pe=function(e,n,r){B.emitted[e]||(B.emitted[e]=!0,B.emit(e,n,r))},$e={},Ie.forEach(function(t){$e[t]=function(){if(!!he(global.process)){var n=D.listeners(t);n.length===B.count&&(_e(),pe("exit",null,t),pe("afterexit",null,t),vr&&t==="SIGHUP"&&(t="SIGINT"),D.kill(D.pid,t))}}}),ve.exports.signals=function(){return Ie},Te=!1,Mt=function(){Te||!he(global.process)||(Te=!0,B.count+=1,Ie=Ie.filter(function(e){try{return D.on(e,$e[e]),!0}catch{return!1}}),D.emit=Er,D.reallyExit=xr)},ve.exports.load=Mt,Ht=D.reallyExit,xr=function(e){!he(global.process)||(D.exitCode=e||0,pe("exit",D.exitCode,null),pe("afterexit",D.exitCode,null),Ht.call(D,D.exitCode))},et=D.emit,Er=function(e,n){if(e==="exit"&&he(global.process)){n!==void 0&&(D.exitCode=n);var r=et.apply(this,arguments);return pe("exit",D.exitCode,null),pe("afterexit",D.exitCode,null),r}else return et.apply(this,arguments)}):ve.exports=function(){return function(){}};var Tr,Ie,vr,De,B,_e,pe,$e,Te,Mt,Ht,xr,et,Er});var Br=M((bc,Gr)=>{"use strict";var{PassThrough:Wi}=v("stream");Gr.exports=t=>{t={...t};let{array:e}=t,{encoding:n}=t,r=n==="buffer",s=!1;e?s=!(n||r):n=n||"utf8",r&&(n=null);let i=new Wi({objectMode:s});n&&i.setEncoding(n);let o=0,a=[];return i.on("data",c=>{a.push(c),s?o=a.length:o+=c.length}),i.getBufferedValue=()=>e?a:r?Buffer.concat(a,o):a.join(""),i.getBufferedLength=()=>o,i}});var jr=M((wc,Fe)=>{"use strict";var{constants:Vi}=v("buffer"),Yi=v("stream"),{promisify:Ki}=v("util"),Qi=Br(),_i=Ki(Yi.pipeline),nt=class extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}};async function jt(t,e){if(!t)throw new Error("Expected a stream");e={maxBuffer:1/0,...e};let{maxBuffer:n}=e,r=Qi(e);return await new Promise((s,i)=>{let o=a=>{a&&r.getBufferedLength()<=Vi.MAX_LENGTH&&(a.bufferedData=r.getBufferedValue()),i(a)};(async()=>{try{await _i(t,r),s()}catch(a){o(a)}})(),r.on("data",()=>{r.getBufferedLength()>n&&o(new nt)})}),r.getBufferedValue()}Fe.exports=jt;Fe.exports.buffer=(t,e)=>jt(t,{...e,encoding:"buffer"});Fe.exports.array=(t,e)=>jt(t,{...e,array:!0});Fe.exports.MaxBufferError=nt});var Xr=M((Sc,Zr)=>{"use strict";var{PassThrough:$i}=v("stream");Zr.exports=function(){var t=[],e=new $i({objectMode:!0});return e.setMaxListeners(0),e.add=n,e.isEmpty=r,e.on("unpipe",s),Array.prototype.slice.call(arguments).forEach(n),e;function n(i){return Array.isArray(i)?(i.forEach(n),this):(t.push(i),i.once("end",s.bind(null,i)),i.once("error",e.emit.bind(e,"error")),i.pipe(e,{end:!1}),this)}function r(){return t.length==0}function s(i){t=t.filter(function(o){return o!==i}),!t.length&&e.readable&&e.end()}}});var fs=M((Zc,po)=>{po.exports=`# This file can't import anything as we include the contents of this file
# directly in nix eval --apply arguments (see how this file is included in runner/src/common.ts)

with builtins;

let
  nameValuePair = name: value: { inherit name value; };

  filterAttrs = pred: set:
    listToAttrs (concatMap (name: let v = set.\${name}; in if pred name v then [(nameValuePair name v)] else []) (attrNames set));

  ##

  getPackages = manifest:
    mapAttrs (name: pkg:
      filterAttrs (key: b: (builtins.elem key [
        "name"
        "outputHash"
        "outputHashByPlatform"
      ])) pkg
    ) manifest;
in
`});var Gs=M(ee=>{"use strict";Object.defineProperty(ee,"__esModule",{value:!0});var mo=v("zlib"),Ss=v("path"),Me=v("module"),C=v("url"),hs=v("util"),yo=v("assert"),go=v("fs"),Po=v("crypto"),bo=v("os"),ft=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},ks=ft(mo),at=ft(Ss),wo=ft(yo),So=ft(go),Is=(t=>(t.HARD="HARD",t.SOFT="SOFT",t))(Is||{}),ko=456789e3,sn={root:"/",dot:".",parent:".."},ct={home:"~",nodeModules:"node_modules",manifest:"package.json",lockfile:"yarn.lock",virtual:"__virtual__",pnpJs:".pnp.js",pnpCjs:".pnp.cjs",pnpData:".pnp.data.json",pnpEsmLoader:".pnp.loader.mjs",rc:".yarnrc.yml",env:".env"},m=Object.create(at.default),R=Object.create(at.default.posix);m.cwd=()=>process.cwd();R.cwd=()=>pn(process.cwd());R.resolve=(...t)=>t.length>0&&R.isAbsolute(t[0])?at.default.posix.resolve(...t):at.default.posix.resolve(R.cwd(),...t);var Ts=function(t,e,n){return e=t.normalize(e),n=t.normalize(n),e===n?".":(e.endsWith(t.sep)||(e=e+t.sep),n.startsWith(e)?n.slice(e.length):null)};m.fromPortablePath=vs;m.toPortablePath=pn;m.contains=(t,e)=>Ts(m,t,e);R.contains=(t,e)=>Ts(R,t,e);var Io=/^([a-zA-Z]:.*)$/,To=/^\/\/(\.\/)?(.*)$/,vo=/^\/([a-zA-Z]:.*)$/,xo=/^\/unc\/(\.dot\/)?(.*)$/;function vs(t){if(process.platform!=="win32")return t;let e,n;if(e=t.match(vo))t=e[1];else if(n=t.match(xo))t=`\\\\${n[1]?".\\":""}${n[2]}`;else return t;return t.replace(/\//g,"\\")}function pn(t){if(process.platform!=="win32")return t;t=t.replace(/\\/g,"/");let e,n;return(e=t.match(Io))?t=`/${e[1]}`:(n=t.match(To))&&(t=`/unc/${n[1]?".dot/":""}${n[2]}`),t}function xs(t,e){return t===m?vs(e):pn(e)}var de=new Date(ko*1e3),Eo=de.getTime();async function Lo(t,e,n,r,s){let i=t.pathUtils.normalize(e),o=n.pathUtils.normalize(r),a=[],c=[],{atime:f,mtime:y}=s.stableTime?{atime:de,mtime:de}:await n.lstatPromise(o);await t.mkdirpPromise(t.pathUtils.dirname(e),{utimes:[f,y]}),await on(a,c,t,i,n,o,{...s,didParentExist:!0});for(let l of a)await l();await Promise.all(c.map(l=>l()))}async function on(t,e,n,r,s,i,o){let a=o.didParentExist?await Es(n,r):null,c=await s.lstatPromise(i),{atime:f,mtime:y}=o.stableTime?{atime:de,mtime:de}:c,l;switch(!0){case c.isDirectory():l=await Ro(t,e,n,r,a,s,i,c,o);break;case c.isFile():l=await Ao(t,e,n,r,a,s,i,c,o);break;case c.isSymbolicLink():l=await Do(t,e,n,r,a,s,i,c,o);break;default:throw new Error(`Unsupported file type (${c.mode})`)}return(o.linkStrategy?.type!=="HardlinkFromIndex"||!c.isFile())&&((l||a?.mtime?.getTime()!==y.getTime()||a?.atime?.getTime()!==f.getTime())&&(e.push(()=>n.lutimesPromise(r,f,y)),l=!0),(a===null||(a.mode&511)!==(c.mode&511))&&(e.push(()=>n.chmodPromise(r,c.mode&511)),l=!0)),l}async function Es(t,e){try{return await t.lstatPromise(e)}catch{return null}}async function Ro(t,e,n,r,s,i,o,a,c){if(s!==null&&!s.isDirectory())if(c.overwrite)t.push(async()=>n.removePromise(r)),s=null;else return!1;let f=!1;s===null&&(t.push(async()=>{try{await n.mkdirPromise(r,{mode:a.mode})}catch(P){if(P.code!=="EEXIST")throw P}}),f=!0);let y=await i.readdirPromise(o),l=c.didParentExist&&!s?{...c,didParentExist:!1}:c;if(c.stableSort)for(let P of y.sort())await on(t,e,n,n.pathUtils.join(r,P),i,i.pathUtils.join(o,P),l)&&(f=!0);else(await Promise.all(y.map(async w=>{await on(t,e,n,n.pathUtils.join(r,w),i,i.pathUtils.join(o,w),l)}))).some(w=>w)&&(f=!0);return f}async function No(t,e,n,r,s,i,o,a,c,f){let y=await i.checksumFilePromise(o,{algorithm:"sha1"}),l=n.pathUtils.join(f.indexPath,y.slice(0,2),`${y}.dat`),P;(E=>{E[E.Lock=0]="Lock",E[E.Rename=1]="Rename"})(P||(P={}));let w=1,T=await Es(n,l);if(s){let E=T&&s.dev===T.dev&&s.ino===T.ino,F=T?.mtimeMs!==Eo;if(E&&F&&f.autoRepair&&(w=0,T=null),!E)if(c.overwrite)t.push(async()=>n.removePromise(r)),s=null;else return!1}let u=!T&&w===1?`${l}.${Math.floor(Math.random()*4294967296).toString(16).padStart(8,"0")}`:null,L=!1;return t.push(async()=>{if(!T&&(w===0&&await n.lockPromise(l,async()=>{let E=await i.readFilePromise(o);await n.writeFilePromise(l,E)}),w===1&&u)){let E=await i.readFilePromise(o);await n.writeFilePromise(u,E);try{await n.linkPromise(u,l)}catch(F){if(F.code==="EEXIST")L=!0,await n.unlinkPromise(u);else throw F}}s||await n.linkPromise(l,r)}),e.push(async()=>{T||await n.lutimesPromise(l,de,de),u&&!L&&await n.unlinkPromise(u)}),!1}async function Oo(t,e,n,r,s,i,o,a,c){if(s!==null)if(c.overwrite)t.push(async()=>n.removePromise(r)),s=null;else return!1;return t.push(async()=>{let f=await i.readFilePromise(o);await n.writeFilePromise(r,f)}),!0}async function Ao(t,e,n,r,s,i,o,a,c){return c.linkStrategy?.type==="HardlinkFromIndex"?No(t,e,n,r,s,i,o,a,c,c.linkStrategy):Oo(t,e,n,r,s,i,o,a,c)}async function Do(t,e,n,r,s,i,o,a,c){if(s!==null)if(c.overwrite)t.push(async()=>n.removePromise(r)),s=null;else return!1;return t.push(async()=>{await n.symlinkPromise(xs(n.pathUtils,await i.readlinkPromise(o)),r)}),!0}var lt=class{constructor(e){this.pathUtils=e}async*genTraversePromise(e,{stableSort:n=!1}={}){let r=[e];for(;r.length>0;){let s=r.shift();if((await this.lstatPromise(s)).isDirectory()){let o=await this.readdirPromise(s);if(n)for(let a of o.sort())r.push(this.pathUtils.join(s,a));else throw new Error("Not supported")}else yield s}}async checksumFilePromise(e,{algorithm:n="sha512"}={}){let r=await this.openPromise(e,"r");try{let i=Buffer.allocUnsafeSlow(65536),o=Po.createHash(n),a=0;for(;(a=await this.readPromise(r,i,0,65536))!==0;)o.update(a===65536?i:i.slice(0,a));return o.digest("hex")}finally{await this.closePromise(r)}}async removePromise(e,{recursive:n=!0,maxRetries:r=5}={}){let s;try{s=await this.lstatPromise(e)}catch(i){if(i.code==="ENOENT")return;throw i}if(s.isDirectory()){if(n){let i=await this.readdirPromise(e);await Promise.all(i.map(o=>this.removePromise(this.pathUtils.resolve(e,o))))}for(let i=0;i<=r;i++)try{await this.rmdirPromise(e);break}catch(o){if(o.code!=="EBUSY"&&o.code!=="ENOTEMPTY")throw o;i<r&&await new Promise(a=>setTimeout(a,i*100))}}else await this.unlinkPromise(e)}removeSync(e,{recursive:n=!0}={}){let r;try{r=this.lstatSync(e)}catch(s){if(s.code==="ENOENT")return;throw s}if(r.isDirectory()){if(n)for(let s of this.readdirSync(e))this.removeSync(this.pathUtils.resolve(e,s));this.rmdirSync(e)}else this.unlinkSync(e)}async mkdirpPromise(e,{chmod:n,utimes:r}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let s=e.split(this.pathUtils.sep),i;for(let o=2;o<=s.length;++o){let a=s.slice(0,o).join(this.pathUtils.sep);if(!this.existsSync(a)){try{await this.mkdirPromise(a)}catch(c){if(c.code==="EEXIST")continue;throw c}if(i??=a,n!=null&&await this.chmodPromise(a,n),r!=null)await this.utimesPromise(a,r[0],r[1]);else{let c=await this.statPromise(this.pathUtils.dirname(a));await this.utimesPromise(a,c.atime,c.mtime)}}}return i}mkdirpSync(e,{chmod:n,utimes:r}={}){if(e=this.resolve(e),e===this.pathUtils.dirname(e))return;let s=e.split(this.pathUtils.sep),i;for(let o=2;o<=s.length;++o){let a=s.slice(0,o).join(this.pathUtils.sep);if(!this.existsSync(a)){try{this.mkdirSync(a)}catch(c){if(c.code==="EEXIST")continue;throw c}if(i??=a,n!=null&&this.chmodSync(a,n),r!=null)this.utimesSync(a,r[0],r[1]);else{let c=this.statSync(this.pathUtils.dirname(a));this.utimesSync(a,c.atime,c.mtime)}}}return i}async copyPromise(e,n,{baseFs:r=this,overwrite:s=!0,stableSort:i=!1,stableTime:o=!1,linkStrategy:a=null}={}){return await Lo(this,e,r,n,{overwrite:s,stableSort:i,stableTime:o,linkStrategy:a})}copySync(e,n,{baseFs:r=this,overwrite:s=!0}={}){let i=r.lstatSync(n),o=this.existsSync(e);if(i.isDirectory()){this.mkdirpSync(e);let c=r.readdirSync(n);for(let f of c)this.copySync(this.pathUtils.join(e,f),r.pathUtils.join(n,f),{baseFs:r,overwrite:s})}else if(i.isFile()){if(!o||s){o&&this.removeSync(e);let c=r.readFileSync(n);this.writeFileSync(e,c)}}else if(i.isSymbolicLink()){if(!o||s){o&&this.removeSync(e);let c=r.readlinkSync(n);this.symlinkSync(xs(this.pathUtils,c),e)}}else throw new Error(`Unsupported file type (file: ${n}, mode: 0o${i.mode.toString(8).padStart(6,"0")})`);let a=i.mode&511;this.chmodSync(e,a)}async changeFilePromise(e,n,r={}){return Buffer.isBuffer(n)?this.changeFileBufferPromise(e,n,r):this.changeFileTextPromise(e,n,r)}async changeFileBufferPromise(e,n,{mode:r}={}){let s=Buffer.alloc(0);try{s=await this.readFilePromise(e)}catch{}Buffer.compare(s,n)!==0&&await this.writeFilePromise(e,n,{mode:r})}async changeFileTextPromise(e,n,{automaticNewlines:r,mode:s}={}){let i="";try{i=await this.readFilePromise(e,"utf8")}catch{}let o=r?ps(i,n):n;i!==o&&await this.writeFilePromise(e,o,{mode:s})}changeFileSync(e,n,r={}){return Buffer.isBuffer(n)?this.changeFileBufferSync(e,n,r):this.changeFileTextSync(e,n,r)}changeFileBufferSync(e,n,{mode:r}={}){let s=Buffer.alloc(0);try{s=this.readFileSync(e)}catch{}Buffer.compare(s,n)!==0&&this.writeFileSync(e,n,{mode:r})}changeFileTextSync(e,n,{automaticNewlines:r=!1,mode:s}={}){let i="";try{i=this.readFileSync(e,"utf8")}catch{}let o=r?ps(i,n):n;i!==o&&this.writeFileSync(e,o,{mode:s})}async movePromise(e,n){try{await this.renamePromise(e,n)}catch(r){if(r.code==="EXDEV")await this.copyPromise(n,e),await this.removePromise(e);else throw r}}moveSync(e,n){try{this.renameSync(e,n)}catch(r){if(r.code==="EXDEV")this.copySync(n,e),this.removeSync(e);else throw r}}async lockPromise(e,n){let r=`${e}.flock`,s=1e3/60,i=Date.now(),o=null,a=async()=>{let c;try{[c]=await this.readJsonPromise(r)}catch{return Date.now()-i<500}try{return process.kill(c,0),!0}catch{return!1}};for(;o===null;)try{o=await this.openPromise(r,"wx")}catch(c){if(c.code==="EEXIST"){if(!await a())try{await this.unlinkPromise(r);continue}catch{}if(Date.now()-i<60*1e3)await new Promise(f=>setTimeout(f,s));else throw new Error(`Couldn't acquire a lock in a reasonable time (via ${r})`)}else throw c}await this.writePromise(o,JSON.stringify([process.pid]));try{return await n()}finally{try{await this.closePromise(o),await this.unlinkPromise(r)}catch{}}}async readJsonPromise(e){let n=await this.readFilePromise(e,"utf8");try{return JSON.parse(n)}catch(r){throw r.message+=` (in ${e})`,r}}readJsonSync(e){let n=this.readFileSync(e,"utf8");try{return JSON.parse(n)}catch(r){throw r.message+=` (in ${e})`,r}}async writeJsonPromise(e,n,{compact:r=!1}={}){let s=r?0:2;return await this.writeFilePromise(e,`${JSON.stringify(n,null,s)}
`)}writeJsonSync(e,n,{compact:r=!1}={}){let s=r?0:2;return this.writeFileSync(e,`${JSON.stringify(n,null,s)}
`)}async preserveTimePromise(e,n){let r=await this.lstatPromise(e),s=await n();typeof s<"u"&&(e=s),await this.lutimesPromise(e,r.atime,r.mtime)}async preserveTimeSync(e,n){let r=this.lstatSync(e),s=n();typeof s<"u"&&(e=s),this.lutimesSync(e,r.atime,r.mtime)}},an=class extends lt{constructor(){super(R)}};function Fo(t){let e=t.match(/\r?\n/g);if(e===null)return bo.EOL;let n=e.filter(s=>s===`\r
`).length,r=e.length-n;return n>r?`\r
`:`
`}function ps(t,e){return e.replace(/\r?\n/g,Fo(t))}var cn=class extends lt{getExtractHint(e){return this.baseFs.getExtractHint(e)}resolve(e){return this.mapFromBase(this.baseFs.resolve(this.mapToBase(e)))}getRealPath(){return this.mapFromBase(this.baseFs.getRealPath())}async openPromise(e,n,r){return this.baseFs.openPromise(this.mapToBase(e),n,r)}openSync(e,n,r){return this.baseFs.openSync(this.mapToBase(e),n,r)}async opendirPromise(e,n){return Object.assign(await this.baseFs.opendirPromise(this.mapToBase(e),n),{path:e})}opendirSync(e,n){return Object.assign(this.baseFs.opendirSync(this.mapToBase(e),n),{path:e})}async readPromise(e,n,r,s,i){return await this.baseFs.readPromise(e,n,r,s,i)}readSync(e,n,r,s,i){return this.baseFs.readSync(e,n,r,s,i)}async writePromise(e,n,r,s,i){return typeof n=="string"?await this.baseFs.writePromise(e,n,r):await this.baseFs.writePromise(e,n,r,s,i)}writeSync(e,n,r,s,i){return typeof n=="string"?this.baseFs.writeSync(e,n,r):this.baseFs.writeSync(e,n,r,s,i)}async closePromise(e){return this.baseFs.closePromise(e)}closeSync(e){this.baseFs.closeSync(e)}createReadStream(e,n){return this.baseFs.createReadStream(e!==null?this.mapToBase(e):e,n)}createWriteStream(e,n){return this.baseFs.createWriteStream(e!==null?this.mapToBase(e):e,n)}async realpathPromise(e){return this.mapFromBase(await this.baseFs.realpathPromise(this.mapToBase(e)))}realpathSync(e){return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(e)))}async existsPromise(e){return this.baseFs.existsPromise(this.mapToBase(e))}existsSync(e){return this.baseFs.existsSync(this.mapToBase(e))}accessSync(e,n){return this.baseFs.accessSync(this.mapToBase(e),n)}async accessPromise(e,n){return this.baseFs.accessPromise(this.mapToBase(e),n)}async statPromise(e,n){return this.baseFs.statPromise(this.mapToBase(e),n)}statSync(e,n){return this.baseFs.statSync(this.mapToBase(e),n)}async fstatPromise(e,n){return this.baseFs.fstatPromise(e,n)}fstatSync(e,n){return this.baseFs.fstatSync(e,n)}lstatPromise(e,n){return this.baseFs.lstatPromise(this.mapToBase(e),n)}lstatSync(e,n){return this.baseFs.lstatSync(this.mapToBase(e),n)}async fchmodPromise(e,n){return this.baseFs.fchmodPromise(e,n)}fchmodSync(e,n){return this.baseFs.fchmodSync(e,n)}async chmodPromise(e,n){return this.baseFs.chmodPromise(this.mapToBase(e),n)}chmodSync(e,n){return this.baseFs.chmodSync(this.mapToBase(e),n)}async fchownPromise(e,n,r){return this.baseFs.fchownPromise(e,n,r)}fchownSync(e,n,r){return this.baseFs.fchownSync(e,n,r)}async chownPromise(e,n,r){return this.baseFs.chownPromise(this.mapToBase(e),n,r)}chownSync(e,n,r){return this.baseFs.chownSync(this.mapToBase(e),n,r)}async renamePromise(e,n){return this.baseFs.renamePromise(this.mapToBase(e),this.mapToBase(n))}renameSync(e,n){return this.baseFs.renameSync(this.mapToBase(e),this.mapToBase(n))}async copyFilePromise(e,n,r=0){return this.baseFs.copyFilePromise(this.mapToBase(e),this.mapToBase(n),r)}copyFileSync(e,n,r=0){return this.baseFs.copyFileSync(this.mapToBase(e),this.mapToBase(n),r)}async appendFilePromise(e,n,r){return this.baseFs.appendFilePromise(this.fsMapToBase(e),n,r)}appendFileSync(e,n,r){return this.baseFs.appendFileSync(this.fsMapToBase(e),n,r)}async writeFilePromise(e,n,r){return this.baseFs.writeFilePromise(this.fsMapToBase(e),n,r)}writeFileSync(e,n,r){return this.baseFs.writeFileSync(this.fsMapToBase(e),n,r)}async unlinkPromise(e){return this.baseFs.unlinkPromise(this.mapToBase(e))}unlinkSync(e){return this.baseFs.unlinkSync(this.mapToBase(e))}async utimesPromise(e,n,r){return this.baseFs.utimesPromise(this.mapToBase(e),n,r)}utimesSync(e,n,r){return this.baseFs.utimesSync(this.mapToBase(e),n,r)}async lutimesPromise(e,n,r){return this.baseFs.lutimesPromise(this.mapToBase(e),n,r)}lutimesSync(e,n,r){return this.baseFs.lutimesSync(this.mapToBase(e),n,r)}async mkdirPromise(e,n){return this.baseFs.mkdirPromise(this.mapToBase(e),n)}mkdirSync(e,n){return this.baseFs.mkdirSync(this.mapToBase(e),n)}async rmdirPromise(e,n){return this.baseFs.rmdirPromise(this.mapToBase(e),n)}rmdirSync(e,n){return this.baseFs.rmdirSync(this.mapToBase(e),n)}async linkPromise(e,n){return this.baseFs.linkPromise(this.mapToBase(e),this.mapToBase(n))}linkSync(e,n){return this.baseFs.linkSync(this.mapToBase(e),this.mapToBase(n))}async symlinkPromise(e,n,r){let s=this.mapToBase(n);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkPromise(this.mapToBase(e),s,r);let i=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(n),e)),o=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(s),i);return this.baseFs.symlinkPromise(o,s,r)}symlinkSync(e,n,r){let s=this.mapToBase(n);if(this.pathUtils.isAbsolute(e))return this.baseFs.symlinkSync(this.mapToBase(e),s,r);let i=this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(n),e)),o=this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(s),i);return this.baseFs.symlinkSync(o,s,r)}async readFilePromise(e,n){return this.baseFs.readFilePromise(this.fsMapToBase(e),n)}readFileSync(e,n){return this.baseFs.readFileSync(this.fsMapToBase(e),n)}readdirPromise(e,n){return this.baseFs.readdirPromise(this.mapToBase(e),n)}readdirSync(e,n){return this.baseFs.readdirSync(this.mapToBase(e),n)}async readlinkPromise(e){return this.mapFromBase(await this.baseFs.readlinkPromise(this.mapToBase(e)))}readlinkSync(e){return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(e)))}async truncatePromise(e,n){return this.baseFs.truncatePromise(this.mapToBase(e),n)}truncateSync(e,n){return this.baseFs.truncateSync(this.mapToBase(e),n)}async ftruncatePromise(e,n){return this.baseFs.ftruncatePromise(e,n)}ftruncateSync(e,n){return this.baseFs.ftruncateSync(e,n)}watch(e,n,r){return this.baseFs.watch(this.mapToBase(e),n,r)}watchFile(e,n,r){return this.baseFs.watchFile(this.mapToBase(e),n,r)}unwatchFile(e,n){return this.baseFs.unwatchFile(this.mapToBase(e),n)}fsMapToBase(e){return typeof e=="number"?e:this.mapToBase(e)}},ln=class extends an{constructor(e=So.default){super(),this.realFs=e}getExtractHint(){return!1}getRealPath(){return sn.root}resolve(e){return R.resolve(e)}async openPromise(e,n,r){return await new Promise((s,i)=>{this.realFs.open(m.fromPortablePath(e),n,r,this.makeCallback(s,i))})}openSync(e,n,r){return this.realFs.openSync(m.fromPortablePath(e),n,r)}async opendirPromise(e,n){return await new Promise((r,s)=>{typeof n<"u"?this.realFs.opendir(m.fromPortablePath(e),n,this.makeCallback(r,s)):this.realFs.opendir(m.fromPortablePath(e),this.makeCallback(r,s))}).then(r=>Object.defineProperty(r,"path",{value:e,configurable:!0,writable:!0}))}opendirSync(e,n){let r=typeof n<"u"?this.realFs.opendirSync(m.fromPortablePath(e),n):this.realFs.opendirSync(m.fromPortablePath(e));return Object.defineProperty(r,"path",{value:e,configurable:!0,writable:!0})}async readPromise(e,n,r=0,s=0,i=-1){return await new Promise((o,a)=>{this.realFs.read(e,n,r,s,i,(c,f)=>{c?a(c):o(f)})})}readSync(e,n,r,s,i){return this.realFs.readSync(e,n,r,s,i)}async writePromise(e,n,r,s,i){return await new Promise((o,a)=>typeof n=="string"?this.realFs.write(e,n,r,this.makeCallback(o,a)):this.realFs.write(e,n,r,s,i,this.makeCallback(o,a)))}writeSync(e,n,r,s,i){return typeof n=="string"?this.realFs.writeSync(e,n,r):this.realFs.writeSync(e,n,r,s,i)}async closePromise(e){await new Promise((n,r)=>{this.realFs.close(e,this.makeCallback(n,r))})}closeSync(e){this.realFs.closeSync(e)}createReadStream(e,n){let r=e!==null?m.fromPortablePath(e):e;return this.realFs.createReadStream(r,n)}createWriteStream(e,n){let r=e!==null?m.fromPortablePath(e):e;return this.realFs.createWriteStream(r,n)}async realpathPromise(e){return await new Promise((n,r)=>{this.realFs.realpath(m.fromPortablePath(e),{},this.makeCallback(n,r))}).then(n=>m.toPortablePath(n))}realpathSync(e){return m.toPortablePath(this.realFs.realpathSync(m.fromPortablePath(e),{}))}async existsPromise(e){return await new Promise(n=>{this.realFs.exists(m.fromPortablePath(e),n)})}accessSync(e,n){return this.realFs.accessSync(m.fromPortablePath(e),n)}async accessPromise(e,n){return await new Promise((r,s)=>{this.realFs.access(m.fromPortablePath(e),n,this.makeCallback(r,s))})}existsSync(e){return this.realFs.existsSync(m.fromPortablePath(e))}async statPromise(e,n){return await new Promise((r,s)=>{n?this.realFs.stat(m.fromPortablePath(e),n,this.makeCallback(r,s)):this.realFs.stat(m.fromPortablePath(e),this.makeCallback(r,s))})}statSync(e,n){return n?this.realFs.statSync(m.fromPortablePath(e),n):this.realFs.statSync(m.fromPortablePath(e))}async fstatPromise(e,n){return await new Promise((r,s)=>{n?this.realFs.fstat(e,n,this.makeCallback(r,s)):this.realFs.fstat(e,this.makeCallback(r,s))})}fstatSync(e,n){return n?this.realFs.fstatSync(e,n):this.realFs.fstatSync(e)}async lstatPromise(e,n){return await new Promise((r,s)=>{n?this.realFs.lstat(m.fromPortablePath(e),n,this.makeCallback(r,s)):this.realFs.lstat(m.fromPortablePath(e),this.makeCallback(r,s))})}lstatSync(e,n){return n?this.realFs.lstatSync(m.fromPortablePath(e),n):this.realFs.lstatSync(m.fromPortablePath(e))}async fchmodPromise(e,n){return await new Promise((r,s)=>{this.realFs.fchmod(e,n,this.makeCallback(r,s))})}fchmodSync(e,n){return this.realFs.fchmodSync(e,n)}async chmodPromise(e,n){return await new Promise((r,s)=>{this.realFs.chmod(m.fromPortablePath(e),n,this.makeCallback(r,s))})}chmodSync(e,n){return this.realFs.chmodSync(m.fromPortablePath(e),n)}async fchownPromise(e,n,r){return await new Promise((s,i)=>{this.realFs.fchown(e,n,r,this.makeCallback(s,i))})}fchownSync(e,n,r){return this.realFs.fchownSync(e,n,r)}async chownPromise(e,n,r){return await new Promise((s,i)=>{this.realFs.chown(m.fromPortablePath(e),n,r,this.makeCallback(s,i))})}chownSync(e,n,r){return this.realFs.chownSync(m.fromPortablePath(e),n,r)}async renamePromise(e,n){return await new Promise((r,s)=>{this.realFs.rename(m.fromPortablePath(e),m.fromPortablePath(n),this.makeCallback(r,s))})}renameSync(e,n){return this.realFs.renameSync(m.fromPortablePath(e),m.fromPortablePath(n))}async copyFilePromise(e,n,r=0){return await new Promise((s,i)=>{this.realFs.copyFile(m.fromPortablePath(e),m.fromPortablePath(n),r,this.makeCallback(s,i))})}copyFileSync(e,n,r=0){return this.realFs.copyFileSync(m.fromPortablePath(e),m.fromPortablePath(n),r)}async appendFilePromise(e,n,r){return await new Promise((s,i)=>{let o=typeof e=="string"?m.fromPortablePath(e):e;r?this.realFs.appendFile(o,n,r,this.makeCallback(s,i)):this.realFs.appendFile(o,n,this.makeCallback(s,i))})}appendFileSync(e,n,r){let s=typeof e=="string"?m.fromPortablePath(e):e;r?this.realFs.appendFileSync(s,n,r):this.realFs.appendFileSync(s,n)}async writeFilePromise(e,n,r){return await new Promise((s,i)=>{let o=typeof e=="string"?m.fromPortablePath(e):e;r?this.realFs.writeFile(o,n,r,this.makeCallback(s,i)):this.realFs.writeFile(o,n,this.makeCallback(s,i))})}writeFileSync(e,n,r){let s=typeof e=="string"?m.fromPortablePath(e):e;r?this.realFs.writeFileSync(s,n,r):this.realFs.writeFileSync(s,n)}async unlinkPromise(e){return await new Promise((n,r)=>{this.realFs.unlink(m.fromPortablePath(e),this.makeCallback(n,r))})}unlinkSync(e){return this.realFs.unlinkSync(m.fromPortablePath(e))}async utimesPromise(e,n,r){return await new Promise((s,i)=>{this.realFs.utimes(m.fromPortablePath(e),n,r,this.makeCallback(s,i))})}utimesSync(e,n,r){this.realFs.utimesSync(m.fromPortablePath(e),n,r)}async lutimesPromise(e,n,r){return await new Promise((s,i)=>{this.realFs.lutimes(m.fromPortablePath(e),n,r,this.makeCallback(s,i))})}lutimesSync(e,n,r){this.realFs.lutimesSync(m.fromPortablePath(e),n,r)}async mkdirPromise(e,n){return await new Promise((r,s)=>{this.realFs.mkdir(m.fromPortablePath(e),n,this.makeCallback(r,s))})}mkdirSync(e,n){return this.realFs.mkdirSync(m.fromPortablePath(e),n)}async rmdirPromise(e,n){return await new Promise((r,s)=>{n?this.realFs.rmdir(m.fromPortablePath(e),n,this.makeCallback(r,s)):this.realFs.rmdir(m.fromPortablePath(e),this.makeCallback(r,s))})}rmdirSync(e,n){return this.realFs.rmdirSync(m.fromPortablePath(e),n)}async linkPromise(e,n){return await new Promise((r,s)=>{this.realFs.link(m.fromPortablePath(e),m.fromPortablePath(n),this.makeCallback(r,s))})}linkSync(e,n){return this.realFs.linkSync(m.fromPortablePath(e),m.fromPortablePath(n))}async symlinkPromise(e,n,r){return await new Promise((s,i)=>{this.realFs.symlink(m.fromPortablePath(e.replace(/\/+$/,"")),m.fromPortablePath(n),r,this.makeCallback(s,i))})}symlinkSync(e,n,r){return this.realFs.symlinkSync(m.fromPortablePath(e.replace(/\/+$/,"")),m.fromPortablePath(n),r)}async readFilePromise(e,n){return await new Promise((r,s)=>{let i=typeof e=="string"?m.fromPortablePath(e):e;this.realFs.readFile(i,n,this.makeCallback(r,s))})}readFileSync(e,n){let r=typeof e=="string"?m.fromPortablePath(e):e;return this.realFs.readFileSync(r,n)}async readdirPromise(e,n){return await new Promise((r,s)=>{n?this.realFs.readdir(m.fromPortablePath(e),n,this.makeCallback(r,s)):this.realFs.readdir(m.fromPortablePath(e),this.makeCallback(i=>r(i),s))})}readdirSync(e,n){return n?this.realFs.readdirSync(m.fromPortablePath(e),n):this.realFs.readdirSync(m.fromPortablePath(e))}async readlinkPromise(e){return await new Promise((n,r)=>{this.realFs.readlink(m.fromPortablePath(e),this.makeCallback(n,r))}).then(n=>m.toPortablePath(n))}readlinkSync(e){return m.toPortablePath(this.realFs.readlinkSync(m.fromPortablePath(e)))}async truncatePromise(e,n){return await new Promise((r,s)=>{this.realFs.truncate(m.fromPortablePath(e),n,this.makeCallback(r,s))})}truncateSync(e,n){return this.realFs.truncateSync(m.fromPortablePath(e),n)}async ftruncatePromise(e,n){return await new Promise((r,s)=>{this.realFs.ftruncate(e,n,this.makeCallback(r,s))})}ftruncateSync(e,n){return this.realFs.ftruncateSync(e,n)}watch(e,n,r){return this.realFs.watch(m.fromPortablePath(e),n,r)}watchFile(e,n,r){return this.realFs.watchFile(m.fromPortablePath(e),n,r)}unwatchFile(e,n){return this.realFs.unwatchFile(m.fromPortablePath(e),n)}makeCallback(e,n){return(r,s)=>{r?n(r):e(s)}}},Uo=/^[0-9]+$/,_t=/^(\/(?:[^/]+\/)*?(?:\$\$virtual|__virtual__))((?:\/((?:[^/]+-)?[a-f0-9]+)(?:\/([^/]+))?)?((?:\/.*)?))$/,Co=/^([^/]+-)?[a-f0-9]+$/,$=class extends cn{constructor({baseFs:e=new ln}={}){super(R),this.baseFs=e}static makeVirtualPath(e,n,r){if(R.basename(e)!=="__virtual__")throw new Error('Assertion failed: Virtual folders must be named "__virtual__"');if(!R.basename(n).match(Co))throw new Error("Assertion failed: Virtual components must be ended by an hexadecimal hash");let i=R.relative(R.dirname(e),r).split("/"),o=0;for(;o<i.length&&i[o]==="..";)o+=1;let a=i.slice(o);return R.join(e,n,String(o),...a)}static resolveVirtual(e){let n=e.match(_t);if(!n||!n[3]&&n[5])return e;let r=R.dirname(n[1]);if(!n[3]||!n[4])return r;if(!Uo.test(n[4]))return e;let i=Number(n[4]),o="../".repeat(i),a=n[5]||".";return $.resolveVirtual(R.join(r,o,a))}getExtractHint(e){return this.baseFs.getExtractHint(e)}getRealPath(){return this.baseFs.getRealPath()}realpathSync(e){let n=e.match(_t);if(!n)return this.baseFs.realpathSync(e);if(!n[5])return e;let r=this.baseFs.realpathSync(this.mapToBase(e));return $.makeVirtualPath(n[1],n[3],r)}async realpathPromise(e){let n=e.match(_t);if(!n)return await this.baseFs.realpathPromise(e);if(!n[5])return e;let r=await this.baseFs.realpathPromise(this.mapToBase(e));return $.makeVirtualPath(n[1],n[3],r)}mapToBase(e){if(e==="")return e;if(this.pathUtils.isAbsolute(e))return $.resolveVirtual(e);let n=$.resolveVirtual(this.baseFs.resolve(sn.dot)),r=$.resolveVirtual(this.baseFs.resolve(e));return R.relative(n,r)||sn.dot}mapFromBase(e){return e}},Ls={DEFAULT:{collapsed:!1,next:{["*"]:"DEFAULT"}},TOP_LEVEL:{collapsed:!1,next:{fallbackExclusionList:"FALLBACK_EXCLUSION_LIST",packageRegistryData:"PACKAGE_REGISTRY_DATA",["*"]:"DEFAULT"}},FALLBACK_EXCLUSION_LIST:{collapsed:!1,next:{["*"]:"FALLBACK_EXCLUSION_ENTRIES"}},FALLBACK_EXCLUSION_ENTRIES:{collapsed:!0,next:{["*"]:"FALLBACK_EXCLUSION_DATA"}},FALLBACK_EXCLUSION_DATA:{collapsed:!0,next:{["*"]:"DEFAULT"}},PACKAGE_REGISTRY_DATA:{collapsed:!1,next:{["*"]:"PACKAGE_REGISTRY_ENTRIES"}},PACKAGE_REGISTRY_ENTRIES:{collapsed:!0,next:{["*"]:"PACKAGE_STORE_DATA"}},PACKAGE_STORE_DATA:{collapsed:!1,next:{["*"]:"PACKAGE_STORE_ENTRIES"}},PACKAGE_STORE_ENTRIES:{collapsed:!0,next:{["*"]:"PACKAGE_INFORMATION_DATA"}},PACKAGE_INFORMATION_DATA:{collapsed:!1,next:{packageDependencies:"PACKAGE_DEPENDENCIES",["*"]:"DEFAULT"}},PACKAGE_DEPENDENCIES:{collapsed:!1,next:{["*"]:"PACKAGE_DEPENDENCY"}},PACKAGE_DEPENDENCY:{collapsed:!0,next:{["*"]:"DEFAULT"}}};function Mo(t,e,n){let r="";r+="[";for(let s=0,i=t.length;s<i;++s)r+=ht(String(s),t[s],e,n).replace(/^ +/g,""),s+1<i&&(r+=", ");return r+="]",r}function Ho(t,e,n){let r=`${n}  `,s="";s+=n,s+=`[
`;for(let i=0,o=t.length;i<o;++i)s+=r+ht(String(i),t[i],e,r).replace(/^ +/,""),i+1<o&&(s+=","),s+=`
`;return s+=n,s+="]",s}function Go(t,e,n){let r=Object.keys(t),s="";s+="{";for(let i=0,o=r.length,a=0;i<o;++i){let c=r[i],f=t[c];typeof f>"u"||(a!==0&&(s+=", "),s+=JSON.stringify(c),s+=": ",s+=ht(c,f,e,n).replace(/^ +/g,""),a+=1)}return s+="}",s}function Bo(t,e,n){let r=Object.keys(t),s=`${n}  `,i="";i+=n,i+=`{
`;let o=0;for(let a=0,c=r.length;a<c;++a){let f=r[a],y=t[f];typeof y>"u"||(o!==0&&(i+=",",i+=`
`),i+=s,i+=JSON.stringify(f),i+=": ",i+=ht(f,y,e,s).replace(/^ +/g,""),o+=1)}return o!==0&&(i+=`
`),i+=n,i+="}",i}function ht(t,e,n,r){let{next:s}=Ls[n],i=s[t]||s["*"];return Rs(e,i,r)}function Rs(t,e,n){let{collapsed:r}=Ls[e];return Array.isArray(t)?r?Mo(t,e,n):Ho(t,e,n):typeof t=="object"&&t!==null?r?Go(t,e,n):Bo(t,e,n):JSON.stringify(t)}function Ns(t){return Rs(t,"TOP_LEVEL","")}function Ge(t,e){let n=Array.from(t);Array.isArray(e)||(e=[e]);let r=[];for(let i of e)r.push(n.map(o=>i(o)));let s=n.map((i,o)=>o);return s.sort((i,o)=>{for(let a of r){let c=a[i]<a[o]?-1:a[i]>a[o]?1:0;if(c!==0)return c}return 0}),s.map(i=>n[i])}function jo(t){let e=new Map,n=Ge(t.fallbackExclusionList||[],[({name:r,reference:s})=>r,({name:r,reference:s})=>s]);for(let{name:r,reference:s}of n){let i=e.get(r);typeof i>"u"&&e.set(r,i=new Set),i.add(s)}return Array.from(e).map(([r,s])=>[r,Array.from(s)])}function Zo(t){return Ge(t.fallbackPool||[],([e])=>e)}function Xo(t){let e=[];for(let[n,r]of Ge(t.packageRegistry,([s])=>s===null?"0":`1${s}`)){let s=[];e.push([n,s]);for(let[i,{packageLocation:o,packageDependencies:a,packagePeers:c,linkType:f,discardFromLookup:y}]of Ge(r,([l])=>l===null?"0":`1${l}`)){let l=[];n!==null&&i!==null&&!a.has(n)&&l.push([n,i]);for(let[T,u]of Ge(a.entries(),([L])=>L))l.push([T,u]);let P=c&&c.size>0?Array.from(c):void 0,w=y||void 0;s.push([i,{packageLocation:o,packageDependencies:l,packagePeers:P,linkType:f,discardFromLookup:w}])}}return e}function mn(t){return{__info:["This file is automatically generated. Do not touch it, or risk","your modifications being lost."],dependencyTreeRoots:t.dependencyTreeRoots,enableTopLevelFallback:t.enableTopLevelFallback||!1,ignorePatternData:t.ignorePattern||null,fallbackExclusionList:jo(t),fallbackPool:Zo(t),packageRegistryData:Xo(t)}}var $t,Jo=()=>(typeof $t>"u"&&($t=ks.default.brotliDecompressSync(Buffer.from("","base64")).toString()),$t);function dn(t,e){return[t?`${t}
`:"",`/* eslint-disable */
`,`"use strict";
`,`
`,e,`
`,Jo()].join("")}function zo(t){return JSON.stringify(t,null,2)}function qo(t){return`'${t.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(/\n/g,`\\
`)}'`}function Wo(t){return[`const RAW_RUNTIME_STATE =
`,`${qo(Ns(t))};

`,`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(JSON.parse(RAW_RUNTIME_STATE), {basePath: basePath || __dirname});
`,`}
`].join("")}function Vo(){return[`function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,`  return hydrateRuntimeState(require(${JSON.stringify(`./${ct.pnpData}`)}), {basePath: basePath || __dirname});
`,`}
`].join("")}function Yo(t){let e=mn(t),n=Wo(e);return dn(t.shebang,n)}function Ko(t){let e=mn(t),n=Vo(),r=dn(t.shebang,n);return{dataFile:zo(e),loaderFile:r}}function Os(t,{basePath:e}){let n=m.toPortablePath(e),r=R.resolve(n),s=t.ignorePatternData!==null?new RegExp(t.ignorePatternData):null,i=new Map,o=new Map(t.packageRegistryData.map(([l,P])=>[l,new Map(P.map(([w,T])=>{if(l===null!=(w===null))throw new Error("Assertion failed: The name and reference should be null, or neither should");let u=T.discardFromLookup??!1,L={name:l,reference:w},E=i.get(T.packageLocation);E?(E.discardFromLookup=E.discardFromLookup&&u,u||(E.locator=L)):i.set(T.packageLocation,{locator:L,discardFromLookup:u});let F=null;return[w,{packageDependencies:new Map(T.packageDependencies),packagePeers:new Set(T.packagePeers),linkType:T.linkType,discardFromLookup:u,get packageLocation(){return F||(F=R.join(r,T.packageLocation))}}]}))])),a=new Map(t.fallbackExclusionList.map(([l,P])=>[l,new Set(P)])),c=new Map(t.fallbackPool),f=t.dependencyTreeRoots,y=t.enableTopLevelFallback;return{basePath:n,dependencyTreeRoots:f,enableTopLevelFallback:y,fallbackExclusionList:a,fallbackPool:c,ignorePattern:s,packageLocatorsByLocations:i,packageRegistry:o}}var As=Array.isArray,un=JSON.stringify,pt=Object.getOwnPropertyNames,mt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),ms=(t,e)=>RegExp.prototype.exec.call(t,e),ds=(t,...e)=>RegExp.prototype[Symbol.replace].apply(t,e),xe=(t,...e)=>String.prototype.endsWith.apply(t,e),Ds=(t,...e)=>String.prototype.includes.apply(t,e),Fs=(t,...e)=>String.prototype.lastIndexOf.apply(t,e),ut=(t,...e)=>String.prototype.indexOf.apply(t,e),Qo=(t,...e)=>String.prototype.replace.apply(t,e),me=(t,...e)=>String.prototype.slice.apply(t,e),ue=(t,...e)=>String.prototype.startsWith.apply(t,e),_o=Map,$o=JSON.parse;function je(t,e,n){return class extends n{constructor(...r){super(e(...r)),this.code=t,this.name=`${n.name} [${t}]`}}}var ea=je("ERR_PACKAGE_IMPORT_NOT_DEFINED",(t,e,n)=>`Package import specifier "${t}" is not defined${e?` in package ${e}package.json`:""} imported from ${n}`,TypeError),Us=je("ERR_INVALID_MODULE_SPECIFIER",(t,e,n=void 0)=>`Invalid module "${t}" ${e}${n?` imported from ${n}`:""}`,TypeError),ta=je("ERR_INVALID_PACKAGE_TARGET",(t,e,n,r=!1,s=void 0)=>{let i=typeof n=="string"&&!r&&n.length&&!ue(n,"./");return e==="."?(wo.default(r===!1),`Invalid "exports" main target ${un(n)} defined in the package config ${t}package.json${s?` imported from ${s}`:""}${i?'; targets must start with "./"':""}`):`Invalid "${r?"imports":"exports"}" target ${un(n)} defined for '${e}' in the package config ${t}package.json${s?` imported from ${s}`:""}${i?'; targets must start with "./"':""}`},Error),yn=je("ERR_INVALID_PACKAGE_CONFIG",(t,e,n)=>`Invalid package config ${t}${e?` while importing ${e}`:""}${n?`. ${n}`:""}`,Error),na=je("ERR_PACKAGE_PATH_NOT_EXPORTED",(t,e,n=void 0)=>e==="."?`No "exports" main defined in ${t}package.json${n?` imported from ${n}`:""}`:`Package subpath '${e}' is not defined by "exports" in ${t}package.json${n?` imported from ${n}`:""}`,Error);function ra(t,e){let n=Object.create(null);for(let r=0;r<e.length;r++){let s=e[r];mt(t,s)&&(n[s]=t[s])}return n}var ot=new _o;function sa(t,e,n,r){let s=ot.get(t);if(s!==void 0)return s;let i=r(t);if(i===void 0){let w={pjsonPath:t,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return ot.set(t,w),w}let o;try{o=$o(i)}catch(w){throw new yn(t,(n?`"${e}" from `:"")+C.fileURLToPath(n||e),w.message)}let{imports:a,main:c,name:f,type:y}=ra(o,["imports","main","name","type"]),l=mt(o,"exports")?o.exports:void 0;(typeof a!="object"||a===null)&&(a=void 0),typeof c!="string"&&(c=void 0),typeof f!="string"&&(f=void 0),y!=="module"&&y!=="commonjs"&&(y="none");let P={pjsonPath:t,exists:!0,main:c,name:f,type:y,exports:l,imports:a};return ot.set(t,P),P}function ia(t,e){let n=new URL("./package.json",t);for(;;){let i=n.pathname;if(xe(i,"node_modules/package.json"))break;let o=sa(C.fileURLToPath(n),t,void 0,e);if(o.exists)return o;let a=n;if(n=new URL("../package.json",n),n.pathname===a.pathname)break}let r=C.fileURLToPath(n),s={pjsonPath:r,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return ot.set(r,s),s}function oa(t,e,n){throw new ea(t,e&&C.fileURLToPath(new URL(".",e)),C.fileURLToPath(n))}function aa(t,e,n,r){let s=`request is not a valid subpath for the "${n?"imports":"exports"}" resolution of ${C.fileURLToPath(e)}`;throw new Us(t,s,r&&C.fileURLToPath(r))}function He(t,e,n,r,s){throw typeof e=="object"&&e!==null?e=un(e,null,""):e=`${e}`,new ta(C.fileURLToPath(new URL(".",n)),t,e,r,s&&C.fileURLToPath(s))}var ys=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,gs=/\*/g;function ca(t,e,n,r,s,i,o,a){if(e!==""&&!i&&t[t.length-1]!=="/"&&He(n,t,r,o,s),!ue(t,"./")){if(o&&!ue(t,"../")&&!ue(t,"/")){let l=!1;try{new URL(t),l=!0}catch{}if(!l)return i?ds(gs,t,()=>e):t+e}He(n,t,r,o,s)}ms(ys,me(t,2))!==null&&He(n,t,r,o,s);let c=new URL(t,r),f=c.pathname,y=new URL(".",r).pathname;if(ue(f,y)||He(n,t,r,o,s),e==="")return c;if(ms(ys,e)!==null){let l=i?Qo(n,"*",()=>e):n+e;aa(l,r,o,s)}return i?new URL(ds(gs,c.href,()=>e)):new URL(e,c)}function la(t){let e=+t;return`${e}`!==t?!1:e>=0&&e<4294967295}function Ee(t,e,n,r,s,i,o,a){if(typeof e=="string")return ca(e,n,r,t,s,i,o);if(As(e)){if(e.length===0)return null;let c;for(let f=0;f<e.length;f++){let y=e[f],l;try{l=Ee(t,y,n,r,s,i,o,a)}catch(P){if(c=P,P.code==="ERR_INVALID_PACKAGE_TARGET")continue;throw P}if(l!==void 0){if(l===null){c=null;continue}return l}}if(c==null)return c;throw c}else if(typeof e=="object"&&e!==null){let c=pt(e);for(let f=0;f<c.length;f++){let y=c[f];if(la(y))throw new yn(C.fileURLToPath(t),s,'"exports" cannot contain numeric property keys.')}for(let f=0;f<c.length;f++){let y=c[f];if(y==="default"||a.has(y)){let l=e[y],P=Ee(t,l,n,r,s,i,o,a);if(P===void 0)continue;return P}}return}else if(e===null)return null;He(r,e,t,o,s)}function Cs(t,e){let n=ut(t,"*"),r=ut(e,"*"),s=n===-1?t.length:n+1,i=r===-1?e.length:r+1;return s>i?-1:i>s||n===-1?1:r===-1||t.length>e.length?-1:e.length>t.length?1:0}function ua(t,e,n){if(typeof t=="string"||As(t))return!0;if(typeof t!="object"||t===null)return!1;let r=pt(t),s=!1,i=0;for(let o=0;o<r.length;o++){let a=r[o],c=a===""||a[0]!==".";if(i++===0)s=c;else if(s!==c)throw new yn(C.fileURLToPath(e),n,`"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`)}return s}function en(t,e,n){throw new na(C.fileURLToPath(new URL(".",e)),t,n&&C.fileURLToPath(n))}var Ps=new Set;function fa(t,e,n){let r=C.fileURLToPath(e);Ps.has(r+"|"+t)||(Ps.add(r+"|"+t),process.emitWarning(`Use of deprecated trailing slash pattern mapping "${t}" in the "exports" field module resolution of the package at ${r}${n?` imported from ${C.fileURLToPath(n)}`:""}. Mapping specifiers ending in "/" is no longer supported.`,"DeprecationWarning","DEP0155"))}function ha({packageJSONUrl:t,packageSubpath:e,exports:n,base:r,conditions:s}){if(ua(n,t,r)&&(n={".":n}),mt(n,e)&&!Ds(e,"*")&&!xe(e,"/")){let c=n[e],f=Ee(t,c,"",e,r,!1,!1,s);return f==null&&en(e,t,r),f}let i="",o,a=pt(n);for(let c=0;c<a.length;c++){let f=a[c],y=ut(f,"*");if(y!==-1&&ue(e,me(f,0,y))){xe(e,"/")&&fa(e,t,r);let l=me(f,y+1);e.length>=f.length&&xe(e,l)&&Cs(i,f)===1&&Fs(f,"*")===y&&(i=f,o=me(e,y,e.length-l.length))}}if(i){let c=n[i],f=Ee(t,c,o,i,r,!0,!1,s);return f==null&&en(e,t,r),f}en(e,t,r)}function pa({name:t,base:e,conditions:n,readFileSyncFn:r}){if(t==="#"||ue(t,"#/")||xe(t,"/")){let o="is not a valid internal imports specifier name";throw new Us(t,o,C.fileURLToPath(e))}let s,i=ia(e,r);if(i.exists){s=C.pathToFileURL(i.pjsonPath);let o=i.imports;if(o)if(mt(o,t)&&!Ds(t,"*")){let a=Ee(s,o[t],"",t,e,!1,!0,n);if(a!=null)return a}else{let a="",c,f=pt(o);for(let y=0;y<f.length;y++){let l=f[y],P=ut(l,"*");if(P!==-1&&ue(t,me(l,0,P))){let w=me(l,P+1);t.length>=l.length&&xe(t,w)&&Cs(a,l)===1&&Fs(l,"*")===P&&(a=l,c=me(t,P,t.length-w.length))}}if(a){let y=o[a],l=Ee(s,y,c,a,e,!0,!0,n);if(l!=null)return l}}}oa(t,s,e)}var H=(t=>(t.API_ERROR="API_ERROR",t.BUILTIN_NODE_RESOLUTION_FAILED="BUILTIN_NODE_RESOLUTION_FAILED",t.EXPORTS_RESOLUTION_FAILED="EXPORTS_RESOLUTION_FAILED",t.MISSING_DEPENDENCY="MISSING_DEPENDENCY",t.MISSING_PEER_DEPENDENCY="MISSING_PEER_DEPENDENCY",t.QUALIFIED_PATH_RESOLUTION_FAILED="QUALIFIED_PATH_RESOLUTION_FAILED",t.INTERNAL="INTERNAL",t.UNDECLARED_DEPENDENCY="UNDECLARED_DEPENDENCY",t.UNSUPPORTED="UNSUPPORTED",t))(H||{}),ma=new Set(["BUILTIN_NODE_RESOLUTION_FAILED","MISSING_DEPENDENCY","MISSING_PEER_DEPENDENCY","QUALIFIED_PATH_RESOLUTION_FAILED","UNDECLARED_DEPENDENCY"]);function G(t,e,n={},r){r??=ma.has(t)?"MODULE_NOT_FOUND":t;let s={configurable:!0,writable:!0,enumerable:!1};return Object.defineProperties(new Error(e),{code:{...s,value:r},pnpCode:{...s,value:t},data:{...s,value:n}})}function re(t){return m.normalize(m.fromPortablePath(t))}var fn=Symbol("arg flag"),q=class extends Error{constructor(e,n){super(e),this.name="ArgError",this.code=n,Object.setPrototypeOf(this,q.prototype)}};function Be(t,{argv:e=process.argv.slice(2),permissive:n=!1,stopAtPositional:r=!1}={}){if(!t)throw new q("argument specification object is required","ARG_CONFIG_NO_SPEC");let s={_:[]},i={},o={};for(let a of Object.keys(t)){if(!a)throw new q("argument key cannot be an empty string","ARG_CONFIG_EMPTY_KEY");if(a[0]!=="-")throw new q(`argument key must start with '-' but found: '${a}'`,"ARG_CONFIG_NONOPT_KEY");if(a.length===1)throw new q(`argument key must have a name; singular '-' keys are not allowed: ${a}`,"ARG_CONFIG_NONAME_KEY");if(typeof t[a]=="string"){i[a]=t[a];continue}let c=t[a],f=!1;if(Array.isArray(c)&&c.length===1&&typeof c[0]=="function"){let[y]=c;c=(l,P,w=[])=>(w.push(y(l,P,w[w.length-1])),w),f=y===Boolean||y[fn]===!0}else if(typeof c=="function")f=c===Boolean||c[fn]===!0;else throw new q(`type missing or not a function or valid array type: ${a}`,"ARG_CONFIG_VAD_TYPE");if(a[1]!=="-"&&a.length>2)throw new q(`short argument keys (with a single hyphen) must have only one character: ${a}`,"ARG_CONFIG_SHORTOPT_TOOLONG");o[a]=[c,f]}for(let a=0,c=e.length;a<c;a++){let f=e[a];if(r&&s._.length>0){s._=s._.concat(e.slice(a));break}if(f==="--"){s._=s._.concat(e.slice(a+1));break}if(f.length>1&&f[0]==="-"){let y=f[1]==="-"||f.length===2?[f]:f.slice(1).split("").map(l=>`-${l}`);for(let l=0;l<y.length;l++){let P=y[l],[w,T]=P[1]==="-"?P.split(/=(.*)/,2):[P,void 0],u=w;for(;u in i;)u=i[u];if(!(u in o))if(n){s._.push(P);continue}else throw new q(`unknown or unexpected option: ${w}`,"ARG_UNKNOWN_OPTION");let[L,E]=o[u];if(!E&&l+1<y.length)throw new q(`option requires argument (but was followed by another short argument): ${w}`,"ARG_MISSING_REQUIRED_SHORTARG");if(E)s[u]=L(!0,u,s[u]);else if(T===void 0){if(e.length<a+2||e[a+1].length>1&&e[a+1][0]==="-"&&!(e[a+1].match(/^-?\d*(\.(?=\d))?\d*$/)&&(L===Number||typeof BigInt<"u"&&L===BigInt))){let F=w===u?"":` (alias for ${u})`;throw new q(`option requires argument: ${w}${F}`,"ARG_MISSING_REQUIRED_LONGARG")}s[u]=L(e[a+1],u,s[u]),++a}else s[u]=L(T,u,s[u])}}else s._.push(f)}return s}Be.flag=t=>(t[fn]=!0,t);Be.COUNT=Be.flag((t,e,n)=>(n||0)+1);Be.ArgError=q;var da=Be;function ya(t){return ga(),hn[t]}var hn;function ga(){hn||(hn={"--conditions":[],...bs(Pa()),...bs(process.execArgv)})}function bs(t){return da({"--conditions":[String],"-C":"--conditions"},{argv:t,permissive:!0})}function Pa(){let t=[],e=ba(process.env.NODE_OPTIONS||"",t);return t.length,e}function ba(t,e){let n=[],r=!1,s=!0;for(let i=0;i<t.length;++i){let o=t[i];if(o==="\\"&&r){if(i+1===t.length)return e.push(`invalid value for NODE_OPTIONS (invalid escape)
`),n;o=t[++i]}else if(o===" "&&!r){s=!0;continue}else if(o==='"'){r=!r;continue}s?(n.push(o),s=!1):n[n.length-1]+=o}return r&&e.push(`invalid value for NODE_OPTIONS (unterminated string)
`),n}var[tn,ws]=process.versions.node.split(".").map(t=>parseInt(t,10)),wa=tn>19||tn===19&&ws>=2||tn===18&&ws>=13,Sa=new Set(Me.Module.builtinModules||Object.keys(process.binding("natives"))),nn=t=>t.startsWith("node:")||Sa.has(t);function ka(t){if(process.env.WATCH_REPORT_DEPENDENCIES&&process.send)if(t=t.map(e=>m.fromPortablePath($.resolveVirtual(m.toPortablePath(e)))),wa)process.send({"watch:require":t});else for(let e of t)process.send({"watch:require":e})}function Ms(t,e){let n=Number(process.env.PNP_ALWAYS_WARN_ON_FALLBACK)>0,r=Number(process.env.PNP_DEBUG_LEVEL),s=/^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:node:)?(?:@[^/]+\/)?[^/]+)\/*(.*|)$/,i=/^(\/|\.{1,2}(\/|$))/,o=/\/$/,a=/^\.{0,2}\//,c={name:null,reference:null},f=[],y=new Set;if(t.enableTopLevelFallback===!0&&f.push(c),e.compatibilityMode!==!1)for(let d of["react-scripts","gatsby"]){let p=t.packageRegistry.get(d);if(p)for(let S of p.keys()){if(S===null)throw new Error("Assertion failed: This reference shouldn't be null");f.push({name:d,reference:S})}}let{ignorePattern:l,packageRegistry:P,packageLocatorsByLocations:w}=t;function T(d,p){return{fn:d,args:p,error:null,result:null}}function u(d){let p=process.stderr?.hasColors?.()??process.stdout.isTTY,S=(I,x)=>`\x1B[${I}m${x}\x1B[0m`,h=d.error;console.error(h?S("31;1",`\u2716 ${d.error?.message.replace(/\n.*/s,"")}`):S("33;1","\u203C Resolution")),d.args.length>0&&console.error();for(let I of d.args)console.error(`  ${S("37;1","In \u2190")} ${hs.inspect(I,{colors:p,compact:!0})}`);d.result&&(console.error(),console.error(`  ${S("37;1","Out \u2192")} ${hs.inspect(d.result,{colors:p,compact:!0})}`));let g=new Error().stack.match(/(?<=^ +)at.*/gm)?.slice(2)??[];if(g.length>0){console.error();for(let I of g)console.error(`  ${S("38;5;244",I)}`)}console.error()}function L(d,p){if(e.allowDebug===!1)return p;if(Number.isFinite(r)){if(r>=2)return(...S)=>{let h=T(d,S);try{return h.result=p(...S)}catch(g){throw h.error=g}finally{u(h)}};if(r>=1)return(...S)=>{try{return p(...S)}catch(h){let g=T(d,S);throw g.error=h,u(g),h}}}return p}function E(d){let p=ae(d);if(!p)throw G(H.INTERNAL,"Couldn't find a matching entry in the dependency tree for the specified parent (this is probably an internal error)");return p}function F(d){if(d.name===null)return!0;for(let p of t.dependencyTreeRoots)if(p.name===d.name&&p.reference===d.reference)return!0;return!1}let O=new Set(["node","require",...ya("--conditions")]);function Q(d,p=O,S){let h=ge(R.join(d,"internal.js"),{resolveIgnored:!0,includeDiscardFromLookup:!0});if(h===null)throw G(H.INTERNAL,`The locator that owns the "${d}" path can't be found inside the dependency tree (this is probably an internal error)`);let{packageLocation:g}=E(h),I=R.join(g,ct.manifest);if(!e.fakeFs.existsSync(I))return null;let x=JSON.parse(e.fakeFs.readFileSync(I,"utf8"));if(x.exports==null)return null;let b=R.contains(g,d);if(b===null)throw G(H.INTERNAL,"unqualifiedPath doesn't contain the packageLocation (this is probably an internal error)");b!=="."&&!a.test(b)&&(b=`./${b}`);try{let U=ha({packageJSONUrl:C.pathToFileURL(m.fromPortablePath(I)),packageSubpath:b,exports:x.exports,base:S?C.pathToFileURL(m.fromPortablePath(S)):null,conditions:p});return m.toPortablePath(C.fileURLToPath(U))}catch(U){throw G(H.EXPORTS_RESOLUTION_FAILED,U.message,{unqualifiedPath:re(d),locator:h,pkgJson:x,subpath:re(b),conditions:p},U.code)}}function W(d,p,{extensions:S}){let h;try{p.push(d),h=e.fakeFs.statSync(d)}catch{}if(h&&!h.isDirectory())return e.fakeFs.realpathSync(d);if(h&&h.isDirectory()){let g;try{g=JSON.parse(e.fakeFs.readFileSync(R.join(d,ct.manifest),"utf8"))}catch{}let I;if(g&&g.main&&(I=R.resolve(d,g.main)),I&&I!==d){let x=W(I,p,{extensions:S});if(x!==null)return x}}for(let g=0,I=S.length;g<I;g++){let x=`${d}${S[g]}`;if(p.push(x),e.fakeFs.existsSync(x))return x}if(h&&h.isDirectory())for(let g=0,I=S.length;g<I;g++){let x=R.format({dir:d,name:"index",ext:S[g]});if(p.push(x),e.fakeFs.existsSync(x))return x}return null}function V(d){let p=new Me.Module(d,null);return p.filename=d,p.paths=Me.Module._nodeModulePaths(d),p}function _(d,p){return p.endsWith("/")&&(p=R.join(p,"internal.js")),Me.Module._resolveFilename(m.fromPortablePath(d),V(m.fromPortablePath(p)),!1,{plugnplay:!1})}function te(d){if(l===null)return!1;let p=R.contains(t.basePath,d);return p===null?!1:!!l.test(p.replace(/\/$/,""))}let Le={std:3,resolveVirtual:1,getAllLocators:1},oe=c;function ae({name:d,reference:p}){let S=P.get(d);if(!S)return null;let h=S.get(p);return h||null}function ce({name:d,reference:p}){let S=[];for(let[h,g]of P)if(h!==null)for(let[I,x]of g)I===null||x.packageDependencies.get(d)!==p||h===d&&I===p||S.push({name:h,reference:I});return S}function Y(d,p){let S=new Map,h=new Set,g=x=>{let b=JSON.stringify(x.name);if(h.has(b))return;h.add(b);let U=ce(x);for(let N of U)if(E(N).packagePeers.has(d))g(N);else{let j=S.get(N.name);typeof j>"u"&&S.set(N.name,j=new Set),j.add(N.reference)}};g(p);let I=[];for(let x of[...S.keys()].sort())for(let b of[...S.get(x)].sort())I.push({name:x,reference:b});return I}function ge(d,{resolveIgnored:p=!1,includeDiscardFromLookup:S=!1}={}){if(te(d)&&!p)return null;let h=R.relative(t.basePath,d);h.match(i)||(h=`./${h}`),h.endsWith("/")||(h=`${h}/`);do{let g=w.get(h);if(typeof g>"u"||g.discardFromLookup&&!S){h=h.substring(0,h.lastIndexOf("/",h.length-2)+1);continue}return g.locator}while(h!=="");return null}function Xe(d){try{return e.fakeFs.readFileSync(m.toPortablePath(d),"utf8")}catch(p){if(p.code==="ENOENT")return;throw p}}function Je(d,p,{considerBuiltins:S=!0}={}){if(d.startsWith("#"))throw new Error("resolveToUnqualified can not handle private import mappings");if(d==="pnpapi")return m.toPortablePath(e.pnpapiResolution);if(S&&nn(d))return null;let h=re(d),g=p&&re(p);if(p&&te(p)&&(!R.isAbsolute(d)||ge(d)===null)){let b=_(d,p);if(b===!1)throw G(H.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer was explicitely ignored by the regexp)

Require request: "${h}"
Required by: ${g}
`,{request:h,issuer:g});return m.toPortablePath(b)}let I,x=d.match(s);if(x){if(!p)throw G(H.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:h,issuer:g});let[,b,U]=x,N=ge(p);if(!N){let J=_(d,p);if(J===!1)throw G(H.BUILTIN_NODE_RESOLUTION_FAILED,`The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer doesn't seem to be part of the Yarn-managed dependency tree).

Require path: "${h}"
Required by: ${g}
`,{request:h,issuer:g});return m.toPortablePath(J)}let j=E(N).packageDependencies.get(b),Re=null;if(j==null&&N.name!==null){let J=t.fallbackExclusionList.get(N.name);if(!J||!J.has(N.reference)){for(let be=0,Xs=f.length;be<Xs;++be){let Tt=E(f[be]).packageDependencies.get(b);if(Tt!=null){n?Re=Tt:j=Tt;break}}if(t.enableTopLevelFallback&&j==null&&Re===null){let be=t.fallbackPool.get(b);be!=null&&(Re=be)}}}let K=null;if(j===null)if(F(N))K=G(H.MISSING_PEER_DEPENDENCY,`Your application tried to access ${b} (a peer dependency); this isn't allowed as there is no ancestor to satisfy the requirement. Use a devDependency if needed.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${g}
`,{request:h,issuer:g,dependencyName:b});else{let J=Y(b,N);J.every(le=>F(le))?K=G(H.MISSING_PEER_DEPENDENCY,`${N.name} tried to access ${b} (a peer dependency) but it isn't provided by your application; this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${N.name}@${N.reference} (via ${g})
${J.map(le=>`Ancestor breaking the chain: ${le.name}@${le.reference}
`).join("")}
`,{request:h,issuer:g,issuerLocator:Object.assign({},N),dependencyName:b,brokenAncestors:J}):K=G(H.MISSING_PEER_DEPENDENCY,`${N.name} tried to access ${b} (a peer dependency) but it isn't provided by its ancestors; this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${N.name}@${N.reference} (via ${g})

${J.map(le=>`Ancestor breaking the chain: ${le.name}@${le.reference}
`).join("")}
`,{request:h,issuer:g,issuerLocator:Object.assign({},N),dependencyName:b,brokenAncestors:J})}else j===void 0&&(!S&&nn(d)?F(N)?K=G(H.UNDECLARED_DEPENDENCY,`Your application tried to access ${b}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${b} isn't otherwise declared in your dependencies, this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${g}
`,{request:h,issuer:g,dependencyName:b}):K=G(H.UNDECLARED_DEPENDENCY,`${N.name} tried to access ${b}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${b} isn't otherwise declared in ${N.name}'s dependencies, this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${g}
`,{request:h,issuer:g,issuerLocator:Object.assign({},N),dependencyName:b}):F(N)?K=G(H.UNDECLARED_DEPENDENCY,`Your application tried to access ${b}, but it isn't declared in your dependencies; this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${g}
`,{request:h,issuer:g,dependencyName:b}):K=G(H.UNDECLARED_DEPENDENCY,`${N.name} tried to access ${b}, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.

Required package: ${b}${b!==h?` (via "${h}")`:""}
Required by: ${N.name}@${N.reference} (via ${g})
`,{request:h,issuer:g,issuerLocator:Object.assign({},N),dependencyName:b}));if(j==null){if(Re===null||K===null)throw K||new Error("Assertion failed: Expected an error to have been set");j=Re;let J=K.message.replace(/\n.*/g,"");K.message=J,!y.has(J)&&r!==0&&(y.add(J),process.emitWarning(K))}let Ne=Array.isArray(j)?{name:j[0],reference:j[1]}:{name:b,reference:j},bn=E(Ne);if(!bn.packageLocation)throw G(H.MISSING_DEPENDENCY,`A dependency seems valid but didn't get installed for some reason. This might be caused by a partial install, such as dev vs prod.

Required package: ${Ne.name}@${Ne.reference}${Ne.name!==h?` (via "${h}")`:""}
Required by: ${N.name}@${N.reference} (via ${g})
`,{request:h,issuer:g,dependencyLocator:Object.assign({},Ne)});let wn=bn.packageLocation;U?I=R.join(wn,U):I=wn}else if(R.isAbsolute(d))I=R.normalize(d);else{if(!p)throw G(H.API_ERROR,"The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute",{request:h,issuer:g});let b=R.resolve(p);p.match(o)?I=R.normalize(R.join(b,d)):I=R.normalize(R.join(R.dirname(b),d))}return R.normalize(I)}function kt(d,p,S=O,h){if(i.test(d))return p;let g=Q(p,S,h);return g?R.normalize(g):p}function Pe(d,{extensions:p=Object.keys(Me.Module._extensions)}={}){let S=[],h=W(d,S,{extensions:p});if(h)return R.normalize(h);{ka(S.map(x=>m.fromPortablePath(x)));let g=re(d),I=ge(d);if(I){let{packageLocation:x}=E(I),b=!0;try{e.fakeFs.accessSync(x)}catch(U){if(U?.code==="ENOENT")b=!1;else{let N=(U?.message??U??"empty exception thrown").replace(/^[A-Z]/,ze=>ze.toLowerCase());throw G(H.QUALIFIED_PATH_RESOLUTION_FAILED,`Required package exists but could not be accessed (${N}).

Missing package: ${I.name}@${I.reference}
Expected package location: ${re(x)}
`,{unqualifiedPath:g,extensions:p})}}if(!b){let U=x.includes("/unplugged/")?"Required unplugged package missing from disk. This may happen when switching branches without running installs (unplugged packages must be fully materialized on disk to work).":"Required package missing from disk. If you keep your packages inside your repository then restarting the Node process may be enough. Otherwise, try to run an install first.";throw G(H.QUALIFIED_PATH_RESOLUTION_FAILED,`${U}

Missing package: ${I.name}@${I.reference}
Expected package location: ${re(x)}
`,{unqualifiedPath:g,extensions:p})}}throw G(H.QUALIFIED_PATH_RESOLUTION_FAILED,`Qualified path resolution failed: we looked for the following paths, but none could be accessed.

Source path: ${g}
${S.map(x=>`Not found: ${re(x)}
`).join("")}`,{unqualifiedPath:g,extensions:p})}}function It(d,p,S){if(!p)throw new Error("Assertion failed: An issuer is required to resolve private import mappings");let h=pa({name:d,base:C.pathToFileURL(m.fromPortablePath(p)),conditions:S.conditions??O,readFileSyncFn:Xe});if(h instanceof URL)return Pe(m.toPortablePath(C.fileURLToPath(h)),{extensions:S.extensions});if(h.startsWith("#"))throw new Error("Mapping from one private import to another isn't allowed");return ne(h,p,S)}function ne(d,p,S={}){try{if(d.startsWith("#"))return It(d,p,S);let{considerBuiltins:h,extensions:g,conditions:I}=S,x=Je(d,p,{considerBuiltins:h});if(d==="pnpapi")return x;if(x===null)return null;let b=()=>p!==null?te(p):!1,U=(!h||!nn(d))&&!b()?kt(d,x,I,p):x;return Pe(U,{extensions:g})}catch(h){throw Object.prototype.hasOwnProperty.call(h,"pnpCode")&&Object.assign(h.data,{request:re(d),issuer:p&&re(p)}),h}}function fe(d){let p=R.normalize(d),S=$.resolveVirtual(p);return S!==p?S:null}return{VERSIONS:Le,topLevel:oe,getLocator:(d,p)=>Array.isArray(p)?{name:p[0],reference:p[1]}:{name:d,reference:p},getDependencyTreeRoots:()=>[...t.dependencyTreeRoots],getAllLocators(){let d=[];for(let[p,S]of P)for(let h of S.keys())p!==null&&h!==null&&d.push({name:p,reference:h});return d},getPackageInformation:d=>{let p=ae(d);if(p===null)return null;let S=m.fromPortablePath(p.packageLocation);return{...p,packageLocation:S}},findPackageLocator:d=>ge(m.toPortablePath(d)),resolveToUnqualified:L("resolveToUnqualified",(d,p,S)=>{let h=p!==null?m.toPortablePath(p):null,g=Je(m.toPortablePath(d),h,S);return g===null?null:m.fromPortablePath(g)}),resolveUnqualified:L("resolveUnqualified",(d,p)=>m.fromPortablePath(Pe(m.toPortablePath(d),p))),resolveRequest:L("resolveRequest",(d,p,S)=>{let h=p!==null?m.toPortablePath(p):null,g=ne(m.toPortablePath(d),h,S);return g===null?null:m.fromPortablePath(g)}),resolveVirtual:L("resolveVirtual",d=>{let p=fe(m.toPortablePath(d));return p!==null?m.fromPortablePath(p):null})}}async function Ia(t,{fakeFs:e,pnpapiResolution:n}){let r=await e.readFilePromise(t,"utf8");return Hs(r,{basePath:Ss.dirname(t),fakeFs:e,pnpapiResolution:n})}function Hs(t,{basePath:e,fakeFs:n,pnpapiResolution:r}){let s=JSON.parse(t),i=Os(s,{basePath:e});return Ms(i,{compatibilityMode:!0,fakeFs:n,pnpapiResolution:r})}var Ta=(t,e,n)=>{let r=mn(t),s=Os(r,{basePath:e}),i=m.join(e,ct.pnpCjs);return Ms(s,{fakeFs:n,pnpapiResolution:i})},rn,va=()=>(typeof rn>"u"&&(rn=ks.default.brotliDecompressSync(Buffer.from("","base64")).toString()),rn);ee.LinkType=Is;ee.generateInlinedScript=Yo;ee.generateLoader=dn;ee.generatePrettyJson=Ns;ee.generateSplitScript=Ko;ee.getESMLoaderTemplate=va;ee.hydratePnpFile=Ia;ee.hydratePnpSource=Hs;ee.makeRuntimeApi=Ta});var Aa={};Ys(Aa,{default:()=>Oa,getExistingYarnManifest:()=>Na,nixCurrentSystem:()=>Ra});var os=v("buffer"),as=z(v("path"),1),it=z(v("child_process"),1),Ue=z(v("process"),1),cs=z(lr(),1);function Ft(t){let e=typeof t=="string"?`
`:`
`.charCodeAt(),n=typeof t=="string"?"\r":"\r".charCodeAt();return t[t.length-1]===e&&(t=t.slice(0,-1)),t[t.length-1]===n&&(t=t.slice(0,-1)),t}var Oe=z(v("process"),1),ke=z(v("path"),1),ur=z(v("url"),1);function Ve(t={}){let{env:e=process.env,platform:n=process.platform}=t;return n!=="win32"?"PATH":Object.keys(e).reverse().find(r=>r.toUpperCase()==="PATH")||"Path"}function Ii(t={}){let{cwd:e=Oe.default.cwd(),path:n=Oe.default.env[Ve()],execPath:r=Oe.default.execPath}=t,s,i=e instanceof URL?ur.default.fileURLToPath(e):e,o=ke.default.resolve(i),a=[];for(;s!==o;)a.push(ke.default.join(o,"node_modules/.bin")),s=o,o=ke.default.resolve(o,"..");return a.push(ke.default.resolve(i,r,"..")),[...a,n].join(ke.default.delimiter)}function fr({env:t=Oe.default.env,...e}={}){t={...t};let n=Ve({env:t});return e.path=t[n],t[n]=Ii(e),t}var Ti=(t,e,n,r)=>{if(n==="length"||n==="prototype"||n==="arguments"||n==="caller")return;let s=Object.getOwnPropertyDescriptor(t,n),i=Object.getOwnPropertyDescriptor(e,n);!vi(s,i)&&r||Object.defineProperty(t,n,i)},vi=function(t,e){return t===void 0||t.configurable||t.writable===e.writable&&t.enumerable===e.enumerable&&t.configurable===e.configurable&&(t.writable||t.value===e.value)},xi=(t,e)=>{let n=Object.getPrototypeOf(e);n!==Object.getPrototypeOf(t)&&Object.setPrototypeOf(t,n)},Ei=(t,e)=>`/* Wrapped ${t}*/
${e}`,Li=Object.getOwnPropertyDescriptor(Function.prototype,"toString"),Ri=Object.getOwnPropertyDescriptor(Function.prototype.toString,"name"),Ni=(t,e,n)=>{let r=n===""?"":`with ${n.trim()}() `,s=Ei.bind(null,r,e.toString());Object.defineProperty(s,"name",Ri),Object.defineProperty(t,"toString",{...Li,value:s})};function Ut(t,e,{ignoreNonConfigurable:n=!1}={}){let{name:r}=t;for(let s of Reflect.ownKeys(e))Ti(t,e,s,n);return xi(t,e),Ni(t,e,r),t}var Ye=new WeakMap,hr=(t,e={})=>{if(typeof t!="function")throw new TypeError("Expected a function");let n,r=0,s=t.displayName||t.name||"<anonymous>",i=function(...o){if(Ye.set(i,++r),r===1)n=t.apply(this,o),t=null;else if(e.throw===!0)throw new Error(`Function \`${s}\` can only be called once`);return n};return Ut(i,t),Ye.set(i,r),i};hr.callCount=t=>{if(!Ye.has(t))throw new Error(`The given function \`${t.name}\` is not wrapped by the \`onetime\` package`);return Ye.get(t)};var pr=hr;var Sr=z(v("process"),1);var br=v("os");var mr=()=>{let t=yr-dr+1;return Array.from({length:t},Oi)},Oi=(t,e)=>({name:`SIGRT${e+1}`,number:dr+e,action:"terminate",description:"Application-specific signal (realtime)",standard:"posix"}),dr=34,yr=64;var Pr=v("os");var gr=[{name:"SIGHUP",number:1,action:"terminate",description:"Terminal closed",standard:"posix"},{name:"SIGINT",number:2,action:"terminate",description:"User interruption with CTRL-C",standard:"ansi"},{name:"SIGQUIT",number:3,action:"core",description:"User interruption with CTRL-\\",standard:"posix"},{name:"SIGILL",number:4,action:"core",description:"Invalid machine instruction",standard:"ansi"},{name:"SIGTRAP",number:5,action:"core",description:"Debugger breakpoint",standard:"posix"},{name:"SIGABRT",number:6,action:"core",description:"Aborted",standard:"ansi"},{name:"SIGIOT",number:6,action:"core",description:"Aborted",standard:"bsd"},{name:"SIGBUS",number:7,action:"core",description:"Bus error due to misaligned, non-existing address or paging error",standard:"bsd"},{name:"SIGEMT",number:7,action:"terminate",description:"Command should be emulated but is not implemented",standard:"other"},{name:"SIGFPE",number:8,action:"core",description:"Floating point arithmetic error",standard:"ansi"},{name:"SIGKILL",number:9,action:"terminate",description:"Forced termination",standard:"posix",forced:!0},{name:"SIGUSR1",number:10,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGSEGV",number:11,action:"core",description:"Segmentation fault",standard:"ansi"},{name:"SIGUSR2",number:12,action:"terminate",description:"Application-specific signal",standard:"posix"},{name:"SIGPIPE",number:13,action:"terminate",description:"Broken pipe or socket",standard:"posix"},{name:"SIGALRM",number:14,action:"terminate",description:"Timeout or timer",standard:"posix"},{name:"SIGTERM",number:15,action:"terminate",description:"Termination",standard:"ansi"},{name:"SIGSTKFLT",number:16,action:"terminate",description:"Stack is empty or overflowed",standard:"other"},{name:"SIGCHLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"posix"},{name:"SIGCLD",number:17,action:"ignore",description:"Child process terminated, paused or unpaused",standard:"other"},{name:"SIGCONT",number:18,action:"unpause",description:"Unpaused",standard:"posix",forced:!0},{name:"SIGSTOP",number:19,action:"pause",description:"Paused",standard:"posix",forced:!0},{name:"SIGTSTP",number:20,action:"pause",description:'Paused using CTRL-Z or "suspend"',standard:"posix"},{name:"SIGTTIN",number:21,action:"pause",description:"Background process cannot read terminal input",standard:"posix"},{name:"SIGBREAK",number:21,action:"terminate",description:"User interruption with CTRL-BREAK",standard:"other"},{name:"SIGTTOU",number:22,action:"pause",description:"Background process cannot write to terminal output",standard:"posix"},{name:"SIGURG",number:23,action:"ignore",description:"Socket received out-of-band data",standard:"bsd"},{name:"SIGXCPU",number:24,action:"core",description:"Process timed out",standard:"bsd"},{name:"SIGXFSZ",number:25,action:"core",description:"File too big",standard:"bsd"},{name:"SIGVTALRM",number:26,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGPROF",number:27,action:"terminate",description:"Timeout or timer",standard:"bsd"},{name:"SIGWINCH",number:28,action:"ignore",description:"Terminal window size changed",standard:"bsd"},{name:"SIGIO",number:29,action:"terminate",description:"I/O is available",standard:"other"},{name:"SIGPOLL",number:29,action:"terminate",description:"Watched event",standard:"other"},{name:"SIGINFO",number:29,action:"ignore",description:"Request for process information",standard:"other"},{name:"SIGPWR",number:30,action:"terminate",description:"Device running out of power",standard:"systemv"},{name:"SIGSYS",number:31,action:"core",description:"Invalid system call",standard:"other"},{name:"SIGUNUSED",number:31,action:"terminate",description:"Invalid system call",standard:"other"}];var Ct=()=>{let t=mr();return[...gr,...t].map(Ai)},Ai=({name:t,number:e,description:n,action:r,forced:s=!1,standard:i})=>{let{signals:{[t]:o}}=Pr.constants,a=o!==void 0;return{name:t,number:a?o:e,description:n,supported:a,action:r,forced:s,standard:i}};var Di=()=>{let t=Ct();return Object.fromEntries(t.map(Fi))},Fi=({name:t,number:e,description:n,supported:r,action:s,forced:i,standard:o})=>[t,{name:t,number:e,description:n,supported:r,action:s,forced:i,standard:o}],wr=Di(),Ui=()=>{let t=Ct(),e=64+1,n=Array.from({length:e},(r,s)=>Ci(s,t));return Object.assign({},...n)},Ci=(t,e)=>{let n=Mi(t,e);if(n===void 0)return{};let{name:r,description:s,supported:i,action:o,forced:a,standard:c}=n;return{[t]:{name:r,number:t,description:s,supported:i,action:o,forced:a,standard:c}}},Mi=(t,e)=>{let n=e.find(({name:r})=>br.constants.signals[r]===t);return n!==void 0?n:e.find(r=>r.number===t)},cc=Ui();var Hi=({timedOut:t,timeout:e,errorCode:n,signal:r,signalDescription:s,exitCode:i,isCanceled:o})=>t?`timed out after ${e} milliseconds`:o?"was canceled":n!==void 0?`failed with ${n}`:r!==void 0?`was killed with ${r} (${s})`:i!==void 0?`failed with exit code ${i}`:"failed",Ae=({stdout:t,stderr:e,all:n,error:r,signal:s,exitCode:i,command:o,escapedCommand:a,timedOut:c,isCanceled:f,killed:y,parsed:{options:{timeout:l,cwd:P=Sr.default.cwd()}}})=>{i=i===null?void 0:i,s=s===null?void 0:s;let w=s===void 0?void 0:wr[s].description,T=r&&r.code,L=`Command ${Hi({timedOut:c,timeout:l,errorCode:T,signal:s,signalDescription:w,exitCode:i,isCanceled:f})}: ${o}`,E=Object.prototype.toString.call(r)==="[object Error]",F=E?`${L}
${r.message}`:L,O=[F,e,t].filter(Boolean).join(`
`);return E?(r.originalMessage=r.message,r.message=O):r=new Error(O),r.shortMessage=F,r.command=o,r.escapedCommand=a,r.exitCode=i,r.signal=s,r.signalDescription=w,r.stdout=t,r.stderr=e,r.cwd=P,n!==void 0&&(r.all=n),"bufferedData"in r&&delete r.bufferedData,r.failed=!0,r.timedOut=Boolean(c),r.isCanceled=f,r.killed=y&&!c,r};var Ke=["stdin","stdout","stderr"],Gi=t=>Ke.some(e=>t[e]!==void 0),kr=t=>{if(!t)return;let{stdio:e}=t;if(e===void 0)return Ke.map(r=>t[r]);if(Gi(t))throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${Ke.map(r=>`\`${r}\``).join(", ")}`);if(typeof e=="string")return e;if(!Array.isArray(e))throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof e}\``);let n=Math.max(e.length,Ke.length);return Array.from({length:n},(r,s)=>e[s])};var Rr=z(v("os"),1),Nr=z(Lr(),1),Bi=1e3*5,Or=(t,e="SIGTERM",n={})=>{let r=t(e);return ji(t,e,n,r),r},ji=(t,e,n,r)=>{if(!Zi(e,n,r))return;let s=Ji(n),i=setTimeout(()=>{t("SIGKILL")},s);i.unref&&i.unref()},Zi=(t,{forceKillAfterTimeout:e},n)=>Xi(t)&&e!==!1&&n,Xi=t=>t===Rr.default.constants.signals.SIGTERM||typeof t=="string"&&t.toUpperCase()==="SIGTERM",Ji=({forceKillAfterTimeout:t=!0})=>{if(t===!0)return Bi;if(!Number.isFinite(t)||t<0)throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${t}\` (${typeof t})`);return t},Ar=(t,e)=>{t.kill()&&(e.isCanceled=!0)},zi=(t,e,n)=>{t.kill(e),n(Object.assign(new Error("Timed out"),{timedOut:!0,signal:e}))},Dr=(t,{timeout:e,killSignal:n="SIGTERM"},r)=>{if(e===0||e===void 0)return r;let s,i=new Promise((a,c)=>{s=setTimeout(()=>{zi(t,n,c)},e)}),o=r.finally(()=>{clearTimeout(s)});return Promise.race([i,o])},Fr=({timeout:t})=>{if(t!==void 0&&(!Number.isFinite(t)||t<0))throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${t}\` (${typeof t})`)},Ur=async(t,{cleanup:e,detached:n},r)=>{if(!e||n)return r;let s=(0,Nr.default)(()=>{t.kill()});return r.finally(()=>{s()})};var Cr=v("fs"),Mr=v("child_process");function tt(t){return t!==null&&typeof t=="object"&&typeof t.pipe=="function"}function Gt(t){return tt(t)&&t.writable!==!1&&typeof t._write=="function"&&typeof t._writableState=="object"}var qi=t=>t instanceof Mr.ChildProcess&&typeof t.then=="function",Bt=(t,e,n)=>{if(typeof n=="string")return t[e].pipe((0,Cr.createWriteStream)(n)),t;if(Gt(n))return t[e].pipe(n),t;if(!qi(n))throw new TypeError("The second argument must be a string, a stream or an Execa child process.");if(!Gt(n.stdin))throw new TypeError("The target child process's stdin must be available.");return t[e].pipe(n.stdin),n},Hr=t=>{t.stdout!==null&&(t.pipeStdout=Bt.bind(void 0,t,"stdout")),t.stderr!==null&&(t.pipeStderr=Bt.bind(void 0,t,"stderr")),t.all!==void 0&&(t.pipeAll=Bt.bind(void 0,t,"all"))};var rt=v("fs");var Jt=z(jr(),1),Jr=z(Xr(),1),zr=t=>{if(t!==void 0)throw new TypeError("The `input` and `inputFile` options cannot be both set.")},eo=({input:t,inputFile:e})=>typeof e!="string"?t:(zr(t),(0,rt.readFileSync)(e)),qr=t=>{let e=eo(t);if(tt(e))throw new TypeError("The `input` option cannot be a stream in sync mode");return e},to=({input:t,inputFile:e})=>typeof e!="string"?t:(zr(t),(0,rt.createReadStream)(e)),Wr=(t,e)=>{let n=to(e);n!==void 0&&(tt(n)?n.pipe(t.stdin):t.stdin.end(n))},Vr=(t,{all:e})=>{if(!e||!t.stdout&&!t.stderr)return;let n=(0,Jr.default)();return t.stdout&&n.add(t.stdout),t.stderr&&n.add(t.stderr),n},Zt=async(t,e)=>{if(!(!t||e===void 0)){t.destroy();try{return await e}catch(n){return n.bufferedData}}},Xt=(t,{encoding:e,buffer:n,maxBuffer:r})=>{if(!(!t||!n))return e?(0,Jt.default)(t,{encoding:e,maxBuffer:r}):Jt.default.buffer(t,{maxBuffer:r})},Yr=async({stdout:t,stderr:e,all:n},{encoding:r,buffer:s,maxBuffer:i},o)=>{let a=Xt(t,{encoding:r,buffer:s,maxBuffer:i}),c=Xt(e,{encoding:r,buffer:s,maxBuffer:i}),f=Xt(n,{encoding:r,buffer:s,maxBuffer:i*2});try{return await Promise.all([o,a,c,f])}catch(y){return Promise.all([{error:y,signal:y.signal,timedOut:y.timedOut},Zt(t,a),Zt(e,c),Zt(n,f)])}};var no=(async()=>{})().constructor.prototype,ro=["then","catch","finally"].map(t=>[t,Reflect.getOwnPropertyDescriptor(no,t)]),zt=(t,e)=>{for(let[n,r]of ro){let s=typeof e=="function"?(...i)=>Reflect.apply(r.value,e(),i):r.value.bind(e);Reflect.defineProperty(t,n,{...r,value:s})}},Kr=t=>new Promise((e,n)=>{t.on("exit",(r,s)=>{e({exitCode:r,signal:s})}),t.on("error",r=>{n(r)}),t.stdin&&t.stdin.on("error",r=>{n(r)})});var $r=v("buffer"),es=v("child_process"),ts=(t,e=[])=>Array.isArray(e)?[t,...e]:[t],so=/^[\w.-]+$/,io=/"/g,oo=t=>typeof t!="string"||so.test(t)?t:`"${t.replace(io,'\\"')}"`,qt=(t,e)=>ts(t,e).join(" "),Wt=(t,e)=>ts(t,e).map(n=>oo(n)).join(" "),ao=/ +/g;var Qr=t=>{let e=typeof t;if(e==="string")return t;if(e==="number")return String(t);if(e==="object"&&t!==null&&!(t instanceof es.ChildProcess)&&"stdout"in t){let n=typeof t.stdout;if(n==="string")return t.stdout;if($r.Buffer.isBuffer(t.stdout))return t.stdout.toString();throw new TypeError(`Unexpected "${n}" stdout in template expression`)}throw new TypeError(`Unexpected "${e}" in template expression`)},_r=(t,e,n)=>n||t.length===0||e.length===0?[...t,...e]:[...t.slice(0,-1),`${t[t.length-1]}${e[0]}`,...e.slice(1)],co=({templates:t,expressions:e,tokens:n,index:r,template:s})=>{let i=s??t.raw[r],o=i.split(ao).filter(Boolean),a=_r(n,o,i.startsWith(" "));if(r===e.length)return a;let c=e[r],f=Array.isArray(c)?c.map(y=>Qr(y)):[Qr(c)];return _r(a,f,i.endsWith(" "))},Vt=(t,e)=>{let n=[];for(let[r,s]of t.entries())n=co({templates:t,expressions:e,tokens:n,index:r,template:s});return n};var ns=v("util"),rs=z(v("process"),1),ss=(0,ns.debuglog)("execa").enabled,st=(t,e)=>String(t).padStart(e,"0"),lo=()=>{let t=new Date;return`${st(t.getHours(),2)}:${st(t.getMinutes(),2)}:${st(t.getSeconds(),2)}.${st(t.getMilliseconds(),3)}`},Yt=(t,{verbose:e})=>{!e||rs.default.stderr.write(`[${lo()}] ${t}
`)};var uo=1e3*1e3*100,fo=({env:t,extendEnv:e,preferLocal:n,localDir:r,execPath:s})=>{let i=e?{...Ue.default.env,...t}:t;return n?fr({env:i,cwd:r,execPath:s}):i},ls=(t,e,n={})=>{let r=cs.default._parse(t,e,n);return t=r.command,e=r.args,n=r.options,n={maxBuffer:uo,buffer:!0,stripFinalNewline:!0,extendEnv:!0,preferLocal:!1,localDir:n.cwd||Ue.default.cwd(),execPath:Ue.default.execPath,encoding:"utf8",reject:!0,cleanup:!0,all:!1,windowsHide:!0,verbose:ss,...n},n.env=fo(n),n.stdio=kr(n),Ue.default.platform==="win32"&&as.default.basename(t,".exe")==="cmd"&&e.unshift("/q"),{file:t,args:e,options:n,parsed:r}},Ce=(t,e,n)=>typeof e!="string"&&!os.Buffer.isBuffer(e)?n===void 0?void 0:"":t.stripFinalNewline?Ft(e):e;function Kt(t,e,n){let r=ls(t,e,n),s=qt(t,e),i=Wt(t,e);Yt(i,r.options),Fr(r.options);let o;try{o=it.default.spawn(r.file,r.args,r.options)}catch(w){let T=new it.default.ChildProcess,u=Promise.reject(Ae({error:w,stdout:"",stderr:"",all:"",command:s,escapedCommand:i,parsed:r,timedOut:!1,isCanceled:!1,killed:!1}));return zt(T,u),T}let a=Kr(o),c=Dr(o,r.options,a),f=Ur(o,r.options,c),y={isCanceled:!1};o.kill=Or.bind(null,o.kill.bind(o)),o.cancel=Ar.bind(null,o,y);let P=pr(async()=>{let[{error:w,exitCode:T,signal:u,timedOut:L},E,F,O]=await Yr(o,r.options,f),Q=Ce(r.options,E),W=Ce(r.options,F),V=Ce(r.options,O);if(w||T!==0||u!==null){let _=Ae({error:w,exitCode:T,signal:u,stdout:Q,stderr:W,all:V,command:s,escapedCommand:i,parsed:r,timedOut:L,isCanceled:y.isCanceled||(r.options.signal?r.options.signal.aborted:!1),killed:o.killed});if(!r.options.reject)return _;throw _}return{command:s,escapedCommand:i,exitCode:0,stdout:Q,stderr:W,all:V,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}});return Wr(o,r.options),o.all=Vr(o,r.options),Hr(o),zt(o,P),o}function Qt(t,e,n){let r=ls(t,e,n),s=qt(t,e),i=Wt(t,e);Yt(i,r.options);let o=qr(r.options),a;try{a=it.default.spawnSync(r.file,r.args,{...r.options,input:o})}catch(y){throw Ae({error:y,stdout:"",stderr:"",all:"",command:s,escapedCommand:i,parsed:r,timedOut:!1,isCanceled:!1,killed:!1})}let c=Ce(r.options,a.stdout,a.error),f=Ce(r.options,a.stderr,a.error);if(a.error||a.status!==0||a.signal!==null){let y=Ae({stdout:c,stderr:f,error:a.error,signal:a.signal,exitCode:a.status,command:s,escapedCommand:i,parsed:r,timedOut:a.error&&a.error.code==="ETIMEDOUT",isCanceled:!1,killed:a.signal!==null});if(!r.options.reject)return y;throw y}return{command:s,escapedCommand:i,exitCode:0,stdout:c,stderr:f,failed:!1,timedOut:!1,isCanceled:!1,killed:!1}}var ho=({input:t,inputFile:e,stdio:n})=>t===void 0&&e===void 0&&n===void 0?{stdin:"inherit"}:{},is=(t={})=>({preferLocal:!0,...ho(t),...t});function us(t){function e(n,...r){if(!Array.isArray(n))return us({...t,...n});let[s,...i]=Vt(n,r);return Kt(s,i,is(t))}return e.sync=(n,...r)=>{if(!Array.isArray(n))throw new TypeError("Please use $(options).sync`command` instead of $.sync(options)`command`.");let[s,...i]=Vt(n,r);return Qt(s,i,is(t))},e}var Bc=us();var k=v("@yarnpkg/core"),ye=v("@yarnpkg/cli"),A=v("@yarnpkg/fslib"),Pn=v("@yarnpkg/libzip"),Zs=v("@yarnpkg/plugin-file"),Z=v("clipanion"),X=z(v("typanion")),xa=fs(),ie=v("fs"),se=v("path"),{PassThrough:js}=v("stream"),{spawnSync:qc}=v("child_process"),{generateInlinedScript:Ea}=Gs(),gn;function La(t,e){for(let[n,r]of t.entries())if(r===e)return n}function Ra(){if(gn)return gn;let t=JSON.parse(Qt("nix",["eval","--impure","--json","--expr","builtins.currentSystem"]).stdout);return gn=t,t}async function Na(t){try{let e=["eval","--json","--impure","--expr",xa+`

        getPackages (import ${t})
      `],{stdout:n}=await Kt("nix",e,{stderr:"ignore"});return JSON.parse(n)}catch{return null}}var{toPortablePath:Ze}=A.npath,dt=(...t)=>{process.env.YARNNIX_DEBUG&&console.log(...t)};function Bs(t){let e=t.indexOf("/");return e!==-1?t.slice(e+1):t}var yt=class extends ye.BaseCommand{constructor(){super(...arguments);this.locator=Z.Option.String({validator:X.default.isString()});this.outDirectory=Z.Option.String({validator:X.default.isString()})}async execute(){let n=await k.Configuration.find(A.ppath.cwd(),this.context.plugins),{project:r,workspace:s}=await k.Project.find(n,A.ppath.cwd()),i=n.makeFetcher(),o=await k.StreamReport.start({configuration:n,stdout:this.context.stdout,includeLogs:!this.context.quiet},async a=>{n.values.set("enableMirror",!1);let c={...JSON.parse(this.locator),locatorHash:"",identHash:""};k.structUtils.isVirtualLocator(c)&&(c=k.structUtils.devirtualizeLocator(c));let f={checksums:new Map,project:r,cache:new k.Cache(Ze(this.outDirectory),{check:!1,configuration:n,immutable:!1}),fetcher:i,report:a},y=await i.fetch(c,f);ie.renameSync(y.packageFs.target,se.join(this.outDirectory,"output.zip"))})}};yt.paths=[["nix","fetch-by-locator"]];var gt=class extends ye.BaseCommand{constructor(){super(...arguments);this.packageRegistryDataPath=Z.Option.String({validator:X.default.isString()})}async execute(){let n=await k.Configuration.find(A.ppath.cwd(),this.context.plugins),r=new k.Project(A.ppath.cwd(),{configuration:n});await r.setupResolutions();let s=JSON.parse(ie.readFileSync(this.packageRegistryDataPath,"utf8")),i=Object.values(s).filter(o=>!!o?.manifest);for(let o of i){let a=Object.assign({},o.manifest,{name:o.name,reference:o.reference}),c=new Map,f=new Map(Object.entries(a.bin??{})),y=k.structUtils.makeIdent(a.scope,a.flatName),l=k.structUtils.makeLocator(y,a.reference),P=k.structUtils.makeDescriptor(y,a.descriptorRange);a.locatorHash=l.locatorHash,a.descriptorHash=P.descriptorHash,o.manifest.locatorHash=l.locatorHash,o.manifest.descriptorHash=P.descriptorHash;let w={...l,languageName:a.languageName,linkType:a.linkType,conditions:null,dependencies:c,bin:f};r.originalPackages.set(a.locatorHash,w),r.storedResolutions.set(a.descriptorHash,a.locatorHash),a.checksum!=null&&r.storedChecksums.set(a.locatorHash,a.checksum),r.storedDescriptors.set(a.descriptorHash,P)}for(let o of i){let a=r.originalPackages.get(o.manifest.locatorHash);if(!a)continue;let c=o.packageDependencies??{};for(let f of Object.keys(c)){let[y,l]=c[f],P=i.find(w=>w?.name===y&&w?.reference===l);if(P?.manifest?.descriptorHash!=null){let w=r.storedDescriptors.get(P.manifest.descriptorHash);w!=null&&a.dependencies.set(P.manifest.descriptorHash,w)}}}r.storedPackages=r.originalPackages,await r.persistLockfile()}};gt.paths=[["nix","create-lockfile"]];var Pt=class extends ye.BaseCommand{constructor(){super(...arguments);this.locator=Z.Option.String({validator:X.default.isString()});this.tgzPath=Z.Option.String({validator:X.default.isString()});this.outPath=Z.Option.String({validator:X.default.isString()})}async execute(){let n=await k.Configuration.find(A.ppath.cwd(),this.context.plugins),{project:r,workspace:s}=await k.Project.find(n,A.ppath.cwd()),i={...JSON.parse(this.locator),locatorHash:"",identHash:""},o=await k.tgzUtils.convertToZip(ie.readFileSync(this.tgzPath),{compressionLevel:r.configuration.get("compressionLevel"),prefixPath:k.structUtils.getIdentVendorPath(i),stripComponents:1});ie.copyFileSync(o.getRealPath(),this.outPath)}};Pt.paths=[["nix","convert-to-zip"]];var bt=class extends ye.BaseCommand{constructor(){super(...arguments);this.outDirectory=Z.Option.String({validator:X.default.isString()});this.packageRegistryDataPath=Z.Option.String({validator:X.default.isString()});this.topLevelPackageLocator=Z.Option.String({validator:X.default.isString()})}async execute(){let n=await k.Configuration.find(A.ppath.cwd(),this.context.plugins),{project:r,workspace:s}=await k.Project.find(n,A.ppath.cwd()),i=A.ppath.join(Ze(this.outDirectory),A.Filename.pnpCjs),o=r.configuration.get("pnpFallbackMode"),a=[],c=o!=="none",f=new Map,y=k.miscUtils.buildIgnorePattern([".yarn/sdks/**",...r.configuration.get("pnpIgnorePatterns")]),l=r.configuration.get("pnpShebang"),P=new Map,w=JSON.parse(ie.readFileSync(this.packageRegistryDataPath,"utf8")),T=null,u=ie.realpathSync(this.outDirectory);for(let F of Object.keys(w)){let O=w[F];if(!O)continue;let Q=k.structUtils.makeIdent(O.manifest.scope,O.manifest.flatName),W=k.structUtils.makeLocator(Q,O.reference),V=k.structUtils.isVirtualLocator(O),_=new Map,te=new Set;for(let Y of O.manifest?.packagePeers??[])_.set(Y,null),te.add(Y);if(O.packageDependencies!=null)for(let Y of Object.keys(O.packageDependencies))_.set(Y,O.packageDependencies[Y]);let Le=O.packageLocation??O.drvPath+"/node_modules/"+O.name,oe=se.relative(u,Le),ae=(oe.startsWith("../")?oe:"./"+oe)+"/";V&&(ae="./"+A.VirtualFS.makeVirtualPath(Ze("./.yarn/__virtual__"),k.structUtils.slugifyLocator(W),oe)+"/");let ce={packageLocation:ae,packageDependencies:_,packagePeers:te,linkType:O.linkType};k.miscUtils.getMapWithDefault(P,O.name).set(O.reference,ce),W.reference.startsWith("workspace:")&&a.push({name:k.structUtils.stringifyIdent(W),reference:W.reference}),`${O.name}@${O.reference}`===this.topLevelPackageLocator&&(T=ce)}if(T!=null)k.miscUtils.getMapWithDefault(P,null).set(null,T);else throw new Error("Could not determine topLevelPackage, this is NEEDED for the .pnp.cjs to be correctly generated");let E=Ea({dependencyTreeRoots:a,enableTopLevelFallback:c,fallbackExclusionList:o==="dependencies-only"?a:[],fallbackPool:f,ignorePattern:y,packageRegistry:P,shebang:l});await A.xfs.changeFilePromise(i,E,{automaticNewlines:!0,mode:493})}};bt.paths=[["nix","generate-pnp-file"]];var wt=class extends ye.BaseCommand{constructor(){super(...arguments);this.binWrappersOutDirectory=Z.Option.String({validator:X.default.isString()});this.pnpOutDirectory=Z.Option.String({validator:X.default.isString()});this.packageRegistryDataPath=Z.Option.String({validator:X.default.isString()});this.topLevelPackageLocator=Z.Option.String({validator:X.default.isString()})}async execute(){let n=JSON.parse(ie.readFileSync(this.packageRegistryDataPath,"utf8")),r=ie.realpathSync(this.pnpOutDirectory);for(let s of Object.keys(n)){let i=n[s];if(!i)continue;let o=k.structUtils.makeIdent(i.manifest.scope,i.manifest.flatName),a=k.structUtils.makeLocator(o,i.reference),c=k.structUtils.isVirtualLocator(i),f=i.packageLocation??i.drvPath+"/node_modules/"+i.name,y=se.relative(r,f),l=f;if(`${i.name}@${i.reference}`!==this.topLevelPackageLocator){c&&(l=se.join(r,A.VirtualFS.makeVirtualPath(Ze("./.yarn/__virtual__"),k.structUtils.slugifyLocator(a),y)));for(let w of Object.keys(i?.manifest?.bin??{})){let T=se.join(l,i.manifest.bin[w]);await A.xfs.writeFilePromise(se.join(this.binWrappersOutDirectory,w),`node ${T} "$@"`,{mode:493})}}}}};wt.paths=[["nix","make-path-wrappers"]];var St=class extends ye.BaseCommand{constructor(){super(...arguments);this.locator=Z.Option.String({validator:X.default.isString()});this.pnpRootDirectory=Z.Option.String({validator:X.default.isString()});this.packageDirectory=Z.Option.String({validator:X.default.isString()})}async execute(){let n=await k.Configuration.find(A.ppath.cwd(),this.context.plugins),{project:r,workspace:s}=await k.Project.find(n,A.ppath.cwd()),i=JSON.parse(this.locator),o=k.structUtils.makeIdent(i.scope,i.name),a=k.structUtils.makeLocator(o,i.reference),c=r.originalPackages.get(a.locatorHash);r.cwd=this.pnpRootDirectory,r.storedPackages=r.originalPackages;let f=await Pn.ZipOpenFS.openPromise(async y=>{let l=r.configuration.getLinkers(),P={project:r,report:new k.StreamReport({stdout:new js,configuration:n})},w=l.find(E=>E.supportsPackage(c,P));if(!w)throw new Error(`The package ${k.structUtils.prettyLocator(r.configuration,c)} isn't supported by any of the available linkers`);let T=await w.findPackageLocation(c,P),u=new A.CwdFS(T,{baseFs:y});return await k.Manifest.find(A.PortablePath.dot,{baseFs:u})});for(let y of["preinstall","install","postinstall"]){if(!f.scripts.has(y))continue;let l=await k.scriptUtils.executePackageScript(c,y,[],{cwd:Ze(this.packageDirectory),project:r,stdin:process.stdin,stdout:process.stdout,stderr:process.stderr});if(l>0)return l}}};St.paths=[["nix","run-build-scripts"]];var Oa={hooks:{afterAllInstalled:async(t,e)=>{let n=t.configuration.getLinkers(),r={project:t,report:null},s=new Map(n.map(T=>{let u=T.makeInstaller(r),L=T.getCustomDataKey(),E=t.linkersCustomData.get(L);return typeof E<"u"&&u.attachCustomData(E),[T,u]})),i=await k.Cache.find(t.configuration),o=t.configuration.makeFetcher(),a={checksums:new Map,project:t,cache:null,fetcher:o,report:null},c=t.configuration.makeResolver(),f={project:t,report:e.report,resolver:c},y={};for(let[T,u]of t.storedPackages){let L=k.structUtils.isVirtualLocator(u),E=L?t.storedPackages.get(k.structUtils.devirtualizeLocator(u).locatorHash):u,F=n.find(h=>h.supportsPackage(E,r)),O=s.get(F),Q=o.getLocalPath(E,a);if(!Q){let h=Zs.fileUtils.parseSpec(E.reference);if(h?.parentLocator!=null&&h?.path!=null){let g=o.getLocalPath(h.parentLocator,a),I=se.resolve(g,h.path);I!=null&&(Q=I)}}let W=Q!=null?"./"+se.relative(t.cwd,Q):null,V=u.reference.startsWith("workspace:")?`./${u.reference.substring(10)}`:W??null,_=u.bin!=null?Object.fromEntries(u.bin):null,te=V!=null?!0:O?.shouldBeUnplugged!=null?O.customData.store.get(u.locatorHash)!=null?O.shouldBeUnplugged(u,O.customData.store.get(u.locatorHash),t.getDependencyMeta(k.structUtils.isVirtualLocator(u)?k.structUtils.devirtualizeLocator(u):u,u.version)):!1:!0,Le=!V&&!te,oe=V!=null&&u.reference.startsWith("patch:"),ae=null;if(u.conditions!=null){let h=u.conditions.split("&").map(I=>I.trim().split("=")),g=[];for(let I of h){let x=I[0],b=I[1];if(x==="os")b==="linux"?g.push("stdenv.isLinux"):b==="darwin"?g.push("stdenv.isDarwin"):g.push("false");else if(x==="cpu"){let U={ia32:"stdenv.isi686",x64:"stdenv.isx86_64",arm:"stdenv.isAarch32",arm64:"stdenv.isAarch64"};U[b]!=null?g.push(U[b]):g.push("false")}else x==="libc"&&b!=="glibc"&&g.push("false")}g.length>0&&(ae=`stdenv: ${g.map(I=>`(${I})`).join(" && ")}`)}let ce=u.dependencies,Y=new Map;if(E.reference.startsWith("workspace:")){let h=await Pn.ZipOpenFS.openPromise(async g=>{let I=t.configuration.getLinkers(),x={project:t,report:new k.StreamReport({stdout:new js,configuration:t.configuration})},b=I.find(j=>j.supportsPackage(E,x));if(!b)throw new Error(`The package ${k.structUtils.prettyLocator(t.configuration,u)} isn't supported by any of the available linkers`);let U=await b.findPackageLocation(E,x),N=new A.CwdFS(U,{baseFs:g});return await k.Manifest.find(A.PortablePath.dot,{baseFs:N})});h!=null&&(ce=new Map,Y=new Map,h.devDependencies&&(Array.from(h.devDependencies).map(([g,I])=>Y.set(g,u.dependencies.get(g))),Array.from(u.dependencies).map(([g,I])=>Y.has(g)?null:ce.set(g,I))))}let Xe=h=>Promise.all(Array.from(h).map(async([g,I])=>{if(!I)return dt(`failed to resolve pkg ${g}`,I),null;let x=t.storedResolutions.get(I.descriptorHash),b=x!=null?t.storedPackages.get(x):null;return b?{key:g,name:k.structUtils.stringifyIdent(I),packageManifestId:k.structUtils.stringifyIdent(b)+"@"+b.reference}:(dt(`failed to resolve pkg ${g}`,I),null)})).then(g=>g.filter(I=>!!I)),Je=await Xe(ce),kt=await Xe(Y),Pe=[];for(let h of u.peerDependencies.values())Pe.push(k.structUtils.stringifyIdent(h));let It=k.structUtils.stringifyIdent(u)+"@"+u.reference,ne=null,fe=null;await async function(){if(V!=null&&!oe){ne=null,fe=null;return}else if(Le){ne=Bs(t.storedChecksums.get(u.locatorHash)??""),fe=null;return}else if(te){if(ne=Bs(t.storedChecksums.get(u.locatorHash)??""),!ne){dt("got package unplugged package with no hash",u);try{let h=i.getLocatorPath(u,null);ne=await k.hashUtils.checksumFile(h)}catch(h){dt("error getting outputHash",h.message)}}fe=null;return}else{ne=null,fe=null;return}}();let d=La(t.storedResolutions,u.locatorHash),p=t.storedDescriptors.get(d),S=t.storedChecksums.get(u.locatorHash);y[It]={isVirtual:L,canonicalPackage:E,name:k.structUtils.stringifyIdent(u),reference:u.reference,linkType:u.linkType,outputName:[k.structUtils.stringifyIdent(u),u.version,u.locatorHash.substring(0,10)].filter(h=>!!h).join("-").replace(/@/g,"").replace(/[\/]/g,"-"),outputHash:ne,outputHashByPlatform:fe,src:V,shouldBeUnplugged:te,installCondition:ae,bin:_,flatName:u.name,descriptor:p,languageName:u.languageName,scope:u.scope,checksum:S,dependencies:Je,devDependencies:kt,packagePeers:Pe}}let l=[];l.push('# This file is generated by running "yarn install" inside your project.'),l.push("# It is essentially a version of yarn.lock that Nix can better understand"),l.push("# Manual changes WILL be lost - proceed with caution!"),l.push("let"),l.push("  packages = {");function P(T,u){if(u.length>0){l.push(`      ${T} = {`);for(let L of u)l.push(`        ${JSON.stringify(L.name)} = packages.${JSON.stringify(L.packageManifestId)};`);l.push("      };")}}let w=Object.keys(y).sort((T,u)=>T.localeCompare(u));for(let T of w){let u=y[T];if(l.push(`    "${T}" = {`),l.push(`      name = ${JSON.stringify(u.name)};`),l.push(`      reference = ${JSON.stringify(u.reference)};`),u.isVirtual&&u.canonicalPackage!=null&&l.push(`      canonicalPackage = packages.${JSON.stringify(`${k.structUtils.stringifyIdent(u.canonicalPackage)}@${u.canonicalPackage.reference}`)};`),!u.isVirtual){if(l.push(`      linkType = ${JSON.stringify(u.linkType)};`),l.push(`      outputName = ${JSON.stringify(u.outputName)};`),u.outputHash!=null&&l.push(`      outputHash = ${JSON.stringify(u.outputHash)};`),u.outputHashByPlatform&&Object.keys(u.outputHashByPlatform).length>0){l.push("      outputHashByPlatform = {");for(let L of Object.keys(u.outputHashByPlatform))l.push(`        ${JSON.stringify(L)} = ${JSON.stringify(u.outputHashByPlatform[L])};`);l.push("      };")}if(u.src&&l.push(`      src = ${u.src};`),u.shouldBeUnplugged&&l.push(`      shouldBeUnplugged = ${u.shouldBeUnplugged};`),u.installCondition&&l.push(`      installCondition = ${u.installCondition};`),l.push(`      flatName = ${JSON.stringify(u.flatName)};`),l.push(`      languageName = ${JSON.stringify(u.languageName)};`),l.push(`      scope = ${JSON.stringify(u.scope)};`),l.push(`      descriptorRange = ${JSON.stringify(u.descriptor.range)};`),u.checksum&&l.push(`      checksum = ${JSON.stringify(u.checksum)};`),u.bin&&Object.keys(u.bin).length>0){l.push("      bin = {");for(let L of Object.keys(u.bin))l.push(`        ${JSON.stringify(L)} = ${JSON.stringify(u.bin[L])};`);l.push("      };")}}if(P("dependencies",u.dependencies),P("devDependencies",u.devDependencies),!u.isVirtual&&u.packagePeers&&u.packagePeers.length>0){l.push("      packagePeers = [");for(let L of u.packagePeers)l.push(`        ${JSON.stringify(L)}`);l.push("      ];")}l.push("    };")}l.push("  };"),l.push("in"),l.push("packages"),l.push(""),ie.writeFileSync(se.join(t.cwd,"yarn-manifest.nix"),l.join(`
`),"utf8")},populateYarnPaths:async t=>{let e=process.env.YARNNIX_PACKAGE_REGISTRY_DATA_PATH;if(e){let n=JSON.parse(ie.readFileSync(e,"utf8")),r=Object.values(n).filter(s=>!!s?.manifest);for(let s of r)if(s.canonicalReference.startsWith("workspace:")&&s.drvPath!==process.env.out){let i=s.packageLocation??se.join(s.drvPath,"node_modules",s.name),o=new k.Workspace(i,{project:t});await o.setup(),t.addWorkspace(o)}}}},commands:[gt,yt,Pt,bt,wt,St]};return Ks(Aa);})();
/**
  @license
  Copyright Node.js contributors. All rights reserved.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
*/
/**
  @license
  The MIT License (MIT)

  Copyright (c) 2014 Blake Embrey (hello@blakeembrey.com)

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
return plugin;
}
};
